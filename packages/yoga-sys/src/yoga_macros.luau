-- @generated by tools/replaceMacros.lua

--[[
	MIT License

Copyright (c) Facebook, Inc. and its affiliates.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
]]

--!optimize 2
--!strict

-- Note: This module is extracted out of `init.lua` (originally `yoga.ts`) to avoid Luau's maximum local limit.
-- For performance reasons, everything in `init.lua` must be defined as a local, so we quickly run into the limit.

local PackageRoot = script.Parent

local Types = require(PackageRoot.types)
type YGStyle = Types.YGStyle
type YGNode = Types.YGNode
type YGConfig = Types.YGConfig
type YGValue = Types.YGValue

local ygvalueModule = require(PackageRoot.ygvalue)
local YGValue = ygvalueModule.YGValue
local YGUndefined = ygvalueModule.YGUndefined

local Enums = require(PackageRoot.enums)
local YGUnit = Enums.YGUnit
type YGUnit = Enums.YGUnit
local YGEdge = Enums.YGEdge
type YGEdge = Enums.YGEdge
type YGNodeType = Enums.YGNodeType
type YGFlexDirection = Enums.YGFlexDirection
type YGAlign = Enums.YGAlign
type YGMeasureMode = Enums.YGMeasureMode
type YGLogLevel = Enums.YGLogLevel
local YGDirection = Enums.YGDirection
type YGDirection = Enums.YGDirection
type YGJustify = Enums.YGJustify
type YGPositionType = Enums.YGPositionType
type YGWrap = Enums.YGWrap
type YGOverflow = Enums.YGOverflow
type YGDisplay = Enums.YGDisplay
local YGDimension = Enums.YGDimension
type YGDimension = Enums.YGDimension
type YGPrintOptions = Enums.YGPrintOptions
type YGExperimentalFeature = Enums.YGExperimentalFeature

local Utils = require(PackageRoot.utils)
local YGFloatIsUndefined = Utils.YGFloatIsUndefined
local YGFloatSanitize = Utils.YGFloatSanitize

local exports = {}

local function YGNodeStyleSetDirection(node: YGNode, direction: YGDirection)
    if node:getStyle().direction ~= direction then
        local style: YGStyle = node:getStyle()
        style.direction = direction
        node:setStyle(style)
        node:markDirtyAndPropogate()
    end
end
exports.YGNodeStyleSetDirection = YGNodeStyleSetDirection

local function YGNodeStyleGetDirection(node: YGNode): YGDirection
    return node:getStyle().direction
end
exports.YGNodeStyleGetDirection = YGNodeStyleGetDirection

local function YGNodeStyleSetFlexDirection(node: YGNode, flexDirection: YGFlexDirection)
    if node:getStyle().flexDirection ~= flexDirection then
        local style: YGStyle = node:getStyle()
        style.flexDirection = flexDirection
        node:setStyle(style)
        node:markDirtyAndPropogate()
    end
end
exports.YGNodeStyleSetFlexDirection = YGNodeStyleSetFlexDirection

local function YGNodeStyleGetFlexDirection(node: YGNode): YGFlexDirection
    return node:getStyle().flexDirection
end
exports.YGNodeStyleGetFlexDirection = YGNodeStyleGetFlexDirection

local function YGNodeStyleSetJustifyContent(node: YGNode, justifyContent: YGJustify)
    if node:getStyle().justifyContent ~= justifyContent then
        local style: YGStyle = node:getStyle()
        style.justifyContent = justifyContent
        node:setStyle(style)
        node:markDirtyAndPropogate()
    end
end
exports.YGNodeStyleSetJustifyContent = YGNodeStyleSetJustifyContent

local function YGNodeStyleGetJustifyContent(node: YGNode): YGJustify
    return node:getStyle().justifyContent
end
exports.YGNodeStyleGetJustifyContent = YGNodeStyleGetJustifyContent

local function YGNodeStyleSetAlignContent(node: YGNode, alignContent: YGAlign)
    if node:getStyle().alignContent ~= alignContent then
        local style: YGStyle = node:getStyle()
        style.alignContent = alignContent
        node:setStyle(style)
        node:markDirtyAndPropogate()
    end
end
exports.YGNodeStyleSetAlignContent = YGNodeStyleSetAlignContent

local function YGNodeStyleGetAlignContent(node: YGNode): YGAlign
    return node:getStyle().alignContent
end
exports.YGNodeStyleGetAlignContent = YGNodeStyleGetAlignContent

local function YGNodeStyleSetAlignItems(node: YGNode, alignItems: YGAlign)
    if node:getStyle().alignItems ~= alignItems then
        local style: YGStyle = node:getStyle()
        style.alignItems = alignItems
        node:setStyle(style)
        node:markDirtyAndPropogate()
    end
end
exports.YGNodeStyleSetAlignItems = YGNodeStyleSetAlignItems

local function YGNodeStyleGetAlignItems(node: YGNode): YGAlign
    return node:getStyle().alignItems
end
exports.YGNodeStyleGetAlignItems = YGNodeStyleGetAlignItems

local function YGNodeStyleSetAlignSelf(node: YGNode, alignSelf: YGAlign)
    if node:getStyle().alignSelf ~= alignSelf then
        local style: YGStyle = node:getStyle()
        style.alignSelf = alignSelf
        node:setStyle(style)
        node:markDirtyAndPropogate()
    end
end
exports.YGNodeStyleSetAlignSelf = YGNodeStyleSetAlignSelf

local function YGNodeStyleGetAlignSelf(node: YGNode): YGAlign
    return node:getStyle().alignSelf
end
exports.YGNodeStyleGetAlignSelf = YGNodeStyleGetAlignSelf

local function YGNodeStyleSetPositionType(node: YGNode, positionType: YGPositionType)
    if node:getStyle().positionType ~= positionType then
        local style: YGStyle = node:getStyle()
        style.positionType = positionType
        node:setStyle(style)
        node:markDirtyAndPropogate()
    end
end
exports.YGNodeStyleSetPositionType = YGNodeStyleSetPositionType

local function YGNodeStyleGetPositionType(node: YGNode): YGPositionType
    return node:getStyle().positionType
end
exports.YGNodeStyleGetPositionType = YGNodeStyleGetPositionType

local function YGNodeStyleSetFlexWrap(node: YGNode, flexWrap: YGWrap)
    if node:getStyle().flexWrap ~= flexWrap then
        local style: YGStyle = node:getStyle()
        style.flexWrap = flexWrap
        node:setStyle(style)
        node:markDirtyAndPropogate()
    end
end
exports.YGNodeStyleSetFlexWrap = YGNodeStyleSetFlexWrap

local function YGNodeStyleGetFlexWrap(node: YGNode): YGWrap
    return node:getStyle().flexWrap
end
exports.YGNodeStyleGetFlexWrap = YGNodeStyleGetFlexWrap

local function YGNodeStyleSetOverflow(node: YGNode, overflow: YGOverflow)
    if node:getStyle().overflow ~= overflow then
        local style: YGStyle = node:getStyle()
        style.overflow = overflow
        node:setStyle(style)
        node:markDirtyAndPropogate()
    end
end
exports.YGNodeStyleSetOverflow = YGNodeStyleSetOverflow

local function YGNodeStyleGetOverflow(node: YGNode): YGOverflow
    return node:getStyle().overflow
end
exports.YGNodeStyleGetOverflow = YGNodeStyleGetOverflow

local function YGNodeStyleSetDisplay(node: YGNode, display: YGDisplay)
    if node:getStyle().display ~= display then
        local style: YGStyle = node:getStyle()
        style.display = display
        node:setStyle(style)
        node:markDirtyAndPropogate()
    end
end
exports.YGNodeStyleSetDisplay = YGNodeStyleSetDisplay

local function YGNodeStyleGetDisplay(node: YGNode): YGDisplay
    return node:getStyle().display
end
exports.YGNodeStyleGetDisplay = YGNodeStyleGetDisplay

local function YGNodeStyleSetPosition(node: YGNode, edge: YGEdge, position: number)
    local value: YGValue =
        YGValue.new(YGFloatSanitize(position), if YGFloatIsUndefined(position) then YGUnit.Undefined else YGUnit.Point)

    if
        (node:getStyle().position[edge].value ~= value.value and value.unit ~= YGUnit.Undefined)
        or node:getStyle().position[edge].unit ~= value.unit
    then
        local style: YGStyle = node:getStyle()
        style.position[edge] = value
        node:setStyle(style)
        node:markDirtyAndPropogate()
    end
end
exports.YGNodeStyleSetPosition = YGNodeStyleSetPosition

local function YGNodeStyleSetPositionPercent(node: YGNode, edge: YGEdge, position: number)
    local value: YGValue = YGValue.new(
        YGFloatSanitize(position),
        if YGFloatIsUndefined(position) then YGUnit.Undefined else YGUnit.Percent
    )

    if
        (node:getStyle().position[edge].value ~= value.value and value.unit ~= YGUnit.Undefined)
        or node:getStyle().position[edge].unit ~= value.unit
    then
        local style: YGStyle = node:getStyle()
        style.position[edge] = value
        node:setStyle(style)
        node:markDirtyAndPropogate()
    end
end
exports.YGNodeStyleSetPositionPercent = YGNodeStyleSetPositionPercent

local function YGNodeStyleGetPosition(node: YGNode, edge: YGEdge): YGValue
    local value: YGValue = node:getStyle().position[edge]
    if value.unit == YGUnit.Undefined or value.unit == YGUnit.Auto then
        value.value = YGUndefined
    end

    return value
end
exports.YGNodeStyleGetPosition = YGNodeStyleGetPosition

local function YGNodeStyleSetMargin(node: YGNode, edge: YGEdge, margin: number)
    local value: YGValue =
        YGValue.new(YGFloatSanitize(margin), if YGFloatIsUndefined(margin) then YGUnit.Undefined else YGUnit.Point)

    if
        (node:getStyle().margin[edge].value ~= value.value and value.unit ~= YGUnit.Undefined)
        or node:getStyle().margin[edge].unit ~= value.unit
    then
        local style: YGStyle = node:getStyle()
        style.margin[edge] = value
        node:setStyle(style)
        node:markDirtyAndPropogate()
    end
end
exports.YGNodeStyleSetMargin = YGNodeStyleSetMargin

local function YGNodeStyleSetMarginPercent(node: YGNode, edge: YGEdge, margin: number)
    local value: YGValue =
        YGValue.new(YGFloatSanitize(margin), if YGFloatIsUndefined(margin) then YGUnit.Undefined else YGUnit.Percent)

    if
        (node:getStyle().margin[edge].value ~= value.value and value.unit ~= YGUnit.Undefined)
        or node:getStyle().margin[edge].unit ~= value.unit
    then
        local style: YGStyle = node:getStyle()
        style.margin[edge] = value
        node:setStyle(style)
        node:markDirtyAndPropogate()
    end
end
exports.YGNodeStyleSetMarginPercent = YGNodeStyleSetMarginPercent

local function YGNodeStyleGetMargin(node: YGNode, edge: YGEdge): YGValue
    local value: YGValue = node:getStyle().margin[edge]
    if value.unit == YGUnit.Undefined or value.unit == YGUnit.Auto then
        value.value = YGUndefined
    end

    return value
end
exports.YGNodeStyleGetMargin = YGNodeStyleGetMargin

local function YGNodeStyleSetPadding(node: YGNode, edge: YGEdge, padding: number)
    local value: YGValue =
        YGValue.new(YGFloatSanitize(padding), if YGFloatIsUndefined(padding) then YGUnit.Undefined else YGUnit.Point)

    if
        (node:getStyle().padding[edge].value ~= value.value and value.unit ~= YGUnit.Undefined)
        or node:getStyle().padding[edge].unit ~= value.unit
    then
        local style: YGStyle = node:getStyle()
        style.padding[edge] = value
        node:setStyle(style)
        node:markDirtyAndPropogate()
    end
end
exports.YGNodeStyleSetPadding = YGNodeStyleSetPadding

local function YGNodeStyleSetPaddingPercent(node: YGNode, edge: YGEdge, padding: number)
    local value: YGValue =
        YGValue.new(YGFloatSanitize(padding), if YGFloatIsUndefined(padding) then YGUnit.Undefined else YGUnit.Percent)

    if
        (node:getStyle().padding[edge].value ~= value.value and value.unit ~= YGUnit.Undefined)
        or node:getStyle().padding[edge].unit ~= value.unit
    then
        local style: YGStyle = node:getStyle()
        style.padding[edge] = value
        node:setStyle(style)
        node:markDirtyAndPropogate()
    end
end
exports.YGNodeStyleSetPaddingPercent = YGNodeStyleSetPaddingPercent

local function YGNodeStyleGetPadding(node: YGNode, edge: YGEdge): YGValue
    local value: YGValue = node:getStyle().padding[edge]
    if value.unit == YGUnit.Undefined or value.unit == YGUnit.Auto then
        value.value = YGUndefined
    end

    return value
end
exports.YGNodeStyleGetPadding = YGNodeStyleGetPadding

local function YGNodeStyleSetMarginAuto(node: YGNode, edge: YGEdge)
    if node:getStyle().margin[edge].unit ~= YGUnit.Auto then
        local style: YGStyle = node:getStyle()
        style.margin[edge].value = 0
        style.margin[edge].unit = YGUnit.Auto
        node:setStyle(style)
        node:markDirtyAndPropogate()
    end
end
exports.YGNodeStyleSetMarginAuto = YGNodeStyleSetMarginAuto

local function YGNodeStyleSetWidth(node: YGNode, width: number)
    local value: YGValue =
        YGValue.new(YGFloatSanitize(width), if YGFloatIsUndefined(width) then YGUnit.Undefined else YGUnit.Point)

    if
        (node:getStyle().dimensions[YGDimension.Width].value ~= value.value and value.unit ~= YGUnit.Undefined)
        or node:getStyle().dimensions[YGDimension.Width].unit ~= value.unit
    then
        local style: YGStyle = node:getStyle()
        style.dimensions[YGDimension.Width] = value
        node:setStyle(style)
        node:markDirtyAndPropogate()
    end
end
exports.YGNodeStyleSetWidth = YGNodeStyleSetWidth

local function YGNodeStyleSetWidthPercent(node: YGNode, width: number)
    if
        node:getStyle().dimensions[YGDimension.Width].value ~= YGFloatSanitize(width)
        or node:getStyle().dimensions[YGDimension.Width].unit ~= YGUnit.Percent
    then
        local style: YGStyle = node:getStyle()
        style.dimensions[YGDimension.Width].value = YGFloatSanitize(width)
        style.dimensions[YGDimension.Width].unit = if YGFloatIsUndefined(width) then YGUnit.Auto else YGUnit.Percent
        node:setStyle(style)
        node:markDirtyAndPropogate()
    end
end
exports.YGNodeStyleSetWidthPercent = YGNodeStyleSetWidthPercent

local function YGNodeStyleSetWidthAuto(node: YGNode)
    if node:getStyle().dimensions[YGDimension.Width].unit ~= YGUnit.Auto then
        local style: YGStyle = node:getStyle()
        style.dimensions[YGDimension.Width].value = 0
        style.dimensions[YGDimension.Width].unit = YGUnit.Auto
        node:setStyle(style)
        node:markDirtyAndPropogate()
    end
end
exports.YGNodeStyleSetWidthAuto = YGNodeStyleSetWidthAuto

local function YGNodeStyleGetWidth(node: YGNode): YGValue
    local value: YGValue = node:getStyle().dimensions[YGDimension.Width]
    if value.unit == YGUnit.Undefined or value.unit == YGUnit.Auto then
        value.value = YGUndefined
    end
    return value
end
exports.YGNodeStyleGetWidth = YGNodeStyleGetWidth

local function YGNodeStyleSetHeight(node: YGNode, height: number)
    local value: YGValue =
        YGValue.new(YGFloatSanitize(height), if YGFloatIsUndefined(height) then YGUnit.Undefined else YGUnit.Point)

    if
        (node:getStyle().dimensions[YGDimension.Height].value ~= value.value and value.unit ~= YGUnit.Undefined)
        or node:getStyle().dimensions[YGDimension.Height].unit ~= value.unit
    then
        local style: YGStyle = node:getStyle()
        style.dimensions[YGDimension.Height] = value
        node:setStyle(style)
        node:markDirtyAndPropogate()
    end
end
exports.YGNodeStyleSetHeight = YGNodeStyleSetHeight

local function YGNodeStyleSetHeightPercent(node: YGNode, height: number)
    if
        node:getStyle().dimensions[YGDimension.Height].value ~= YGFloatSanitize(height)
        or node:getStyle().dimensions[YGDimension.Height].unit ~= YGUnit.Percent
    then
        local style: YGStyle = node:getStyle()
        style.dimensions[YGDimension.Height].value = YGFloatSanitize(height)
        style.dimensions[YGDimension.Height].unit = if YGFloatIsUndefined(height) then YGUnit.Auto else YGUnit.Percent
        node:setStyle(style)
        node:markDirtyAndPropogate()
    end
end
exports.YGNodeStyleSetHeightPercent = YGNodeStyleSetHeightPercent

local function YGNodeStyleSetHeightAuto(node: YGNode)
    if node:getStyle().dimensions[YGDimension.Height].unit ~= YGUnit.Auto then
        local style: YGStyle = node:getStyle()
        style.dimensions[YGDimension.Height].value = 0
        style.dimensions[YGDimension.Height].unit = YGUnit.Auto
        node:setStyle(style)
        node:markDirtyAndPropogate()
    end
end
exports.YGNodeStyleSetHeightAuto = YGNodeStyleSetHeightAuto

local function YGNodeStyleGetHeight(node: YGNode): YGValue
    local value: YGValue = node:getStyle().dimensions[YGDimension.Height]
    if value.unit == YGUnit.Undefined or value.unit == YGUnit.Auto then
        value.value = YGUndefined
    end
    return value
end
exports.YGNodeStyleGetHeight = YGNodeStyleGetHeight

local function YGNodeStyleSetMinWidth(node: YGNode, minWidth: number)
    local value: YGValue =
        YGValue.new(YGFloatSanitize(minWidth), if YGFloatIsUndefined(minWidth) then YGUnit.Undefined else YGUnit.Point)

    if
        (node:getStyle().minDimensions[YGDimension.Width].value ~= value.value and value.unit ~= YGUnit.Undefined)
        or node:getStyle().minDimensions[YGDimension.Width].unit ~= value.unit
    then
        local style: YGStyle = node:getStyle()
        style.minDimensions[YGDimension.Width] = value
        node:setStyle(style)
        node:markDirtyAndPropogate()
    end
end
exports.YGNodeStyleSetMinWidth = YGNodeStyleSetMinWidth

local function YGNodeStyleSetMinWidthPercent(node: YGNode, minWidth: number)
    local value: YGValue = YGValue.new(
        YGFloatSanitize(minWidth),
        if YGFloatIsUndefined(minWidth) then YGUnit.Undefined else YGUnit.Percent
    )

    if
        (node:getStyle().minDimensions[YGDimension.Width].value ~= value.value and value.unit ~= YGUnit.Undefined)
        or node:getStyle().minDimensions[YGDimension.Width].unit ~= value.unit
    then
        local style: YGStyle = node:getStyle()
        style.minDimensions[YGDimension.Width] = value
        node:setStyle(style)
        node:markDirtyAndPropogate()
    end
end
exports.YGNodeStyleSetMinWidthPercent = YGNodeStyleSetMinWidthPercent

local function YGNodeStyleGetMinWidth(node: YGNode): YGValue
    local value: YGValue = node:getStyle().minDimensions[YGDimension.Width]
    if value.unit == YGUnit.Undefined or value.unit == YGUnit.Auto then
        value.value = YGUndefined
    end
    return value
end
exports.YGNodeStyleGetMinWidth = YGNodeStyleGetMinWidth

local function YGNodeStyleSetMinHeight(node: YGNode, minHeight: number)
    local value: YGValue = YGValue.new(
        YGFloatSanitize(minHeight),
        if YGFloatIsUndefined(minHeight) then YGUnit.Undefined else YGUnit.Point
    )

    if
        (node:getStyle().minDimensions[YGDimension.Height].value ~= value.value and value.unit ~= YGUnit.Undefined)
        or node:getStyle().minDimensions[YGDimension.Height].unit ~= value.unit
    then
        local style: YGStyle = node:getStyle()
        style.minDimensions[YGDimension.Height] = value
        node:setStyle(style)
        node:markDirtyAndPropogate()
    end
end
exports.YGNodeStyleSetMinHeight = YGNodeStyleSetMinHeight

local function YGNodeStyleSetMinHeightPercent(node: YGNode, minHeight: number)
    local value: YGValue = YGValue.new(
        YGFloatSanitize(minHeight),
        if YGFloatIsUndefined(minHeight) then YGUnit.Undefined else YGUnit.Percent
    )

    if
        (node:getStyle().minDimensions[YGDimension.Height].value ~= value.value and value.unit ~= YGUnit.Undefined)
        or node:getStyle().minDimensions[YGDimension.Height].unit ~= value.unit
    then
        local style: YGStyle = node:getStyle()
        style.minDimensions[YGDimension.Height] = value
        node:setStyle(style)
        node:markDirtyAndPropogate()
    end
end
exports.YGNodeStyleSetMinHeightPercent = YGNodeStyleSetMinHeightPercent

local function YGNodeStyleGetMinHeight(node: YGNode): YGValue
    local value: YGValue = node:getStyle().minDimensions[YGDimension.Height]
    if value.unit == YGUnit.Undefined or value.unit == YGUnit.Auto then
        value.value = YGUndefined
    end
    return value
end
exports.YGNodeStyleGetMinHeight = YGNodeStyleGetMinHeight

local function YGNodeStyleSetMaxWidth(node: YGNode, maxWidth: number)
    local value: YGValue =
        YGValue.new(YGFloatSanitize(maxWidth), if YGFloatIsUndefined(maxWidth) then YGUnit.Undefined else YGUnit.Point)

    if
        (node:getStyle().maxDimensions[YGDimension.Width].value ~= value.value and value.unit ~= YGUnit.Undefined)
        or node:getStyle().maxDimensions[YGDimension.Width].unit ~= value.unit
    then
        local style: YGStyle = node:getStyle()
        style.maxDimensions[YGDimension.Width] = value
        node:setStyle(style)
        node:markDirtyAndPropogate()
    end
end
exports.YGNodeStyleSetMaxWidth = YGNodeStyleSetMaxWidth

local function YGNodeStyleSetMaxWidthPercent(node: YGNode, maxWidth: number)
    local value: YGValue = YGValue.new(
        YGFloatSanitize(maxWidth),
        if YGFloatIsUndefined(maxWidth) then YGUnit.Undefined else YGUnit.Percent
    )

    if
        (node:getStyle().maxDimensions[YGDimension.Width].value ~= value.value and value.unit ~= YGUnit.Undefined)
        or node:getStyle().maxDimensions[YGDimension.Width].unit ~= value.unit
    then
        local style: YGStyle = node:getStyle()
        style.maxDimensions[YGDimension.Width] = value
        node:setStyle(style)
        node:markDirtyAndPropogate()
    end
end
exports.YGNodeStyleSetMaxWidthPercent = YGNodeStyleSetMaxWidthPercent

local function YGNodeStyleGetMaxWidth(node: YGNode): YGValue
    local value: YGValue = node:getStyle().maxDimensions[YGDimension.Width]
    if value.unit == YGUnit.Undefined or value.unit == YGUnit.Auto then
        value.value = YGUndefined
    end
    return value
end
exports.YGNodeStyleGetMaxWidth = YGNodeStyleGetMaxWidth

local function YGNodeStyleSetMaxHeight(node: YGNode, maxHeight: number)
    local value: YGValue = YGValue.new(
        YGFloatSanitize(maxHeight),
        if YGFloatIsUndefined(maxHeight) then YGUnit.Undefined else YGUnit.Point
    )

    if
        (node:getStyle().maxDimensions[YGDimension.Height].value ~= value.value and value.unit ~= YGUnit.Undefined)
        or node:getStyle().maxDimensions[YGDimension.Height].unit ~= value.unit
    then
        local style: YGStyle = node:getStyle()
        style.maxDimensions[YGDimension.Height] = value
        node:setStyle(style)
        node:markDirtyAndPropogate()
    end
end
exports.YGNodeStyleSetMaxHeight = YGNodeStyleSetMaxHeight

local function YGNodeStyleSetMaxHeightPercent(node: YGNode, maxHeight: number)
    local value: YGValue = YGValue.new(
        YGFloatSanitize(maxHeight),
        if YGFloatIsUndefined(maxHeight) then YGUnit.Undefined else YGUnit.Percent
    )

    if
        (node:getStyle().maxDimensions[YGDimension.Height].value ~= value.value and value.unit ~= YGUnit.Undefined)
        or node:getStyle().maxDimensions[YGDimension.Height].unit ~= value.unit
    then
        local style: YGStyle = node:getStyle()
        style.maxDimensions[YGDimension.Height] = value
        node:setStyle(style)
        node:markDirtyAndPropogate()
    end
end
exports.YGNodeStyleSetMaxHeightPercent = YGNodeStyleSetMaxHeightPercent

local function YGNodeStyleGetMaxHeight(node: YGNode): YGValue
    local value: YGValue = node:getStyle().maxDimensions[YGDimension.Height]
    if value.unit == YGUnit.Undefined or value.unit == YGUnit.Auto then
        value.value = YGUndefined
    end
    return value
end
exports.YGNodeStyleGetMaxHeight = YGNodeStyleGetMaxHeight

local function YGNodeLayoutGetLeft(node: YGNode): number
    return node:getLayout().position[YGEdge.Left]
end
exports.YGNodeLayoutGetLeft = YGNodeLayoutGetLeft

local function YGNodeLayoutGetTop(node: YGNode): number
    return node:getLayout().position[YGEdge.Top]
end
exports.YGNodeLayoutGetTop = YGNodeLayoutGetTop

local function YGNodeLayoutGetRight(node: YGNode): number
    return node:getLayout().position[YGEdge.Right]
end
exports.YGNodeLayoutGetRight = YGNodeLayoutGetRight

local function YGNodeLayoutGetBottom(node: YGNode): number
    return node:getLayout().position[YGEdge.Bottom]
end
exports.YGNodeLayoutGetBottom = YGNodeLayoutGetBottom

local function YGNodeLayoutGetWidth(node: YGNode): number
    return node:getLayout().dimensions[YGDimension.Width]
end
exports.YGNodeLayoutGetWidth = YGNodeLayoutGetWidth

local function YGNodeLayoutGetHeight(node: YGNode): number
    return node:getLayout().dimensions[YGDimension.Height]
end
exports.YGNodeLayoutGetHeight = YGNodeLayoutGetHeight

local function YGNodeLayoutGetDirection(node: YGNode): YGDirection
    return node:getLayout().direction
end
exports.YGNodeLayoutGetDirection = YGNodeLayoutGetDirection

local function YGNodeLayoutGetHadOverflow(node: YGNode): boolean
    return node:getLayout().hadOverflow
end
exports.YGNodeLayoutGetHadOverflow = YGNodeLayoutGetHadOverflow

local function YGNodeLayoutGetMargin(node: YGNode, edge: YGEdge): number
    -- YGAssertWithNode(node, edge <= YGEdge.End, "Cannot get layout properties of multi-edge shorthands")

    if edge == YGEdge.Start then
        if node:getLayout().direction == YGDirection.RTL then
            return node:getLayout().margin[YGEdge.Right]
        else
            return node:getLayout().margin[YGEdge.Left]
        end
    end

    if edge == YGEdge.End then
        if node:getLayout().direction == YGDirection.RTL then
            return node:getLayout().margin[YGEdge.Left]
        else
            return node:getLayout().margin[YGEdge.Right]
        end
    end

    return node:getLayout().margin[edge]
end
exports.YGNodeLayoutGetMargin = YGNodeLayoutGetMargin

local function YGNodeLayoutGetBorder(node: YGNode, edge: YGEdge): number
    -- YGAssertWithNode(node, edge <= YGEdge.End, "Cannot get layout properties of multi-edge shorthands")

    if edge == YGEdge.Start then
        if node:getLayout().direction == YGDirection.RTL then
            return node:getLayout().border[YGEdge.Right]
        else
            return node:getLayout().border[YGEdge.Left]
        end
    end

    if edge == YGEdge.End then
        if node:getLayout().direction == YGDirection.RTL then
            return node:getLayout().border[YGEdge.Left]
        else
            return node:getLayout().border[YGEdge.Right]
        end
    end

    return node:getLayout().border[edge]
end
exports.YGNodeLayoutGetBorder = YGNodeLayoutGetBorder

local function YGNodeLayoutGetPadding(node: YGNode, edge: YGEdge): number
    -- YGAssertWithNode(node, edge <= YGEdge.End, "Cannot get layout properties of multi-edge shorthands")

    if edge == YGEdge.Start then
        if node:getLayout().direction == YGDirection.RTL then
            return node:getLayout().padding[YGEdge.Right]
        else
            return node:getLayout().padding[YGEdge.Left]
        end
    end

    if edge == YGEdge.End then
        if node:getLayout().direction == YGDirection.RTL then
            return node:getLayout().padding[YGEdge.Left]
        else
            return node:getLayout().padding[YGEdge.Right]
        end
    end

    return node:getLayout().padding[edge]
end
exports.YGNodeLayoutGetPadding = YGNodeLayoutGetPadding

return exports
