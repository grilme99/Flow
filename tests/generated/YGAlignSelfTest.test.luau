-- @Generated by gentest/browser/gentest.js from gentest/fixtures/YGAlignSelfTest.html

--!strict

local ReplicatedStorage = game:GetService("ReplicatedStorage")

local Packages = ReplicatedStorage.Packages
local Flow = require(Packages.Flow)

do
    print("align_self_center")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setWidth(100)
    root:setHeight(100)

    local root_child0 = Flow.Node.new(config)
    root_child0:setAlignSelf(Flow.Align.Center)
    root_child0:setWidth(10)
    root_child0:setHeight(10)
    root:insertChild(root_child0, 1)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(45 == root_child0:getComputedLeft(), "45 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(10 == root_child0:getComputedWidth(), "10 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(10 == root_child0:getComputedHeight(), "10 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(45 == root_child0:getComputedLeft(), "45 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(10 == root_child0:getComputedWidth(), "10 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(10 == root_child0:getComputedHeight(), "10 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("align_self_flex_end")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setWidth(100)
    root:setHeight(100)

    local root_child0 = Flow.Node.new(config)
    root_child0:setAlignSelf(Flow.Align.FlexEnd)
    root_child0:setWidth(10)
    root_child0:setHeight(10)
    root:insertChild(root_child0, 1)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(90 == root_child0:getComputedLeft(), "90 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(10 == root_child0:getComputedWidth(), "10 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(10 == root_child0:getComputedHeight(), "10 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(10 == root_child0:getComputedWidth(), "10 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(10 == root_child0:getComputedHeight(), "10 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("align_self_flex_start")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setWidth(100)
    root:setHeight(100)

    local root_child0 = Flow.Node.new(config)
    root_child0:setAlignSelf(Flow.Align.FlexStart)
    root_child0:setWidth(10)
    root_child0:setHeight(10)
    root:insertChild(root_child0, 1)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(10 == root_child0:getComputedWidth(), "10 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(10 == root_child0:getComputedHeight(), "10 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(90 == root_child0:getComputedLeft(), "90 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(10 == root_child0:getComputedWidth(), "10 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(10 == root_child0:getComputedHeight(), "10 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("align_self_flex_end_override_flex_start")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setAlignItems(Flow.Align.FlexStart)
    root:setWidth(100)
    root:setHeight(100)

    local root_child0 = Flow.Node.new(config)
    root_child0:setAlignSelf(Flow.Align.FlexEnd)
    root_child0:setWidth(10)
    root_child0:setHeight(10)
    root:insertChild(root_child0, 1)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(90 == root_child0:getComputedLeft(), "90 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(10 == root_child0:getComputedWidth(), "10 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(10 == root_child0:getComputedHeight(), "10 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(10 == root_child0:getComputedWidth(), "10 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(10 == root_child0:getComputedHeight(), "10 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("align_self_baseline")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setFlexDirection(Flow.FlexDirection.Row)
    root:setWidth(100)
    root:setHeight(100)

    local root_child0 = Flow.Node.new(config)
    root_child0:setAlignSelf(Flow.Align.Baseline)
    root_child0:setWidth(50)
    root_child0:setHeight(50)
    root:insertChild(root_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setAlignSelf(Flow.Align.Baseline)
    root_child1:setWidth(50)
    root_child1:setHeight(20)
    root:insertChild(root_child1, 2)

    local root_child1_child0 = Flow.Node.new(config)
    root_child1_child0:setWidth(50)
    root_child1_child0:setHeight(10)
    root_child1:insertChild(root_child1_child0, 1)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(50 == root_child0:getComputedWidth(), "50 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(50 == root_child0:getComputedHeight(), "50 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(50 == root_child1:getComputedLeft(), "50 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(40 == root_child1:getComputedTop(), "40 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(50 == root_child1:getComputedWidth(), "50 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(20 == root_child1:getComputedHeight(), "20 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(0 == root_child1_child0:getComputedLeft(), "0 == root_child1_child0:getComputedLeft() (" .. root_child1_child0:getComputedLeft() .. ")");
    assert(0 == root_child1_child0:getComputedTop(), "0 == root_child1_child0:getComputedTop() (" .. root_child1_child0:getComputedTop() .. ")");
    assert(50 == root_child1_child0:getComputedWidth(), "50 == root_child1_child0:getComputedWidth() (" .. root_child1_child0:getComputedWidth() .. ")");
    assert(10 == root_child1_child0:getComputedHeight(), "10 == root_child1_child0:getComputedHeight() (" .. root_child1_child0:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(50 == root_child0:getComputedLeft(), "50 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(50 == root_child0:getComputedWidth(), "50 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(50 == root_child0:getComputedHeight(), "50 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child1:getComputedLeft(), "0 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(40 == root_child1:getComputedTop(), "40 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(50 == root_child1:getComputedWidth(), "50 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(20 == root_child1:getComputedHeight(), "20 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(0 == root_child1_child0:getComputedLeft(), "0 == root_child1_child0:getComputedLeft() (" .. root_child1_child0:getComputedLeft() .. ")");
    assert(0 == root_child1_child0:getComputedTop(), "0 == root_child1_child0:getComputedTop() (" .. root_child1_child0:getComputedTop() .. ")");
    assert(50 == root_child1_child0:getComputedWidth(), "50 == root_child1_child0:getComputedWidth() (" .. root_child1_child0:getComputedWidth() .. ")");
    assert(10 == root_child1_child0:getComputedHeight(), "10 == root_child1_child0:getComputedHeight() (" .. root_child1_child0:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end

return nil
