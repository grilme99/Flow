-- @Generated by gentest/browser/gentest.js from gentest/fixtures/YGFlexWrapTest.html

--!strict

local ReplicatedStorage = game:GetService("ReplicatedStorage")

local Packages = ReplicatedStorage.Packages
local Flow = require(Packages.Flow)

do
    print("wrap_column")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setFlexWrap(Flow.Wrap.Wrap)
    root:setHeight(100)

    local root_child0 = Flow.Node.new(config)
    root_child0:setWidth(30)
    root_child0:setHeight(30)
    root:insertChild(root_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setWidth(30)
    root_child1:setHeight(30)
    root:insertChild(root_child1, 2)

    local root_child2 = Flow.Node.new(config)
    root_child2:setWidth(30)
    root_child2:setHeight(30)
    root:insertChild(root_child2, 3)

    local root_child3 = Flow.Node.new(config)
    root_child3:setWidth(30)
    root_child3:setHeight(30)
    root:insertChild(root_child3, 4)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(60 == root:getComputedWidth(), "60 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(30 == root_child0:getComputedWidth(), "30 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(30 == root_child0:getComputedHeight(), "30 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child1:getComputedLeft(), "0 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(30 == root_child1:getComputedTop(), "30 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(30 == root_child1:getComputedWidth(), "30 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(30 == root_child1:getComputedHeight(), "30 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(0 == root_child2:getComputedLeft(), "0 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(60 == root_child2:getComputedTop(), "60 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(30 == root_child2:getComputedWidth(), "30 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(30 == root_child2:getComputedHeight(), "30 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    assert(30 == root_child3:getComputedLeft(), "30 == root_child3:getComputedLeft() (" .. root_child3:getComputedLeft() .. ")");
    assert(0 == root_child3:getComputedTop(), "0 == root_child3:getComputedTop() (" .. root_child3:getComputedTop() .. ")");
    assert(30 == root_child3:getComputedWidth(), "30 == root_child3:getComputedWidth() (" .. root_child3:getComputedWidth() .. ")");
    assert(30 == root_child3:getComputedHeight(), "30 == root_child3:getComputedHeight() (" .. root_child3:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(60 == root:getComputedWidth(), "60 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(30 == root_child0:getComputedLeft(), "30 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(30 == root_child0:getComputedWidth(), "30 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(30 == root_child0:getComputedHeight(), "30 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(30 == root_child1:getComputedLeft(), "30 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(30 == root_child1:getComputedTop(), "30 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(30 == root_child1:getComputedWidth(), "30 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(30 == root_child1:getComputedHeight(), "30 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(30 == root_child2:getComputedLeft(), "30 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(60 == root_child2:getComputedTop(), "60 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(30 == root_child2:getComputedWidth(), "30 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(30 == root_child2:getComputedHeight(), "30 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    assert(0 == root_child3:getComputedLeft(), "0 == root_child3:getComputedLeft() (" .. root_child3:getComputedLeft() .. ")");
    assert(0 == root_child3:getComputedTop(), "0 == root_child3:getComputedTop() (" .. root_child3:getComputedTop() .. ")");
    assert(30 == root_child3:getComputedWidth(), "30 == root_child3:getComputedWidth() (" .. root_child3:getComputedWidth() .. ")");
    assert(30 == root_child3:getComputedHeight(), "30 == root_child3:getComputedHeight() (" .. root_child3:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("wrap_row")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setFlexDirection(Flow.FlexDirection.Row)
    root:setFlexWrap(Flow.Wrap.Wrap)
    root:setWidth(100)

    local root_child0 = Flow.Node.new(config)
    root_child0:setWidth(30)
    root_child0:setHeight(30)
    root:insertChild(root_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setWidth(30)
    root_child1:setHeight(30)
    root:insertChild(root_child1, 2)

    local root_child2 = Flow.Node.new(config)
    root_child2:setWidth(30)
    root_child2:setHeight(30)
    root:insertChild(root_child2, 3)

    local root_child3 = Flow.Node.new(config)
    root_child3:setWidth(30)
    root_child3:setHeight(30)
    root:insertChild(root_child3, 4)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(60 == root:getComputedHeight(), "60 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(30 == root_child0:getComputedWidth(), "30 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(30 == root_child0:getComputedHeight(), "30 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(30 == root_child1:getComputedLeft(), "30 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(0 == root_child1:getComputedTop(), "0 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(30 == root_child1:getComputedWidth(), "30 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(30 == root_child1:getComputedHeight(), "30 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(60 == root_child2:getComputedLeft(), "60 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(0 == root_child2:getComputedTop(), "0 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(30 == root_child2:getComputedWidth(), "30 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(30 == root_child2:getComputedHeight(), "30 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    assert(0 == root_child3:getComputedLeft(), "0 == root_child3:getComputedLeft() (" .. root_child3:getComputedLeft() .. ")");
    assert(30 == root_child3:getComputedTop(), "30 == root_child3:getComputedTop() (" .. root_child3:getComputedTop() .. ")");
    assert(30 == root_child3:getComputedWidth(), "30 == root_child3:getComputedWidth() (" .. root_child3:getComputedWidth() .. ")");
    assert(30 == root_child3:getComputedHeight(), "30 == root_child3:getComputedHeight() (" .. root_child3:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(60 == root:getComputedHeight(), "60 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(70 == root_child0:getComputedLeft(), "70 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(30 == root_child0:getComputedWidth(), "30 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(30 == root_child0:getComputedHeight(), "30 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(40 == root_child1:getComputedLeft(), "40 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(0 == root_child1:getComputedTop(), "0 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(30 == root_child1:getComputedWidth(), "30 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(30 == root_child1:getComputedHeight(), "30 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(10 == root_child2:getComputedLeft(), "10 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(0 == root_child2:getComputedTop(), "0 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(30 == root_child2:getComputedWidth(), "30 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(30 == root_child2:getComputedHeight(), "30 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    assert(70 == root_child3:getComputedLeft(), "70 == root_child3:getComputedLeft() (" .. root_child3:getComputedLeft() .. ")");
    assert(30 == root_child3:getComputedTop(), "30 == root_child3:getComputedTop() (" .. root_child3:getComputedTop() .. ")");
    assert(30 == root_child3:getComputedWidth(), "30 == root_child3:getComputedWidth() (" .. root_child3:getComputedWidth() .. ")");
    assert(30 == root_child3:getComputedHeight(), "30 == root_child3:getComputedHeight() (" .. root_child3:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("wrap_row_align_items_flex_end")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setFlexDirection(Flow.FlexDirection.Row)
    root:setAlignItems(Flow.Align.FlexEnd)
    root:setFlexWrap(Flow.Wrap.Wrap)
    root:setWidth(100)

    local root_child0 = Flow.Node.new(config)
    root_child0:setWidth(30)
    root_child0:setHeight(10)
    root:insertChild(root_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setWidth(30)
    root_child1:setHeight(20)
    root:insertChild(root_child1, 2)

    local root_child2 = Flow.Node.new(config)
    root_child2:setWidth(30)
    root_child2:setHeight(30)
    root:insertChild(root_child2, 3)

    local root_child3 = Flow.Node.new(config)
    root_child3:setWidth(30)
    root_child3:setHeight(30)
    root:insertChild(root_child3, 4)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(60 == root:getComputedHeight(), "60 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(20 == root_child0:getComputedTop(), "20 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(30 == root_child0:getComputedWidth(), "30 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(10 == root_child0:getComputedHeight(), "10 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(30 == root_child1:getComputedLeft(), "30 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(10 == root_child1:getComputedTop(), "10 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(30 == root_child1:getComputedWidth(), "30 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(20 == root_child1:getComputedHeight(), "20 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(60 == root_child2:getComputedLeft(), "60 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(0 == root_child2:getComputedTop(), "0 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(30 == root_child2:getComputedWidth(), "30 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(30 == root_child2:getComputedHeight(), "30 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    assert(0 == root_child3:getComputedLeft(), "0 == root_child3:getComputedLeft() (" .. root_child3:getComputedLeft() .. ")");
    assert(30 == root_child3:getComputedTop(), "30 == root_child3:getComputedTop() (" .. root_child3:getComputedTop() .. ")");
    assert(30 == root_child3:getComputedWidth(), "30 == root_child3:getComputedWidth() (" .. root_child3:getComputedWidth() .. ")");
    assert(30 == root_child3:getComputedHeight(), "30 == root_child3:getComputedHeight() (" .. root_child3:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(60 == root:getComputedHeight(), "60 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(70 == root_child0:getComputedLeft(), "70 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(20 == root_child0:getComputedTop(), "20 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(30 == root_child0:getComputedWidth(), "30 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(10 == root_child0:getComputedHeight(), "10 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(40 == root_child1:getComputedLeft(), "40 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(10 == root_child1:getComputedTop(), "10 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(30 == root_child1:getComputedWidth(), "30 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(20 == root_child1:getComputedHeight(), "20 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(10 == root_child2:getComputedLeft(), "10 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(0 == root_child2:getComputedTop(), "0 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(30 == root_child2:getComputedWidth(), "30 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(30 == root_child2:getComputedHeight(), "30 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    assert(70 == root_child3:getComputedLeft(), "70 == root_child3:getComputedLeft() (" .. root_child3:getComputedLeft() .. ")");
    assert(30 == root_child3:getComputedTop(), "30 == root_child3:getComputedTop() (" .. root_child3:getComputedTop() .. ")");
    assert(30 == root_child3:getComputedWidth(), "30 == root_child3:getComputedWidth() (" .. root_child3:getComputedWidth() .. ")");
    assert(30 == root_child3:getComputedHeight(), "30 == root_child3:getComputedHeight() (" .. root_child3:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("wrap_row_align_items_center")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setFlexDirection(Flow.FlexDirection.Row)
    root:setAlignItems(Flow.Align.Center)
    root:setFlexWrap(Flow.Wrap.Wrap)
    root:setWidth(100)

    local root_child0 = Flow.Node.new(config)
    root_child0:setWidth(30)
    root_child0:setHeight(10)
    root:insertChild(root_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setWidth(30)
    root_child1:setHeight(20)
    root:insertChild(root_child1, 2)

    local root_child2 = Flow.Node.new(config)
    root_child2:setWidth(30)
    root_child2:setHeight(30)
    root:insertChild(root_child2, 3)

    local root_child3 = Flow.Node.new(config)
    root_child3:setWidth(30)
    root_child3:setHeight(30)
    root:insertChild(root_child3, 4)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(60 == root:getComputedHeight(), "60 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(10 == root_child0:getComputedTop(), "10 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(30 == root_child0:getComputedWidth(), "30 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(10 == root_child0:getComputedHeight(), "10 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(30 == root_child1:getComputedLeft(), "30 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(5 == root_child1:getComputedTop(), "5 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(30 == root_child1:getComputedWidth(), "30 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(20 == root_child1:getComputedHeight(), "20 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(60 == root_child2:getComputedLeft(), "60 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(0 == root_child2:getComputedTop(), "0 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(30 == root_child2:getComputedWidth(), "30 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(30 == root_child2:getComputedHeight(), "30 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    assert(0 == root_child3:getComputedLeft(), "0 == root_child3:getComputedLeft() (" .. root_child3:getComputedLeft() .. ")");
    assert(30 == root_child3:getComputedTop(), "30 == root_child3:getComputedTop() (" .. root_child3:getComputedTop() .. ")");
    assert(30 == root_child3:getComputedWidth(), "30 == root_child3:getComputedWidth() (" .. root_child3:getComputedWidth() .. ")");
    assert(30 == root_child3:getComputedHeight(), "30 == root_child3:getComputedHeight() (" .. root_child3:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(60 == root:getComputedHeight(), "60 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(70 == root_child0:getComputedLeft(), "70 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(10 == root_child0:getComputedTop(), "10 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(30 == root_child0:getComputedWidth(), "30 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(10 == root_child0:getComputedHeight(), "10 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(40 == root_child1:getComputedLeft(), "40 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(5 == root_child1:getComputedTop(), "5 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(30 == root_child1:getComputedWidth(), "30 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(20 == root_child1:getComputedHeight(), "20 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(10 == root_child2:getComputedLeft(), "10 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(0 == root_child2:getComputedTop(), "0 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(30 == root_child2:getComputedWidth(), "30 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(30 == root_child2:getComputedHeight(), "30 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    assert(70 == root_child3:getComputedLeft(), "70 == root_child3:getComputedLeft() (" .. root_child3:getComputedLeft() .. ")");
    assert(30 == root_child3:getComputedTop(), "30 == root_child3:getComputedTop() (" .. root_child3:getComputedTop() .. ")");
    assert(30 == root_child3:getComputedWidth(), "30 == root_child3:getComputedWidth() (" .. root_child3:getComputedWidth() .. ")");
    assert(30 == root_child3:getComputedHeight(), "30 == root_child3:getComputedHeight() (" .. root_child3:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("flex_wrap_children_with_min_main_overriding_flex_basis")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setFlexDirection(Flow.FlexDirection.Row)
    root:setFlexWrap(Flow.Wrap.Wrap)
    root:setWidth(100)

    local root_child0 = Flow.Node.new(config)
    root_child0:setFlexBasis(50)
    root_child0:setMinWidth(55)
    root_child0:setHeight(50)
    root:insertChild(root_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setFlexBasis(50)
    root_child1:setMinWidth(55)
    root_child1:setHeight(50)
    root:insertChild(root_child1, 2)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(55 == root_child0:getComputedWidth(), "55 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(50 == root_child0:getComputedHeight(), "50 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child1:getComputedLeft(), "0 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(50 == root_child1:getComputedTop(), "50 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(55 == root_child1:getComputedWidth(), "55 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(50 == root_child1:getComputedHeight(), "50 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(45 == root_child0:getComputedLeft(), "45 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(55 == root_child0:getComputedWidth(), "55 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(50 == root_child0:getComputedHeight(), "50 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(45 == root_child1:getComputedLeft(), "45 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(50 == root_child1:getComputedTop(), "50 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(55 == root_child1:getComputedWidth(), "55 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(50 == root_child1:getComputedHeight(), "50 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("flex_wrap_wrap_to_child_height")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)

    local root_child0 = Flow.Node.new(config)
    root_child0:setFlexDirection(Flow.FlexDirection.Row)
    root_child0:setAlignItems(Flow.Align.FlexStart)
    root_child0:setFlexWrap(Flow.Wrap.Wrap)
    root:insertChild(root_child0, 1)

    local root_child0_child0 = Flow.Node.new(config)
    root_child0_child0:setWidth(100)
    root_child0:insertChild(root_child0_child0, 1)

    local root_child0_child0_child0 = Flow.Node.new(config)
    root_child0_child0_child0:setWidth(100)
    root_child0_child0_child0:setHeight(100)
    root_child0_child0:insertChild(root_child0_child0_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setWidth(100)
    root_child1:setHeight(100)
    root:insertChild(root_child1, 2)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(200 == root:getComputedHeight(), "200 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(100 == root_child0:getComputedWidth(), "100 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(100 == root_child0:getComputedHeight(), "100 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child0_child0:getComputedLeft(), "0 == root_child0_child0:getComputedLeft() (" .. root_child0_child0:getComputedLeft() .. ")");
    assert(0 == root_child0_child0:getComputedTop(), "0 == root_child0_child0:getComputedTop() (" .. root_child0_child0:getComputedTop() .. ")");
    assert(100 == root_child0_child0:getComputedWidth(), "100 == root_child0_child0:getComputedWidth() (" .. root_child0_child0:getComputedWidth() .. ")");
    assert(100 == root_child0_child0:getComputedHeight(), "100 == root_child0_child0:getComputedHeight() (" .. root_child0_child0:getComputedHeight() .. ")");

    assert(0 == root_child0_child0_child0:getComputedLeft(), "0 == root_child0_child0_child0:getComputedLeft() (" .. root_child0_child0_child0:getComputedLeft() .. ")");
    assert(0 == root_child0_child0_child0:getComputedTop(), "0 == root_child0_child0_child0:getComputedTop() (" .. root_child0_child0_child0:getComputedTop() .. ")");
    assert(100 == root_child0_child0_child0:getComputedWidth(), "100 == root_child0_child0_child0:getComputedWidth() (" .. root_child0_child0_child0:getComputedWidth() .. ")");
    assert(100 == root_child0_child0_child0:getComputedHeight(), "100 == root_child0_child0_child0:getComputedHeight() (" .. root_child0_child0_child0:getComputedHeight() .. ")");

    assert(0 == root_child1:getComputedLeft(), "0 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(100 == root_child1:getComputedTop(), "100 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(100 == root_child1:getComputedWidth(), "100 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(100 == root_child1:getComputedHeight(), "100 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(200 == root:getComputedHeight(), "200 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(100 == root_child0:getComputedWidth(), "100 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(100 == root_child0:getComputedHeight(), "100 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child0_child0:getComputedLeft(), "0 == root_child0_child0:getComputedLeft() (" .. root_child0_child0:getComputedLeft() .. ")");
    assert(0 == root_child0_child0:getComputedTop(), "0 == root_child0_child0:getComputedTop() (" .. root_child0_child0:getComputedTop() .. ")");
    assert(100 == root_child0_child0:getComputedWidth(), "100 == root_child0_child0:getComputedWidth() (" .. root_child0_child0:getComputedWidth() .. ")");
    assert(100 == root_child0_child0:getComputedHeight(), "100 == root_child0_child0:getComputedHeight() (" .. root_child0_child0:getComputedHeight() .. ")");

    assert(0 == root_child0_child0_child0:getComputedLeft(), "0 == root_child0_child0_child0:getComputedLeft() (" .. root_child0_child0_child0:getComputedLeft() .. ")");
    assert(0 == root_child0_child0_child0:getComputedTop(), "0 == root_child0_child0_child0:getComputedTop() (" .. root_child0_child0_child0:getComputedTop() .. ")");
    assert(100 == root_child0_child0_child0:getComputedWidth(), "100 == root_child0_child0_child0:getComputedWidth() (" .. root_child0_child0_child0:getComputedWidth() .. ")");
    assert(100 == root_child0_child0_child0:getComputedHeight(), "100 == root_child0_child0_child0:getComputedHeight() (" .. root_child0_child0_child0:getComputedHeight() .. ")");

    assert(0 == root_child1:getComputedLeft(), "0 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(100 == root_child1:getComputedTop(), "100 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(100 == root_child1:getComputedWidth(), "100 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(100 == root_child1:getComputedHeight(), "100 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("flex_wrap_align_stretch_fits_one_row")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setFlexDirection(Flow.FlexDirection.Row)
    root:setFlexWrap(Flow.Wrap.Wrap)
    root:setWidth(150)
    root:setHeight(100)

    local root_child0 = Flow.Node.new(config)
    root_child0:setWidth(50)
    root:insertChild(root_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setWidth(50)
    root:insertChild(root_child1, 2)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(150 == root:getComputedWidth(), "150 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(50 == root_child0:getComputedWidth(), "50 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(0 == root_child0:getComputedHeight(), "0 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(50 == root_child1:getComputedLeft(), "50 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(0 == root_child1:getComputedTop(), "0 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(50 == root_child1:getComputedWidth(), "50 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(0 == root_child1:getComputedHeight(), "0 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(150 == root:getComputedWidth(), "150 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(100 == root_child0:getComputedLeft(), "100 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(50 == root_child0:getComputedWidth(), "50 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(0 == root_child0:getComputedHeight(), "0 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(50 == root_child1:getComputedLeft(), "50 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(0 == root_child1:getComputedTop(), "0 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(50 == root_child1:getComputedWidth(), "50 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(0 == root_child1:getComputedHeight(), "0 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("wrap_reverse_row_align_content_flex_start")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setFlexDirection(Flow.FlexDirection.Row)
    root:setFlexWrap(Flow.Wrap.WrapReverse)
    root:setWidth(100)

    local root_child0 = Flow.Node.new(config)
    root_child0:setWidth(30)
    root_child0:setHeight(10)
    root:insertChild(root_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setWidth(30)
    root_child1:setHeight(20)
    root:insertChild(root_child1, 2)

    local root_child2 = Flow.Node.new(config)
    root_child2:setWidth(30)
    root_child2:setHeight(30)
    root:insertChild(root_child2, 3)

    local root_child3 = Flow.Node.new(config)
    root_child3:setWidth(30)
    root_child3:setHeight(40)
    root:insertChild(root_child3, 4)

    local root_child4 = Flow.Node.new(config)
    root_child4:setWidth(30)
    root_child4:setHeight(50)
    root:insertChild(root_child4, 5)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(80 == root:getComputedHeight(), "80 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(70 == root_child0:getComputedTop(), "70 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(30 == root_child0:getComputedWidth(), "30 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(10 == root_child0:getComputedHeight(), "10 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(30 == root_child1:getComputedLeft(), "30 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(60 == root_child1:getComputedTop(), "60 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(30 == root_child1:getComputedWidth(), "30 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(20 == root_child1:getComputedHeight(), "20 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(60 == root_child2:getComputedLeft(), "60 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(50 == root_child2:getComputedTop(), "50 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(30 == root_child2:getComputedWidth(), "30 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(30 == root_child2:getComputedHeight(), "30 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    assert(0 == root_child3:getComputedLeft(), "0 == root_child3:getComputedLeft() (" .. root_child3:getComputedLeft() .. ")");
    assert(10 == root_child3:getComputedTop(), "10 == root_child3:getComputedTop() (" .. root_child3:getComputedTop() .. ")");
    assert(30 == root_child3:getComputedWidth(), "30 == root_child3:getComputedWidth() (" .. root_child3:getComputedWidth() .. ")");
    assert(40 == root_child3:getComputedHeight(), "40 == root_child3:getComputedHeight() (" .. root_child3:getComputedHeight() .. ")");

    assert(30 == root_child4:getComputedLeft(), "30 == root_child4:getComputedLeft() (" .. root_child4:getComputedLeft() .. ")");
    assert(0 == root_child4:getComputedTop(), "0 == root_child4:getComputedTop() (" .. root_child4:getComputedTop() .. ")");
    assert(30 == root_child4:getComputedWidth(), "30 == root_child4:getComputedWidth() (" .. root_child4:getComputedWidth() .. ")");
    assert(50 == root_child4:getComputedHeight(), "50 == root_child4:getComputedHeight() (" .. root_child4:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(80 == root:getComputedHeight(), "80 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(70 == root_child0:getComputedLeft(), "70 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(70 == root_child0:getComputedTop(), "70 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(30 == root_child0:getComputedWidth(), "30 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(10 == root_child0:getComputedHeight(), "10 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(40 == root_child1:getComputedLeft(), "40 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(60 == root_child1:getComputedTop(), "60 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(30 == root_child1:getComputedWidth(), "30 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(20 == root_child1:getComputedHeight(), "20 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(10 == root_child2:getComputedLeft(), "10 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(50 == root_child2:getComputedTop(), "50 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(30 == root_child2:getComputedWidth(), "30 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(30 == root_child2:getComputedHeight(), "30 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    assert(70 == root_child3:getComputedLeft(), "70 == root_child3:getComputedLeft() (" .. root_child3:getComputedLeft() .. ")");
    assert(10 == root_child3:getComputedTop(), "10 == root_child3:getComputedTop() (" .. root_child3:getComputedTop() .. ")");
    assert(30 == root_child3:getComputedWidth(), "30 == root_child3:getComputedWidth() (" .. root_child3:getComputedWidth() .. ")");
    assert(40 == root_child3:getComputedHeight(), "40 == root_child3:getComputedHeight() (" .. root_child3:getComputedHeight() .. ")");

    assert(40 == root_child4:getComputedLeft(), "40 == root_child4:getComputedLeft() (" .. root_child4:getComputedLeft() .. ")");
    assert(0 == root_child4:getComputedTop(), "0 == root_child4:getComputedTop() (" .. root_child4:getComputedTop() .. ")");
    assert(30 == root_child4:getComputedWidth(), "30 == root_child4:getComputedWidth() (" .. root_child4:getComputedWidth() .. ")");
    assert(50 == root_child4:getComputedHeight(), "50 == root_child4:getComputedHeight() (" .. root_child4:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("wrap_reverse_row_align_content_center")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setFlexDirection(Flow.FlexDirection.Row)
    root:setAlignContent(Flow.Align.Center)
    root:setFlexWrap(Flow.Wrap.WrapReverse)
    root:setWidth(100)

    local root_child0 = Flow.Node.new(config)
    root_child0:setWidth(30)
    root_child0:setHeight(10)
    root:insertChild(root_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setWidth(30)
    root_child1:setHeight(20)
    root:insertChild(root_child1, 2)

    local root_child2 = Flow.Node.new(config)
    root_child2:setWidth(30)
    root_child2:setHeight(30)
    root:insertChild(root_child2, 3)

    local root_child3 = Flow.Node.new(config)
    root_child3:setWidth(30)
    root_child3:setHeight(40)
    root:insertChild(root_child3, 4)

    local root_child4 = Flow.Node.new(config)
    root_child4:setWidth(30)
    root_child4:setHeight(50)
    root:insertChild(root_child4, 5)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(80 == root:getComputedHeight(), "80 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(70 == root_child0:getComputedTop(), "70 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(30 == root_child0:getComputedWidth(), "30 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(10 == root_child0:getComputedHeight(), "10 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(30 == root_child1:getComputedLeft(), "30 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(60 == root_child1:getComputedTop(), "60 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(30 == root_child1:getComputedWidth(), "30 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(20 == root_child1:getComputedHeight(), "20 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(60 == root_child2:getComputedLeft(), "60 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(50 == root_child2:getComputedTop(), "50 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(30 == root_child2:getComputedWidth(), "30 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(30 == root_child2:getComputedHeight(), "30 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    assert(0 == root_child3:getComputedLeft(), "0 == root_child3:getComputedLeft() (" .. root_child3:getComputedLeft() .. ")");
    assert(10 == root_child3:getComputedTop(), "10 == root_child3:getComputedTop() (" .. root_child3:getComputedTop() .. ")");
    assert(30 == root_child3:getComputedWidth(), "30 == root_child3:getComputedWidth() (" .. root_child3:getComputedWidth() .. ")");
    assert(40 == root_child3:getComputedHeight(), "40 == root_child3:getComputedHeight() (" .. root_child3:getComputedHeight() .. ")");

    assert(30 == root_child4:getComputedLeft(), "30 == root_child4:getComputedLeft() (" .. root_child4:getComputedLeft() .. ")");
    assert(0 == root_child4:getComputedTop(), "0 == root_child4:getComputedTop() (" .. root_child4:getComputedTop() .. ")");
    assert(30 == root_child4:getComputedWidth(), "30 == root_child4:getComputedWidth() (" .. root_child4:getComputedWidth() .. ")");
    assert(50 == root_child4:getComputedHeight(), "50 == root_child4:getComputedHeight() (" .. root_child4:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(80 == root:getComputedHeight(), "80 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(70 == root_child0:getComputedLeft(), "70 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(70 == root_child0:getComputedTop(), "70 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(30 == root_child0:getComputedWidth(), "30 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(10 == root_child0:getComputedHeight(), "10 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(40 == root_child1:getComputedLeft(), "40 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(60 == root_child1:getComputedTop(), "60 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(30 == root_child1:getComputedWidth(), "30 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(20 == root_child1:getComputedHeight(), "20 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(10 == root_child2:getComputedLeft(), "10 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(50 == root_child2:getComputedTop(), "50 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(30 == root_child2:getComputedWidth(), "30 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(30 == root_child2:getComputedHeight(), "30 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    assert(70 == root_child3:getComputedLeft(), "70 == root_child3:getComputedLeft() (" .. root_child3:getComputedLeft() .. ")");
    assert(10 == root_child3:getComputedTop(), "10 == root_child3:getComputedTop() (" .. root_child3:getComputedTop() .. ")");
    assert(30 == root_child3:getComputedWidth(), "30 == root_child3:getComputedWidth() (" .. root_child3:getComputedWidth() .. ")");
    assert(40 == root_child3:getComputedHeight(), "40 == root_child3:getComputedHeight() (" .. root_child3:getComputedHeight() .. ")");

    assert(40 == root_child4:getComputedLeft(), "40 == root_child4:getComputedLeft() (" .. root_child4:getComputedLeft() .. ")");
    assert(0 == root_child4:getComputedTop(), "0 == root_child4:getComputedTop() (" .. root_child4:getComputedTop() .. ")");
    assert(30 == root_child4:getComputedWidth(), "30 == root_child4:getComputedWidth() (" .. root_child4:getComputedWidth() .. ")");
    assert(50 == root_child4:getComputedHeight(), "50 == root_child4:getComputedHeight() (" .. root_child4:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("wrap_reverse_row_single_line_different_size")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setFlexDirection(Flow.FlexDirection.Row)
    root:setFlexWrap(Flow.Wrap.WrapReverse)
    root:setWidth(300)

    local root_child0 = Flow.Node.new(config)
    root_child0:setWidth(30)
    root_child0:setHeight(10)
    root:insertChild(root_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setWidth(30)
    root_child1:setHeight(20)
    root:insertChild(root_child1, 2)

    local root_child2 = Flow.Node.new(config)
    root_child2:setWidth(30)
    root_child2:setHeight(30)
    root:insertChild(root_child2, 3)

    local root_child3 = Flow.Node.new(config)
    root_child3:setWidth(30)
    root_child3:setHeight(40)
    root:insertChild(root_child3, 4)

    local root_child4 = Flow.Node.new(config)
    root_child4:setWidth(30)
    root_child4:setHeight(50)
    root:insertChild(root_child4, 5)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(300 == root:getComputedWidth(), "300 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(50 == root:getComputedHeight(), "50 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(40 == root_child0:getComputedTop(), "40 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(30 == root_child0:getComputedWidth(), "30 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(10 == root_child0:getComputedHeight(), "10 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(30 == root_child1:getComputedLeft(), "30 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(30 == root_child1:getComputedTop(), "30 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(30 == root_child1:getComputedWidth(), "30 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(20 == root_child1:getComputedHeight(), "20 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(60 == root_child2:getComputedLeft(), "60 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(20 == root_child2:getComputedTop(), "20 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(30 == root_child2:getComputedWidth(), "30 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(30 == root_child2:getComputedHeight(), "30 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    assert(90 == root_child3:getComputedLeft(), "90 == root_child3:getComputedLeft() (" .. root_child3:getComputedLeft() .. ")");
    assert(10 == root_child3:getComputedTop(), "10 == root_child3:getComputedTop() (" .. root_child3:getComputedTop() .. ")");
    assert(30 == root_child3:getComputedWidth(), "30 == root_child3:getComputedWidth() (" .. root_child3:getComputedWidth() .. ")");
    assert(40 == root_child3:getComputedHeight(), "40 == root_child3:getComputedHeight() (" .. root_child3:getComputedHeight() .. ")");

    assert(120 == root_child4:getComputedLeft(), "120 == root_child4:getComputedLeft() (" .. root_child4:getComputedLeft() .. ")");
    assert(0 == root_child4:getComputedTop(), "0 == root_child4:getComputedTop() (" .. root_child4:getComputedTop() .. ")");
    assert(30 == root_child4:getComputedWidth(), "30 == root_child4:getComputedWidth() (" .. root_child4:getComputedWidth() .. ")");
    assert(50 == root_child4:getComputedHeight(), "50 == root_child4:getComputedHeight() (" .. root_child4:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(300 == root:getComputedWidth(), "300 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(50 == root:getComputedHeight(), "50 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(270 == root_child0:getComputedLeft(), "270 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(40 == root_child0:getComputedTop(), "40 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(30 == root_child0:getComputedWidth(), "30 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(10 == root_child0:getComputedHeight(), "10 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(240 == root_child1:getComputedLeft(), "240 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(30 == root_child1:getComputedTop(), "30 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(30 == root_child1:getComputedWidth(), "30 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(20 == root_child1:getComputedHeight(), "20 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(210 == root_child2:getComputedLeft(), "210 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(20 == root_child2:getComputedTop(), "20 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(30 == root_child2:getComputedWidth(), "30 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(30 == root_child2:getComputedHeight(), "30 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    assert(180 == root_child3:getComputedLeft(), "180 == root_child3:getComputedLeft() (" .. root_child3:getComputedLeft() .. ")");
    assert(10 == root_child3:getComputedTop(), "10 == root_child3:getComputedTop() (" .. root_child3:getComputedTop() .. ")");
    assert(30 == root_child3:getComputedWidth(), "30 == root_child3:getComputedWidth() (" .. root_child3:getComputedWidth() .. ")");
    assert(40 == root_child3:getComputedHeight(), "40 == root_child3:getComputedHeight() (" .. root_child3:getComputedHeight() .. ")");

    assert(150 == root_child4:getComputedLeft(), "150 == root_child4:getComputedLeft() (" .. root_child4:getComputedLeft() .. ")");
    assert(0 == root_child4:getComputedTop(), "0 == root_child4:getComputedTop() (" .. root_child4:getComputedTop() .. ")");
    assert(30 == root_child4:getComputedWidth(), "30 == root_child4:getComputedWidth() (" .. root_child4:getComputedWidth() .. ")");
    assert(50 == root_child4:getComputedHeight(), "50 == root_child4:getComputedHeight() (" .. root_child4:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("wrap_reverse_row_align_content_stretch")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setFlexDirection(Flow.FlexDirection.Row)
    root:setAlignContent(Flow.Align.Stretch)
    root:setFlexWrap(Flow.Wrap.WrapReverse)
    root:setWidth(100)

    local root_child0 = Flow.Node.new(config)
    root_child0:setWidth(30)
    root_child0:setHeight(10)
    root:insertChild(root_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setWidth(30)
    root_child1:setHeight(20)
    root:insertChild(root_child1, 2)

    local root_child2 = Flow.Node.new(config)
    root_child2:setWidth(30)
    root_child2:setHeight(30)
    root:insertChild(root_child2, 3)

    local root_child3 = Flow.Node.new(config)
    root_child3:setWidth(30)
    root_child3:setHeight(40)
    root:insertChild(root_child3, 4)

    local root_child4 = Flow.Node.new(config)
    root_child4:setWidth(30)
    root_child4:setHeight(50)
    root:insertChild(root_child4, 5)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(80 == root:getComputedHeight(), "80 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(70 == root_child0:getComputedTop(), "70 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(30 == root_child0:getComputedWidth(), "30 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(10 == root_child0:getComputedHeight(), "10 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(30 == root_child1:getComputedLeft(), "30 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(60 == root_child1:getComputedTop(), "60 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(30 == root_child1:getComputedWidth(), "30 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(20 == root_child1:getComputedHeight(), "20 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(60 == root_child2:getComputedLeft(), "60 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(50 == root_child2:getComputedTop(), "50 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(30 == root_child2:getComputedWidth(), "30 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(30 == root_child2:getComputedHeight(), "30 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    assert(0 == root_child3:getComputedLeft(), "0 == root_child3:getComputedLeft() (" .. root_child3:getComputedLeft() .. ")");
    assert(10 == root_child3:getComputedTop(), "10 == root_child3:getComputedTop() (" .. root_child3:getComputedTop() .. ")");
    assert(30 == root_child3:getComputedWidth(), "30 == root_child3:getComputedWidth() (" .. root_child3:getComputedWidth() .. ")");
    assert(40 == root_child3:getComputedHeight(), "40 == root_child3:getComputedHeight() (" .. root_child3:getComputedHeight() .. ")");

    assert(30 == root_child4:getComputedLeft(), "30 == root_child4:getComputedLeft() (" .. root_child4:getComputedLeft() .. ")");
    assert(0 == root_child4:getComputedTop(), "0 == root_child4:getComputedTop() (" .. root_child4:getComputedTop() .. ")");
    assert(30 == root_child4:getComputedWidth(), "30 == root_child4:getComputedWidth() (" .. root_child4:getComputedWidth() .. ")");
    assert(50 == root_child4:getComputedHeight(), "50 == root_child4:getComputedHeight() (" .. root_child4:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(80 == root:getComputedHeight(), "80 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(70 == root_child0:getComputedLeft(), "70 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(70 == root_child0:getComputedTop(), "70 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(30 == root_child0:getComputedWidth(), "30 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(10 == root_child0:getComputedHeight(), "10 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(40 == root_child1:getComputedLeft(), "40 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(60 == root_child1:getComputedTop(), "60 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(30 == root_child1:getComputedWidth(), "30 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(20 == root_child1:getComputedHeight(), "20 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(10 == root_child2:getComputedLeft(), "10 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(50 == root_child2:getComputedTop(), "50 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(30 == root_child2:getComputedWidth(), "30 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(30 == root_child2:getComputedHeight(), "30 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    assert(70 == root_child3:getComputedLeft(), "70 == root_child3:getComputedLeft() (" .. root_child3:getComputedLeft() .. ")");
    assert(10 == root_child3:getComputedTop(), "10 == root_child3:getComputedTop() (" .. root_child3:getComputedTop() .. ")");
    assert(30 == root_child3:getComputedWidth(), "30 == root_child3:getComputedWidth() (" .. root_child3:getComputedWidth() .. ")");
    assert(40 == root_child3:getComputedHeight(), "40 == root_child3:getComputedHeight() (" .. root_child3:getComputedHeight() .. ")");

    assert(40 == root_child4:getComputedLeft(), "40 == root_child4:getComputedLeft() (" .. root_child4:getComputedLeft() .. ")");
    assert(0 == root_child4:getComputedTop(), "0 == root_child4:getComputedTop() (" .. root_child4:getComputedTop() .. ")");
    assert(30 == root_child4:getComputedWidth(), "30 == root_child4:getComputedWidth() (" .. root_child4:getComputedWidth() .. ")");
    assert(50 == root_child4:getComputedHeight(), "50 == root_child4:getComputedHeight() (" .. root_child4:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("wrap_reverse_row_align_content_space_around")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setFlexDirection(Flow.FlexDirection.Row)
    root:setAlignContent(Flow.Align.SpaceAround)
    root:setFlexWrap(Flow.Wrap.WrapReverse)
    root:setWidth(100)

    local root_child0 = Flow.Node.new(config)
    root_child0:setWidth(30)
    root_child0:setHeight(10)
    root:insertChild(root_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setWidth(30)
    root_child1:setHeight(20)
    root:insertChild(root_child1, 2)

    local root_child2 = Flow.Node.new(config)
    root_child2:setWidth(30)
    root_child2:setHeight(30)
    root:insertChild(root_child2, 3)

    local root_child3 = Flow.Node.new(config)
    root_child3:setWidth(30)
    root_child3:setHeight(40)
    root:insertChild(root_child3, 4)

    local root_child4 = Flow.Node.new(config)
    root_child4:setWidth(30)
    root_child4:setHeight(50)
    root:insertChild(root_child4, 5)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(80 == root:getComputedHeight(), "80 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(70 == root_child0:getComputedTop(), "70 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(30 == root_child0:getComputedWidth(), "30 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(10 == root_child0:getComputedHeight(), "10 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(30 == root_child1:getComputedLeft(), "30 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(60 == root_child1:getComputedTop(), "60 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(30 == root_child1:getComputedWidth(), "30 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(20 == root_child1:getComputedHeight(), "20 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(60 == root_child2:getComputedLeft(), "60 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(50 == root_child2:getComputedTop(), "50 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(30 == root_child2:getComputedWidth(), "30 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(30 == root_child2:getComputedHeight(), "30 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    assert(0 == root_child3:getComputedLeft(), "0 == root_child3:getComputedLeft() (" .. root_child3:getComputedLeft() .. ")");
    assert(10 == root_child3:getComputedTop(), "10 == root_child3:getComputedTop() (" .. root_child3:getComputedTop() .. ")");
    assert(30 == root_child3:getComputedWidth(), "30 == root_child3:getComputedWidth() (" .. root_child3:getComputedWidth() .. ")");
    assert(40 == root_child3:getComputedHeight(), "40 == root_child3:getComputedHeight() (" .. root_child3:getComputedHeight() .. ")");

    assert(30 == root_child4:getComputedLeft(), "30 == root_child4:getComputedLeft() (" .. root_child4:getComputedLeft() .. ")");
    assert(0 == root_child4:getComputedTop(), "0 == root_child4:getComputedTop() (" .. root_child4:getComputedTop() .. ")");
    assert(30 == root_child4:getComputedWidth(), "30 == root_child4:getComputedWidth() (" .. root_child4:getComputedWidth() .. ")");
    assert(50 == root_child4:getComputedHeight(), "50 == root_child4:getComputedHeight() (" .. root_child4:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(80 == root:getComputedHeight(), "80 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(70 == root_child0:getComputedLeft(), "70 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(70 == root_child0:getComputedTop(), "70 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(30 == root_child0:getComputedWidth(), "30 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(10 == root_child0:getComputedHeight(), "10 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(40 == root_child1:getComputedLeft(), "40 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(60 == root_child1:getComputedTop(), "60 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(30 == root_child1:getComputedWidth(), "30 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(20 == root_child1:getComputedHeight(), "20 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(10 == root_child2:getComputedLeft(), "10 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(50 == root_child2:getComputedTop(), "50 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(30 == root_child2:getComputedWidth(), "30 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(30 == root_child2:getComputedHeight(), "30 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    assert(70 == root_child3:getComputedLeft(), "70 == root_child3:getComputedLeft() (" .. root_child3:getComputedLeft() .. ")");
    assert(10 == root_child3:getComputedTop(), "10 == root_child3:getComputedTop() (" .. root_child3:getComputedTop() .. ")");
    assert(30 == root_child3:getComputedWidth(), "30 == root_child3:getComputedWidth() (" .. root_child3:getComputedWidth() .. ")");
    assert(40 == root_child3:getComputedHeight(), "40 == root_child3:getComputedHeight() (" .. root_child3:getComputedHeight() .. ")");

    assert(40 == root_child4:getComputedLeft(), "40 == root_child4:getComputedLeft() (" .. root_child4:getComputedLeft() .. ")");
    assert(0 == root_child4:getComputedTop(), "0 == root_child4:getComputedTop() (" .. root_child4:getComputedTop() .. ")");
    assert(30 == root_child4:getComputedWidth(), "30 == root_child4:getComputedWidth() (" .. root_child4:getComputedWidth() .. ")");
    assert(50 == root_child4:getComputedHeight(), "50 == root_child4:getComputedHeight() (" .. root_child4:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("wrap_reverse_column_fixed_size")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setAlignItems(Flow.Align.Center)
    root:setFlexWrap(Flow.Wrap.WrapReverse)
    root:setWidth(200)
    root:setHeight(100)

    local root_child0 = Flow.Node.new(config)
    root_child0:setWidth(30)
    root_child0:setHeight(10)
    root:insertChild(root_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setWidth(30)
    root_child1:setHeight(20)
    root:insertChild(root_child1, 2)

    local root_child2 = Flow.Node.new(config)
    root_child2:setWidth(30)
    root_child2:setHeight(30)
    root:insertChild(root_child2, 3)

    local root_child3 = Flow.Node.new(config)
    root_child3:setWidth(30)
    root_child3:setHeight(40)
    root:insertChild(root_child3, 4)

    local root_child4 = Flow.Node.new(config)
    root_child4:setWidth(30)
    root_child4:setHeight(50)
    root:insertChild(root_child4, 5)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(200 == root:getComputedWidth(), "200 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(170 == root_child0:getComputedLeft(), "170 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(30 == root_child0:getComputedWidth(), "30 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(10 == root_child0:getComputedHeight(), "10 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(170 == root_child1:getComputedLeft(), "170 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(10 == root_child1:getComputedTop(), "10 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(30 == root_child1:getComputedWidth(), "30 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(20 == root_child1:getComputedHeight(), "20 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(170 == root_child2:getComputedLeft(), "170 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(30 == root_child2:getComputedTop(), "30 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(30 == root_child2:getComputedWidth(), "30 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(30 == root_child2:getComputedHeight(), "30 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    assert(170 == root_child3:getComputedLeft(), "170 == root_child3:getComputedLeft() (" .. root_child3:getComputedLeft() .. ")");
    assert(60 == root_child3:getComputedTop(), "60 == root_child3:getComputedTop() (" .. root_child3:getComputedTop() .. ")");
    assert(30 == root_child3:getComputedWidth(), "30 == root_child3:getComputedWidth() (" .. root_child3:getComputedWidth() .. ")");
    assert(40 == root_child3:getComputedHeight(), "40 == root_child3:getComputedHeight() (" .. root_child3:getComputedHeight() .. ")");

    assert(140 == root_child4:getComputedLeft(), "140 == root_child4:getComputedLeft() (" .. root_child4:getComputedLeft() .. ")");
    assert(0 == root_child4:getComputedTop(), "0 == root_child4:getComputedTop() (" .. root_child4:getComputedTop() .. ")");
    assert(30 == root_child4:getComputedWidth(), "30 == root_child4:getComputedWidth() (" .. root_child4:getComputedWidth() .. ")");
    assert(50 == root_child4:getComputedHeight(), "50 == root_child4:getComputedHeight() (" .. root_child4:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(200 == root:getComputedWidth(), "200 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(30 == root_child0:getComputedWidth(), "30 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(10 == root_child0:getComputedHeight(), "10 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child1:getComputedLeft(), "0 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(10 == root_child1:getComputedTop(), "10 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(30 == root_child1:getComputedWidth(), "30 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(20 == root_child1:getComputedHeight(), "20 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(0 == root_child2:getComputedLeft(), "0 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(30 == root_child2:getComputedTop(), "30 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(30 == root_child2:getComputedWidth(), "30 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(30 == root_child2:getComputedHeight(), "30 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    assert(0 == root_child3:getComputedLeft(), "0 == root_child3:getComputedLeft() (" .. root_child3:getComputedLeft() .. ")");
    assert(60 == root_child3:getComputedTop(), "60 == root_child3:getComputedTop() (" .. root_child3:getComputedTop() .. ")");
    assert(30 == root_child3:getComputedWidth(), "30 == root_child3:getComputedWidth() (" .. root_child3:getComputedWidth() .. ")");
    assert(40 == root_child3:getComputedHeight(), "40 == root_child3:getComputedHeight() (" .. root_child3:getComputedHeight() .. ")");

    assert(30 == root_child4:getComputedLeft(), "30 == root_child4:getComputedLeft() (" .. root_child4:getComputedLeft() .. ")");
    assert(0 == root_child4:getComputedTop(), "0 == root_child4:getComputedTop() (" .. root_child4:getComputedTop() .. ")");
    assert(30 == root_child4:getComputedWidth(), "30 == root_child4:getComputedWidth() (" .. root_child4:getComputedWidth() .. ")");
    assert(50 == root_child4:getComputedHeight(), "50 == root_child4:getComputedHeight() (" .. root_child4:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("wrapped_row_within_align_items_center")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setAlignItems(Flow.Align.Center)
    root:setWidth(200)
    root:setHeight(200)

    local root_child0 = Flow.Node.new(config)
    root_child0:setFlexDirection(Flow.FlexDirection.Row)
    root_child0:setFlexWrap(Flow.Wrap.Wrap)
    root:insertChild(root_child0, 1)

    local root_child0_child0 = Flow.Node.new(config)
    root_child0_child0:setWidth(150)
    root_child0_child0:setHeight(80)
    root_child0:insertChild(root_child0_child0, 1)

    local root_child0_child1 = Flow.Node.new(config)
    root_child0_child1:setWidth(80)
    root_child0_child1:setHeight(80)
    root_child0:insertChild(root_child0_child1, 2)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(200 == root:getComputedWidth(), "200 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(200 == root:getComputedHeight(), "200 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(200 == root_child0:getComputedWidth(), "200 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(160 == root_child0:getComputedHeight(), "160 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child0_child0:getComputedLeft(), "0 == root_child0_child0:getComputedLeft() (" .. root_child0_child0:getComputedLeft() .. ")");
    assert(0 == root_child0_child0:getComputedTop(), "0 == root_child0_child0:getComputedTop() (" .. root_child0_child0:getComputedTop() .. ")");
    assert(150 == root_child0_child0:getComputedWidth(), "150 == root_child0_child0:getComputedWidth() (" .. root_child0_child0:getComputedWidth() .. ")");
    assert(80 == root_child0_child0:getComputedHeight(), "80 == root_child0_child0:getComputedHeight() (" .. root_child0_child0:getComputedHeight() .. ")");

    assert(0 == root_child0_child1:getComputedLeft(), "0 == root_child0_child1:getComputedLeft() (" .. root_child0_child1:getComputedLeft() .. ")");
    assert(80 == root_child0_child1:getComputedTop(), "80 == root_child0_child1:getComputedTop() (" .. root_child0_child1:getComputedTop() .. ")");
    assert(80 == root_child0_child1:getComputedWidth(), "80 == root_child0_child1:getComputedWidth() (" .. root_child0_child1:getComputedWidth() .. ")");
    assert(80 == root_child0_child1:getComputedHeight(), "80 == root_child0_child1:getComputedHeight() (" .. root_child0_child1:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(200 == root:getComputedWidth(), "200 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(200 == root:getComputedHeight(), "200 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(200 == root_child0:getComputedWidth(), "200 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(160 == root_child0:getComputedHeight(), "160 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(50 == root_child0_child0:getComputedLeft(), "50 == root_child0_child0:getComputedLeft() (" .. root_child0_child0:getComputedLeft() .. ")");
    assert(0 == root_child0_child0:getComputedTop(), "0 == root_child0_child0:getComputedTop() (" .. root_child0_child0:getComputedTop() .. ")");
    assert(150 == root_child0_child0:getComputedWidth(), "150 == root_child0_child0:getComputedWidth() (" .. root_child0_child0:getComputedWidth() .. ")");
    assert(80 == root_child0_child0:getComputedHeight(), "80 == root_child0_child0:getComputedHeight() (" .. root_child0_child0:getComputedHeight() .. ")");

    assert(120 == root_child0_child1:getComputedLeft(), "120 == root_child0_child1:getComputedLeft() (" .. root_child0_child1:getComputedLeft() .. ")");
    assert(80 == root_child0_child1:getComputedTop(), "80 == root_child0_child1:getComputedTop() (" .. root_child0_child1:getComputedTop() .. ")");
    assert(80 == root_child0_child1:getComputedWidth(), "80 == root_child0_child1:getComputedWidth() (" .. root_child0_child1:getComputedWidth() .. ")");
    assert(80 == root_child0_child1:getComputedHeight(), "80 == root_child0_child1:getComputedHeight() (" .. root_child0_child1:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("wrapped_row_within_align_items_flex_start")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setAlignItems(Flow.Align.FlexStart)
    root:setWidth(200)
    root:setHeight(200)

    local root_child0 = Flow.Node.new(config)
    root_child0:setFlexDirection(Flow.FlexDirection.Row)
    root_child0:setFlexWrap(Flow.Wrap.Wrap)
    root:insertChild(root_child0, 1)

    local root_child0_child0 = Flow.Node.new(config)
    root_child0_child0:setWidth(150)
    root_child0_child0:setHeight(80)
    root_child0:insertChild(root_child0_child0, 1)

    local root_child0_child1 = Flow.Node.new(config)
    root_child0_child1:setWidth(80)
    root_child0_child1:setHeight(80)
    root_child0:insertChild(root_child0_child1, 2)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(200 == root:getComputedWidth(), "200 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(200 == root:getComputedHeight(), "200 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(200 == root_child0:getComputedWidth(), "200 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(160 == root_child0:getComputedHeight(), "160 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child0_child0:getComputedLeft(), "0 == root_child0_child0:getComputedLeft() (" .. root_child0_child0:getComputedLeft() .. ")");
    assert(0 == root_child0_child0:getComputedTop(), "0 == root_child0_child0:getComputedTop() (" .. root_child0_child0:getComputedTop() .. ")");
    assert(150 == root_child0_child0:getComputedWidth(), "150 == root_child0_child0:getComputedWidth() (" .. root_child0_child0:getComputedWidth() .. ")");
    assert(80 == root_child0_child0:getComputedHeight(), "80 == root_child0_child0:getComputedHeight() (" .. root_child0_child0:getComputedHeight() .. ")");

    assert(0 == root_child0_child1:getComputedLeft(), "0 == root_child0_child1:getComputedLeft() (" .. root_child0_child1:getComputedLeft() .. ")");
    assert(80 == root_child0_child1:getComputedTop(), "80 == root_child0_child1:getComputedTop() (" .. root_child0_child1:getComputedTop() .. ")");
    assert(80 == root_child0_child1:getComputedWidth(), "80 == root_child0_child1:getComputedWidth() (" .. root_child0_child1:getComputedWidth() .. ")");
    assert(80 == root_child0_child1:getComputedHeight(), "80 == root_child0_child1:getComputedHeight() (" .. root_child0_child1:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(200 == root:getComputedWidth(), "200 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(200 == root:getComputedHeight(), "200 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(200 == root_child0:getComputedWidth(), "200 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(160 == root_child0:getComputedHeight(), "160 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(50 == root_child0_child0:getComputedLeft(), "50 == root_child0_child0:getComputedLeft() (" .. root_child0_child0:getComputedLeft() .. ")");
    assert(0 == root_child0_child0:getComputedTop(), "0 == root_child0_child0:getComputedTop() (" .. root_child0_child0:getComputedTop() .. ")");
    assert(150 == root_child0_child0:getComputedWidth(), "150 == root_child0_child0:getComputedWidth() (" .. root_child0_child0:getComputedWidth() .. ")");
    assert(80 == root_child0_child0:getComputedHeight(), "80 == root_child0_child0:getComputedHeight() (" .. root_child0_child0:getComputedHeight() .. ")");

    assert(120 == root_child0_child1:getComputedLeft(), "120 == root_child0_child1:getComputedLeft() (" .. root_child0_child1:getComputedLeft() .. ")");
    assert(80 == root_child0_child1:getComputedTop(), "80 == root_child0_child1:getComputedTop() (" .. root_child0_child1:getComputedTop() .. ")");
    assert(80 == root_child0_child1:getComputedWidth(), "80 == root_child0_child1:getComputedWidth() (" .. root_child0_child1:getComputedWidth() .. ")");
    assert(80 == root_child0_child1:getComputedHeight(), "80 == root_child0_child1:getComputedHeight() (" .. root_child0_child1:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("wrapped_row_within_align_items_flex_end")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setAlignItems(Flow.Align.FlexEnd)
    root:setWidth(200)
    root:setHeight(200)

    local root_child0 = Flow.Node.new(config)
    root_child0:setFlexDirection(Flow.FlexDirection.Row)
    root_child0:setFlexWrap(Flow.Wrap.Wrap)
    root:insertChild(root_child0, 1)

    local root_child0_child0 = Flow.Node.new(config)
    root_child0_child0:setWidth(150)
    root_child0_child0:setHeight(80)
    root_child0:insertChild(root_child0_child0, 1)

    local root_child0_child1 = Flow.Node.new(config)
    root_child0_child1:setWidth(80)
    root_child0_child1:setHeight(80)
    root_child0:insertChild(root_child0_child1, 2)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(200 == root:getComputedWidth(), "200 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(200 == root:getComputedHeight(), "200 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(200 == root_child0:getComputedWidth(), "200 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(160 == root_child0:getComputedHeight(), "160 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child0_child0:getComputedLeft(), "0 == root_child0_child0:getComputedLeft() (" .. root_child0_child0:getComputedLeft() .. ")");
    assert(0 == root_child0_child0:getComputedTop(), "0 == root_child0_child0:getComputedTop() (" .. root_child0_child0:getComputedTop() .. ")");
    assert(150 == root_child0_child0:getComputedWidth(), "150 == root_child0_child0:getComputedWidth() (" .. root_child0_child0:getComputedWidth() .. ")");
    assert(80 == root_child0_child0:getComputedHeight(), "80 == root_child0_child0:getComputedHeight() (" .. root_child0_child0:getComputedHeight() .. ")");

    assert(0 == root_child0_child1:getComputedLeft(), "0 == root_child0_child1:getComputedLeft() (" .. root_child0_child1:getComputedLeft() .. ")");
    assert(80 == root_child0_child1:getComputedTop(), "80 == root_child0_child1:getComputedTop() (" .. root_child0_child1:getComputedTop() .. ")");
    assert(80 == root_child0_child1:getComputedWidth(), "80 == root_child0_child1:getComputedWidth() (" .. root_child0_child1:getComputedWidth() .. ")");
    assert(80 == root_child0_child1:getComputedHeight(), "80 == root_child0_child1:getComputedHeight() (" .. root_child0_child1:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(200 == root:getComputedWidth(), "200 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(200 == root:getComputedHeight(), "200 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(200 == root_child0:getComputedWidth(), "200 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(160 == root_child0:getComputedHeight(), "160 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(50 == root_child0_child0:getComputedLeft(), "50 == root_child0_child0:getComputedLeft() (" .. root_child0_child0:getComputedLeft() .. ")");
    assert(0 == root_child0_child0:getComputedTop(), "0 == root_child0_child0:getComputedTop() (" .. root_child0_child0:getComputedTop() .. ")");
    assert(150 == root_child0_child0:getComputedWidth(), "150 == root_child0_child0:getComputedWidth() (" .. root_child0_child0:getComputedWidth() .. ")");
    assert(80 == root_child0_child0:getComputedHeight(), "80 == root_child0_child0:getComputedHeight() (" .. root_child0_child0:getComputedHeight() .. ")");

    assert(120 == root_child0_child1:getComputedLeft(), "120 == root_child0_child1:getComputedLeft() (" .. root_child0_child1:getComputedLeft() .. ")");
    assert(80 == root_child0_child1:getComputedTop(), "80 == root_child0_child1:getComputedTop() (" .. root_child0_child1:getComputedTop() .. ")");
    assert(80 == root_child0_child1:getComputedWidth(), "80 == root_child0_child1:getComputedWidth() (" .. root_child0_child1:getComputedWidth() .. ")");
    assert(80 == root_child0_child1:getComputedHeight(), "80 == root_child0_child1:getComputedHeight() (" .. root_child0_child1:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("wrapped_column_max_height")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setJustifyContent(Flow.Justify.Center)
    root:setAlignContent(Flow.Align.Center)
    root:setAlignItems(Flow.Align.Center)
    root:setFlexWrap(Flow.Wrap.Wrap)
    root:setWidth(700)
    root:setHeight(500)

    local root_child0 = Flow.Node.new(config)
    root_child0:setWidth(100)
    root_child0:setHeight(500)
    root_child0:setMaxHeight(200)
    root:insertChild(root_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setMargin(Flow.Edge.Left, 20)
    root_child1:setMargin(Flow.Edge.Top, 20)
    root_child1:setMargin(Flow.Edge.Right, 20)
    root_child1:setMargin(Flow.Edge.Bottom, 20)
    root_child1:setWidth(200)
    root_child1:setHeight(200)
    root:insertChild(root_child1, 2)

    local root_child2 = Flow.Node.new(config)
    root_child2:setWidth(100)
    root_child2:setHeight(100)
    root:insertChild(root_child2, 3)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(700 == root:getComputedWidth(), "700 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(500 == root:getComputedHeight(), "500 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(250 == root_child0:getComputedLeft(), "250 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(30 == root_child0:getComputedTop(), "30 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(100 == root_child0:getComputedWidth(), "100 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(200 == root_child0:getComputedHeight(), "200 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(200 == root_child1:getComputedLeft(), "200 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(250 == root_child1:getComputedTop(), "250 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(200 == root_child1:getComputedWidth(), "200 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(200 == root_child1:getComputedHeight(), "200 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(420 == root_child2:getComputedLeft(), "420 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(200 == root_child2:getComputedTop(), "200 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(100 == root_child2:getComputedWidth(), "100 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(100 == root_child2:getComputedHeight(), "100 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(700 == root:getComputedWidth(), "700 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(500 == root:getComputedHeight(), "500 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(350 == root_child0:getComputedLeft(), "350 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(30 == root_child0:getComputedTop(), "30 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(100 == root_child0:getComputedWidth(), "100 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(200 == root_child0:getComputedHeight(), "200 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(300 == root_child1:getComputedLeft(), "300 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(250 == root_child1:getComputedTop(), "250 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(200 == root_child1:getComputedWidth(), "200 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(200 == root_child1:getComputedHeight(), "200 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(180 == root_child2:getComputedLeft(), "180 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(200 == root_child2:getComputedTop(), "200 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(100 == root_child2:getComputedWidth(), "100 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(100 == root_child2:getComputedHeight(), "100 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("wrapped_column_max_height_flex")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setJustifyContent(Flow.Justify.Center)
    root:setAlignContent(Flow.Align.Center)
    root:setAlignItems(Flow.Align.Center)
    root:setFlexWrap(Flow.Wrap.Wrap)
    root:setWidth(700)
    root:setHeight(500)

    local root_child0 = Flow.Node.new(config)
    root_child0:setFlexGrow(1)
    root_child0:setFlexShrink(1)
    root_child0:setFlexBasis("0%")
    root_child0:setWidth(100)
    root_child0:setHeight(500)
    root_child0:setMaxHeight(200)
    root:insertChild(root_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setFlexGrow(1)
    root_child1:setFlexShrink(1)
    root_child1:setFlexBasis("0%")
    root_child1:setMargin(Flow.Edge.Left, 20)
    root_child1:setMargin(Flow.Edge.Top, 20)
    root_child1:setMargin(Flow.Edge.Right, 20)
    root_child1:setMargin(Flow.Edge.Bottom, 20)
    root_child1:setWidth(200)
    root_child1:setHeight(200)
    root:insertChild(root_child1, 2)

    local root_child2 = Flow.Node.new(config)
    root_child2:setWidth(100)
    root_child2:setHeight(100)
    root:insertChild(root_child2, 3)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(700 == root:getComputedWidth(), "700 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(500 == root:getComputedHeight(), "500 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(300 == root_child0:getComputedLeft(), "300 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(100 == root_child0:getComputedWidth(), "100 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(180 == root_child0:getComputedHeight(), "180 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(250 == root_child1:getComputedLeft(), "250 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(200 == root_child1:getComputedTop(), "200 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(200 == root_child1:getComputedWidth(), "200 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(180 == root_child1:getComputedHeight(), "180 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(300 == root_child2:getComputedLeft(), "300 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(400 == root_child2:getComputedTop(), "400 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(100 == root_child2:getComputedWidth(), "100 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(100 == root_child2:getComputedHeight(), "100 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(700 == root:getComputedWidth(), "700 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(500 == root:getComputedHeight(), "500 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(300 == root_child0:getComputedLeft(), "300 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(100 == root_child0:getComputedWidth(), "100 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(180 == root_child0:getComputedHeight(), "180 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(250 == root_child1:getComputedLeft(), "250 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(200 == root_child1:getComputedTop(), "200 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(200 == root_child1:getComputedWidth(), "200 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(180 == root_child1:getComputedHeight(), "180 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(300 == root_child2:getComputedLeft(), "300 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(400 == root_child2:getComputedTop(), "400 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(100 == root_child2:getComputedWidth(), "100 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(100 == root_child2:getComputedHeight(), "100 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("wrap_nodes_with_content_sizing_overflowing_margin")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setWidth(500)
    root:setHeight(500)

    local root_child0 = Flow.Node.new(config)
    root_child0:setFlexDirection(Flow.FlexDirection.Row)
    root_child0:setFlexWrap(Flow.Wrap.Wrap)
    root_child0:setWidth(85)
    root:insertChild(root_child0, 1)

    local root_child0_child0 = Flow.Node.new(config)
    root_child0:insertChild(root_child0_child0, 1)

    local root_child0_child0_child0 = Flow.Node.new(config)
    root_child0_child0_child0:setWidth(40)
    root_child0_child0_child0:setHeight(40)
    root_child0_child0:insertChild(root_child0_child0_child0, 1)

    local root_child0_child1 = Flow.Node.new(config)
    root_child0_child1:setMargin(Flow.Edge.Right, 10)
    root_child0:insertChild(root_child0_child1, 2)

    local root_child0_child1_child0 = Flow.Node.new(config)
    root_child0_child1_child0:setWidth(40)
    root_child0_child1_child0:setHeight(40)
    root_child0_child1:insertChild(root_child0_child1_child0, 1)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(500 == root:getComputedWidth(), "500 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(500 == root:getComputedHeight(), "500 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(85 == root_child0:getComputedWidth(), "85 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(80 == root_child0:getComputedHeight(), "80 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child0_child0:getComputedLeft(), "0 == root_child0_child0:getComputedLeft() (" .. root_child0_child0:getComputedLeft() .. ")");
    assert(0 == root_child0_child0:getComputedTop(), "0 == root_child0_child0:getComputedTop() (" .. root_child0_child0:getComputedTop() .. ")");
    assert(40 == root_child0_child0:getComputedWidth(), "40 == root_child0_child0:getComputedWidth() (" .. root_child0_child0:getComputedWidth() .. ")");
    assert(40 == root_child0_child0:getComputedHeight(), "40 == root_child0_child0:getComputedHeight() (" .. root_child0_child0:getComputedHeight() .. ")");

    assert(0 == root_child0_child0_child0:getComputedLeft(), "0 == root_child0_child0_child0:getComputedLeft() (" .. root_child0_child0_child0:getComputedLeft() .. ")");
    assert(0 == root_child0_child0_child0:getComputedTop(), "0 == root_child0_child0_child0:getComputedTop() (" .. root_child0_child0_child0:getComputedTop() .. ")");
    assert(40 == root_child0_child0_child0:getComputedWidth(), "40 == root_child0_child0_child0:getComputedWidth() (" .. root_child0_child0_child0:getComputedWidth() .. ")");
    assert(40 == root_child0_child0_child0:getComputedHeight(), "40 == root_child0_child0_child0:getComputedHeight() (" .. root_child0_child0_child0:getComputedHeight() .. ")");

    assert(0 == root_child0_child1:getComputedLeft(), "0 == root_child0_child1:getComputedLeft() (" .. root_child0_child1:getComputedLeft() .. ")");
    assert(40 == root_child0_child1:getComputedTop(), "40 == root_child0_child1:getComputedTop() (" .. root_child0_child1:getComputedTop() .. ")");
    assert(40 == root_child0_child1:getComputedWidth(), "40 == root_child0_child1:getComputedWidth() (" .. root_child0_child1:getComputedWidth() .. ")");
    assert(40 == root_child0_child1:getComputedHeight(), "40 == root_child0_child1:getComputedHeight() (" .. root_child0_child1:getComputedHeight() .. ")");

    assert(0 == root_child0_child1_child0:getComputedLeft(), "0 == root_child0_child1_child0:getComputedLeft() (" .. root_child0_child1_child0:getComputedLeft() .. ")");
    assert(0 == root_child0_child1_child0:getComputedTop(), "0 == root_child0_child1_child0:getComputedTop() (" .. root_child0_child1_child0:getComputedTop() .. ")");
    assert(40 == root_child0_child1_child0:getComputedWidth(), "40 == root_child0_child1_child0:getComputedWidth() (" .. root_child0_child1_child0:getComputedWidth() .. ")");
    assert(40 == root_child0_child1_child0:getComputedHeight(), "40 == root_child0_child1_child0:getComputedHeight() (" .. root_child0_child1_child0:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(500 == root:getComputedWidth(), "500 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(500 == root:getComputedHeight(), "500 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(415 == root_child0:getComputedLeft(), "415 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(85 == root_child0:getComputedWidth(), "85 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(80 == root_child0:getComputedHeight(), "80 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(45 == root_child0_child0:getComputedLeft(), "45 == root_child0_child0:getComputedLeft() (" .. root_child0_child0:getComputedLeft() .. ")");
    assert(0 == root_child0_child0:getComputedTop(), "0 == root_child0_child0:getComputedTop() (" .. root_child0_child0:getComputedTop() .. ")");
    assert(40 == root_child0_child0:getComputedWidth(), "40 == root_child0_child0:getComputedWidth() (" .. root_child0_child0:getComputedWidth() .. ")");
    assert(40 == root_child0_child0:getComputedHeight(), "40 == root_child0_child0:getComputedHeight() (" .. root_child0_child0:getComputedHeight() .. ")");

    assert(0 == root_child0_child0_child0:getComputedLeft(), "0 == root_child0_child0_child0:getComputedLeft() (" .. root_child0_child0_child0:getComputedLeft() .. ")");
    assert(0 == root_child0_child0_child0:getComputedTop(), "0 == root_child0_child0_child0:getComputedTop() (" .. root_child0_child0_child0:getComputedTop() .. ")");
    assert(40 == root_child0_child0_child0:getComputedWidth(), "40 == root_child0_child0_child0:getComputedWidth() (" .. root_child0_child0_child0:getComputedWidth() .. ")");
    assert(40 == root_child0_child0_child0:getComputedHeight(), "40 == root_child0_child0_child0:getComputedHeight() (" .. root_child0_child0_child0:getComputedHeight() .. ")");

    assert(35 == root_child0_child1:getComputedLeft(), "35 == root_child0_child1:getComputedLeft() (" .. root_child0_child1:getComputedLeft() .. ")");
    assert(40 == root_child0_child1:getComputedTop(), "40 == root_child0_child1:getComputedTop() (" .. root_child0_child1:getComputedTop() .. ")");
    assert(40 == root_child0_child1:getComputedWidth(), "40 == root_child0_child1:getComputedWidth() (" .. root_child0_child1:getComputedWidth() .. ")");
    assert(40 == root_child0_child1:getComputedHeight(), "40 == root_child0_child1:getComputedHeight() (" .. root_child0_child1:getComputedHeight() .. ")");

    assert(0 == root_child0_child1_child0:getComputedLeft(), "0 == root_child0_child1_child0:getComputedLeft() (" .. root_child0_child1_child0:getComputedLeft() .. ")");
    assert(0 == root_child0_child1_child0:getComputedTop(), "0 == root_child0_child1_child0:getComputedTop() (" .. root_child0_child1_child0:getComputedTop() .. ")");
    assert(40 == root_child0_child1_child0:getComputedWidth(), "40 == root_child0_child1_child0:getComputedWidth() (" .. root_child0_child1_child0:getComputedWidth() .. ")");
    assert(40 == root_child0_child1_child0:getComputedHeight(), "40 == root_child0_child1_child0:getComputedHeight() (" .. root_child0_child1_child0:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("wrap_nodes_with_content_sizing_margin_cross")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setWidth(500)
    root:setHeight(500)

    local root_child0 = Flow.Node.new(config)
    root_child0:setFlexDirection(Flow.FlexDirection.Row)
    root_child0:setFlexWrap(Flow.Wrap.Wrap)
    root_child0:setWidth(70)
    root:insertChild(root_child0, 1)

    local root_child0_child0 = Flow.Node.new(config)
    root_child0:insertChild(root_child0_child0, 1)

    local root_child0_child0_child0 = Flow.Node.new(config)
    root_child0_child0_child0:setWidth(40)
    root_child0_child0_child0:setHeight(40)
    root_child0_child0:insertChild(root_child0_child0_child0, 1)

    local root_child0_child1 = Flow.Node.new(config)
    root_child0_child1:setMargin(Flow.Edge.Top, 10)
    root_child0:insertChild(root_child0_child1, 2)

    local root_child0_child1_child0 = Flow.Node.new(config)
    root_child0_child1_child0:setWidth(40)
    root_child0_child1_child0:setHeight(40)
    root_child0_child1:insertChild(root_child0_child1_child0, 1)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(500 == root:getComputedWidth(), "500 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(500 == root:getComputedHeight(), "500 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(70 == root_child0:getComputedWidth(), "70 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(90 == root_child0:getComputedHeight(), "90 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child0_child0:getComputedLeft(), "0 == root_child0_child0:getComputedLeft() (" .. root_child0_child0:getComputedLeft() .. ")");
    assert(0 == root_child0_child0:getComputedTop(), "0 == root_child0_child0:getComputedTop() (" .. root_child0_child0:getComputedTop() .. ")");
    assert(40 == root_child0_child0:getComputedWidth(), "40 == root_child0_child0:getComputedWidth() (" .. root_child0_child0:getComputedWidth() .. ")");
    assert(40 == root_child0_child0:getComputedHeight(), "40 == root_child0_child0:getComputedHeight() (" .. root_child0_child0:getComputedHeight() .. ")");

    assert(0 == root_child0_child0_child0:getComputedLeft(), "0 == root_child0_child0_child0:getComputedLeft() (" .. root_child0_child0_child0:getComputedLeft() .. ")");
    assert(0 == root_child0_child0_child0:getComputedTop(), "0 == root_child0_child0_child0:getComputedTop() (" .. root_child0_child0_child0:getComputedTop() .. ")");
    assert(40 == root_child0_child0_child0:getComputedWidth(), "40 == root_child0_child0_child0:getComputedWidth() (" .. root_child0_child0_child0:getComputedWidth() .. ")");
    assert(40 == root_child0_child0_child0:getComputedHeight(), "40 == root_child0_child0_child0:getComputedHeight() (" .. root_child0_child0_child0:getComputedHeight() .. ")");

    assert(0 == root_child0_child1:getComputedLeft(), "0 == root_child0_child1:getComputedLeft() (" .. root_child0_child1:getComputedLeft() .. ")");
    assert(50 == root_child0_child1:getComputedTop(), "50 == root_child0_child1:getComputedTop() (" .. root_child0_child1:getComputedTop() .. ")");
    assert(40 == root_child0_child1:getComputedWidth(), "40 == root_child0_child1:getComputedWidth() (" .. root_child0_child1:getComputedWidth() .. ")");
    assert(40 == root_child0_child1:getComputedHeight(), "40 == root_child0_child1:getComputedHeight() (" .. root_child0_child1:getComputedHeight() .. ")");

    assert(0 == root_child0_child1_child0:getComputedLeft(), "0 == root_child0_child1_child0:getComputedLeft() (" .. root_child0_child1_child0:getComputedLeft() .. ")");
    assert(0 == root_child0_child1_child0:getComputedTop(), "0 == root_child0_child1_child0:getComputedTop() (" .. root_child0_child1_child0:getComputedTop() .. ")");
    assert(40 == root_child0_child1_child0:getComputedWidth(), "40 == root_child0_child1_child0:getComputedWidth() (" .. root_child0_child1_child0:getComputedWidth() .. ")");
    assert(40 == root_child0_child1_child0:getComputedHeight(), "40 == root_child0_child1_child0:getComputedHeight() (" .. root_child0_child1_child0:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(500 == root:getComputedWidth(), "500 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(500 == root:getComputedHeight(), "500 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(430 == root_child0:getComputedLeft(), "430 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(70 == root_child0:getComputedWidth(), "70 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(90 == root_child0:getComputedHeight(), "90 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(30 == root_child0_child0:getComputedLeft(), "30 == root_child0_child0:getComputedLeft() (" .. root_child0_child0:getComputedLeft() .. ")");
    assert(0 == root_child0_child0:getComputedTop(), "0 == root_child0_child0:getComputedTop() (" .. root_child0_child0:getComputedTop() .. ")");
    assert(40 == root_child0_child0:getComputedWidth(), "40 == root_child0_child0:getComputedWidth() (" .. root_child0_child0:getComputedWidth() .. ")");
    assert(40 == root_child0_child0:getComputedHeight(), "40 == root_child0_child0:getComputedHeight() (" .. root_child0_child0:getComputedHeight() .. ")");

    assert(0 == root_child0_child0_child0:getComputedLeft(), "0 == root_child0_child0_child0:getComputedLeft() (" .. root_child0_child0_child0:getComputedLeft() .. ")");
    assert(0 == root_child0_child0_child0:getComputedTop(), "0 == root_child0_child0_child0:getComputedTop() (" .. root_child0_child0_child0:getComputedTop() .. ")");
    assert(40 == root_child0_child0_child0:getComputedWidth(), "40 == root_child0_child0_child0:getComputedWidth() (" .. root_child0_child0_child0:getComputedWidth() .. ")");
    assert(40 == root_child0_child0_child0:getComputedHeight(), "40 == root_child0_child0_child0:getComputedHeight() (" .. root_child0_child0_child0:getComputedHeight() .. ")");

    assert(30 == root_child0_child1:getComputedLeft(), "30 == root_child0_child1:getComputedLeft() (" .. root_child0_child1:getComputedLeft() .. ")");
    assert(50 == root_child0_child1:getComputedTop(), "50 == root_child0_child1:getComputedTop() (" .. root_child0_child1:getComputedTop() .. ")");
    assert(40 == root_child0_child1:getComputedWidth(), "40 == root_child0_child1:getComputedWidth() (" .. root_child0_child1:getComputedWidth() .. ")");
    assert(40 == root_child0_child1:getComputedHeight(), "40 == root_child0_child1:getComputedHeight() (" .. root_child0_child1:getComputedHeight() .. ")");

    assert(0 == root_child0_child1_child0:getComputedLeft(), "0 == root_child0_child1_child0:getComputedLeft() (" .. root_child0_child1_child0:getComputedLeft() .. ")");
    assert(0 == root_child0_child1_child0:getComputedTop(), "0 == root_child0_child1_child0:getComputedTop() (" .. root_child0_child1_child0:getComputedTop() .. ")");
    assert(40 == root_child0_child1_child0:getComputedWidth(), "40 == root_child0_child1_child0:getComputedWidth() (" .. root_child0_child1_child0:getComputedWidth() .. ")");
    assert(40 == root_child0_child1_child0:getComputedHeight(), "40 == root_child0_child1_child0:getComputedHeight() (" .. root_child0_child1_child0:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end

return nil
