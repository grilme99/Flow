-- @Generated by gentest/browser/gentest.js from gentest/fixtures/YGAlignContentTest.html

--!strict

local ReplicatedStorage = game:GetService("ReplicatedStorage")

local Packages = ReplicatedStorage.Packages
local Flow = require(Packages.Flow)

do
    print("align_content_flex_start")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setFlexDirection(Flow.FlexDirection.Row)
    root:setFlexWrap(Flow.Wrap.Wrap)
    root:setWidth(130)
    root:setHeight(100)

    local root_child0 = Flow.Node.new(config)
    root_child0:setWidth(50)
    root_child0:setHeight(10)
    root:insertChild(root_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setWidth(50)
    root_child1:setHeight(10)
    root:insertChild(root_child1, 2)

    local root_child2 = Flow.Node.new(config)
    root_child2:setWidth(50)
    root_child2:setHeight(10)
    root:insertChild(root_child2, 3)

    local root_child3 = Flow.Node.new(config)
    root_child3:setWidth(50)
    root_child3:setHeight(10)
    root:insertChild(root_child3, 4)

    local root_child4 = Flow.Node.new(config)
    root_child4:setWidth(50)
    root_child4:setHeight(10)
    root:insertChild(root_child4, 5)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(130 == root:getComputedWidth(), "130 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(50 == root_child0:getComputedWidth(), "50 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(10 == root_child0:getComputedHeight(), "10 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(50 == root_child1:getComputedLeft(), "50 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(0 == root_child1:getComputedTop(), "0 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(50 == root_child1:getComputedWidth(), "50 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(10 == root_child1:getComputedHeight(), "10 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(0 == root_child2:getComputedLeft(), "0 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(10 == root_child2:getComputedTop(), "10 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(50 == root_child2:getComputedWidth(), "50 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(10 == root_child2:getComputedHeight(), "10 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    assert(50 == root_child3:getComputedLeft(), "50 == root_child3:getComputedLeft() (" .. root_child3:getComputedLeft() .. ")");
    assert(10 == root_child3:getComputedTop(), "10 == root_child3:getComputedTop() (" .. root_child3:getComputedTop() .. ")");
    assert(50 == root_child3:getComputedWidth(), "50 == root_child3:getComputedWidth() (" .. root_child3:getComputedWidth() .. ")");
    assert(10 == root_child3:getComputedHeight(), "10 == root_child3:getComputedHeight() (" .. root_child3:getComputedHeight() .. ")");

    assert(0 == root_child4:getComputedLeft(), "0 == root_child4:getComputedLeft() (" .. root_child4:getComputedLeft() .. ")");
    assert(20 == root_child4:getComputedTop(), "20 == root_child4:getComputedTop() (" .. root_child4:getComputedTop() .. ")");
    assert(50 == root_child4:getComputedWidth(), "50 == root_child4:getComputedWidth() (" .. root_child4:getComputedWidth() .. ")");
    assert(10 == root_child4:getComputedHeight(), "10 == root_child4:getComputedHeight() (" .. root_child4:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(130 == root:getComputedWidth(), "130 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(80 == root_child0:getComputedLeft(), "80 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(50 == root_child0:getComputedWidth(), "50 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(10 == root_child0:getComputedHeight(), "10 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(30 == root_child1:getComputedLeft(), "30 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(0 == root_child1:getComputedTop(), "0 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(50 == root_child1:getComputedWidth(), "50 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(10 == root_child1:getComputedHeight(), "10 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(80 == root_child2:getComputedLeft(), "80 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(10 == root_child2:getComputedTop(), "10 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(50 == root_child2:getComputedWidth(), "50 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(10 == root_child2:getComputedHeight(), "10 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    assert(30 == root_child3:getComputedLeft(), "30 == root_child3:getComputedLeft() (" .. root_child3:getComputedLeft() .. ")");
    assert(10 == root_child3:getComputedTop(), "10 == root_child3:getComputedTop() (" .. root_child3:getComputedTop() .. ")");
    assert(50 == root_child3:getComputedWidth(), "50 == root_child3:getComputedWidth() (" .. root_child3:getComputedWidth() .. ")");
    assert(10 == root_child3:getComputedHeight(), "10 == root_child3:getComputedHeight() (" .. root_child3:getComputedHeight() .. ")");

    assert(80 == root_child4:getComputedLeft(), "80 == root_child4:getComputedLeft() (" .. root_child4:getComputedLeft() .. ")");
    assert(20 == root_child4:getComputedTop(), "20 == root_child4:getComputedTop() (" .. root_child4:getComputedTop() .. ")");
    assert(50 == root_child4:getComputedWidth(), "50 == root_child4:getComputedWidth() (" .. root_child4:getComputedWidth() .. ")");
    assert(10 == root_child4:getComputedHeight(), "10 == root_child4:getComputedHeight() (" .. root_child4:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("align_content_flex_start_without_height_on_children")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setFlexWrap(Flow.Wrap.Wrap)
    root:setWidth(100)
    root:setHeight(100)

    local root_child0 = Flow.Node.new(config)
    root_child0:setWidth(50)
    root:insertChild(root_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setWidth(50)
    root_child1:setHeight(10)
    root:insertChild(root_child1, 2)

    local root_child2 = Flow.Node.new(config)
    root_child2:setWidth(50)
    root:insertChild(root_child2, 3)

    local root_child3 = Flow.Node.new(config)
    root_child3:setWidth(50)
    root_child3:setHeight(10)
    root:insertChild(root_child3, 4)

    local root_child4 = Flow.Node.new(config)
    root_child4:setWidth(50)
    root:insertChild(root_child4, 5)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(50 == root_child0:getComputedWidth(), "50 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(0 == root_child0:getComputedHeight(), "0 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child1:getComputedLeft(), "0 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(0 == root_child1:getComputedTop(), "0 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(50 == root_child1:getComputedWidth(), "50 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(10 == root_child1:getComputedHeight(), "10 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(0 == root_child2:getComputedLeft(), "0 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(10 == root_child2:getComputedTop(), "10 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(50 == root_child2:getComputedWidth(), "50 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(0 == root_child2:getComputedHeight(), "0 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    assert(0 == root_child3:getComputedLeft(), "0 == root_child3:getComputedLeft() (" .. root_child3:getComputedLeft() .. ")");
    assert(10 == root_child3:getComputedTop(), "10 == root_child3:getComputedTop() (" .. root_child3:getComputedTop() .. ")");
    assert(50 == root_child3:getComputedWidth(), "50 == root_child3:getComputedWidth() (" .. root_child3:getComputedWidth() .. ")");
    assert(10 == root_child3:getComputedHeight(), "10 == root_child3:getComputedHeight() (" .. root_child3:getComputedHeight() .. ")");

    assert(0 == root_child4:getComputedLeft(), "0 == root_child4:getComputedLeft() (" .. root_child4:getComputedLeft() .. ")");
    assert(20 == root_child4:getComputedTop(), "20 == root_child4:getComputedTop() (" .. root_child4:getComputedTop() .. ")");
    assert(50 == root_child4:getComputedWidth(), "50 == root_child4:getComputedWidth() (" .. root_child4:getComputedWidth() .. ")");
    assert(0 == root_child4:getComputedHeight(), "0 == root_child4:getComputedHeight() (" .. root_child4:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(50 == root_child0:getComputedLeft(), "50 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(50 == root_child0:getComputedWidth(), "50 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(0 == root_child0:getComputedHeight(), "0 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(50 == root_child1:getComputedLeft(), "50 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(0 == root_child1:getComputedTop(), "0 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(50 == root_child1:getComputedWidth(), "50 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(10 == root_child1:getComputedHeight(), "10 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(50 == root_child2:getComputedLeft(), "50 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(10 == root_child2:getComputedTop(), "10 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(50 == root_child2:getComputedWidth(), "50 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(0 == root_child2:getComputedHeight(), "0 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    assert(50 == root_child3:getComputedLeft(), "50 == root_child3:getComputedLeft() (" .. root_child3:getComputedLeft() .. ")");
    assert(10 == root_child3:getComputedTop(), "10 == root_child3:getComputedTop() (" .. root_child3:getComputedTop() .. ")");
    assert(50 == root_child3:getComputedWidth(), "50 == root_child3:getComputedWidth() (" .. root_child3:getComputedWidth() .. ")");
    assert(10 == root_child3:getComputedHeight(), "10 == root_child3:getComputedHeight() (" .. root_child3:getComputedHeight() .. ")");

    assert(50 == root_child4:getComputedLeft(), "50 == root_child4:getComputedLeft() (" .. root_child4:getComputedLeft() .. ")");
    assert(20 == root_child4:getComputedTop(), "20 == root_child4:getComputedTop() (" .. root_child4:getComputedTop() .. ")");
    assert(50 == root_child4:getComputedWidth(), "50 == root_child4:getComputedWidth() (" .. root_child4:getComputedWidth() .. ")");
    assert(0 == root_child4:getComputedHeight(), "0 == root_child4:getComputedHeight() (" .. root_child4:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("align_content_flex_start_with_flex")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setFlexWrap(Flow.Wrap.Wrap)
    root:setWidth(100)
    root:setHeight(120)

    local root_child0 = Flow.Node.new(config)
    root_child0:setFlexGrow(1)
    root_child0:setFlexBasis("0%")
    root_child0:setWidth(50)
    root:insertChild(root_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setFlexGrow(1)
    root_child1:setFlexBasis("0%")
    root_child1:setWidth(50)
    root_child1:setHeight(10)
    root:insertChild(root_child1, 2)

    local root_child2 = Flow.Node.new(config)
    root_child2:setWidth(50)
    root:insertChild(root_child2, 3)

    local root_child3 = Flow.Node.new(config)
    root_child3:setFlexGrow(1)
    root_child3:setFlexShrink(1)
    root_child3:setFlexBasis("0%")
    root_child3:setWidth(50)
    root:insertChild(root_child3, 4)

    local root_child4 = Flow.Node.new(config)
    root_child4:setWidth(50)
    root:insertChild(root_child4, 5)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(120 == root:getComputedHeight(), "120 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(50 == root_child0:getComputedWidth(), "50 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(40 == root_child0:getComputedHeight(), "40 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child1:getComputedLeft(), "0 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(40 == root_child1:getComputedTop(), "40 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(50 == root_child1:getComputedWidth(), "50 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(40 == root_child1:getComputedHeight(), "40 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(0 == root_child2:getComputedLeft(), "0 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(80 == root_child2:getComputedTop(), "80 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(50 == root_child2:getComputedWidth(), "50 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(0 == root_child2:getComputedHeight(), "0 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    assert(0 == root_child3:getComputedLeft(), "0 == root_child3:getComputedLeft() (" .. root_child3:getComputedLeft() .. ")");
    assert(80 == root_child3:getComputedTop(), "80 == root_child3:getComputedTop() (" .. root_child3:getComputedTop() .. ")");
    assert(50 == root_child3:getComputedWidth(), "50 == root_child3:getComputedWidth() (" .. root_child3:getComputedWidth() .. ")");
    assert(40 == root_child3:getComputedHeight(), "40 == root_child3:getComputedHeight() (" .. root_child3:getComputedHeight() .. ")");

    assert(0 == root_child4:getComputedLeft(), "0 == root_child4:getComputedLeft() (" .. root_child4:getComputedLeft() .. ")");
    assert(120 == root_child4:getComputedTop(), "120 == root_child4:getComputedTop() (" .. root_child4:getComputedTop() .. ")");
    assert(50 == root_child4:getComputedWidth(), "50 == root_child4:getComputedWidth() (" .. root_child4:getComputedWidth() .. ")");
    assert(0 == root_child4:getComputedHeight(), "0 == root_child4:getComputedHeight() (" .. root_child4:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(120 == root:getComputedHeight(), "120 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(50 == root_child0:getComputedLeft(), "50 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(50 == root_child0:getComputedWidth(), "50 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(40 == root_child0:getComputedHeight(), "40 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(50 == root_child1:getComputedLeft(), "50 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(40 == root_child1:getComputedTop(), "40 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(50 == root_child1:getComputedWidth(), "50 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(40 == root_child1:getComputedHeight(), "40 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(50 == root_child2:getComputedLeft(), "50 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(80 == root_child2:getComputedTop(), "80 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(50 == root_child2:getComputedWidth(), "50 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(0 == root_child2:getComputedHeight(), "0 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    assert(50 == root_child3:getComputedLeft(), "50 == root_child3:getComputedLeft() (" .. root_child3:getComputedLeft() .. ")");
    assert(80 == root_child3:getComputedTop(), "80 == root_child3:getComputedTop() (" .. root_child3:getComputedTop() .. ")");
    assert(50 == root_child3:getComputedWidth(), "50 == root_child3:getComputedWidth() (" .. root_child3:getComputedWidth() .. ")");
    assert(40 == root_child3:getComputedHeight(), "40 == root_child3:getComputedHeight() (" .. root_child3:getComputedHeight() .. ")");

    assert(50 == root_child4:getComputedLeft(), "50 == root_child4:getComputedLeft() (" .. root_child4:getComputedLeft() .. ")");
    assert(120 == root_child4:getComputedTop(), "120 == root_child4:getComputedTop() (" .. root_child4:getComputedTop() .. ")");
    assert(50 == root_child4:getComputedWidth(), "50 == root_child4:getComputedWidth() (" .. root_child4:getComputedWidth() .. ")");
    assert(0 == root_child4:getComputedHeight(), "0 == root_child4:getComputedHeight() (" .. root_child4:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("align_content_flex_end")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setAlignContent(Flow.Align.FlexEnd)
    root:setFlexWrap(Flow.Wrap.Wrap)
    root:setWidth(100)
    root:setHeight(100)

    local root_child0 = Flow.Node.new(config)
    root_child0:setWidth(50)
    root_child0:setHeight(10)
    root:insertChild(root_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setWidth(50)
    root_child1:setHeight(10)
    root:insertChild(root_child1, 2)

    local root_child2 = Flow.Node.new(config)
    root_child2:setWidth(50)
    root_child2:setHeight(10)
    root:insertChild(root_child2, 3)

    local root_child3 = Flow.Node.new(config)
    root_child3:setWidth(50)
    root_child3:setHeight(10)
    root:insertChild(root_child3, 4)

    local root_child4 = Flow.Node.new(config)
    root_child4:setWidth(50)
    root_child4:setHeight(10)
    root:insertChild(root_child4, 5)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(50 == root_child0:getComputedLeft(), "50 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(50 == root_child0:getComputedWidth(), "50 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(10 == root_child0:getComputedHeight(), "10 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(50 == root_child1:getComputedLeft(), "50 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(10 == root_child1:getComputedTop(), "10 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(50 == root_child1:getComputedWidth(), "50 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(10 == root_child1:getComputedHeight(), "10 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(50 == root_child2:getComputedLeft(), "50 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(20 == root_child2:getComputedTop(), "20 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(50 == root_child2:getComputedWidth(), "50 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(10 == root_child2:getComputedHeight(), "10 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    assert(50 == root_child3:getComputedLeft(), "50 == root_child3:getComputedLeft() (" .. root_child3:getComputedLeft() .. ")");
    assert(30 == root_child3:getComputedTop(), "30 == root_child3:getComputedTop() (" .. root_child3:getComputedTop() .. ")");
    assert(50 == root_child3:getComputedWidth(), "50 == root_child3:getComputedWidth() (" .. root_child3:getComputedWidth() .. ")");
    assert(10 == root_child3:getComputedHeight(), "10 == root_child3:getComputedHeight() (" .. root_child3:getComputedHeight() .. ")");

    assert(50 == root_child4:getComputedLeft(), "50 == root_child4:getComputedLeft() (" .. root_child4:getComputedLeft() .. ")");
    assert(40 == root_child4:getComputedTop(), "40 == root_child4:getComputedTop() (" .. root_child4:getComputedTop() .. ")");
    assert(50 == root_child4:getComputedWidth(), "50 == root_child4:getComputedWidth() (" .. root_child4:getComputedWidth() .. ")");
    assert(10 == root_child4:getComputedHeight(), "10 == root_child4:getComputedHeight() (" .. root_child4:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(50 == root_child0:getComputedWidth(), "50 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(10 == root_child0:getComputedHeight(), "10 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child1:getComputedLeft(), "0 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(10 == root_child1:getComputedTop(), "10 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(50 == root_child1:getComputedWidth(), "50 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(10 == root_child1:getComputedHeight(), "10 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(0 == root_child2:getComputedLeft(), "0 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(20 == root_child2:getComputedTop(), "20 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(50 == root_child2:getComputedWidth(), "50 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(10 == root_child2:getComputedHeight(), "10 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    assert(0 == root_child3:getComputedLeft(), "0 == root_child3:getComputedLeft() (" .. root_child3:getComputedLeft() .. ")");
    assert(30 == root_child3:getComputedTop(), "30 == root_child3:getComputedTop() (" .. root_child3:getComputedTop() .. ")");
    assert(50 == root_child3:getComputedWidth(), "50 == root_child3:getComputedWidth() (" .. root_child3:getComputedWidth() .. ")");
    assert(10 == root_child3:getComputedHeight(), "10 == root_child3:getComputedHeight() (" .. root_child3:getComputedHeight() .. ")");

    assert(0 == root_child4:getComputedLeft(), "0 == root_child4:getComputedLeft() (" .. root_child4:getComputedLeft() .. ")");
    assert(40 == root_child4:getComputedTop(), "40 == root_child4:getComputedTop() (" .. root_child4:getComputedTop() .. ")");
    assert(50 == root_child4:getComputedWidth(), "50 == root_child4:getComputedWidth() (" .. root_child4:getComputedWidth() .. ")");
    assert(10 == root_child4:getComputedHeight(), "10 == root_child4:getComputedHeight() (" .. root_child4:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("align_content_stretch")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setAlignContent(Flow.Align.Stretch)
    root:setFlexWrap(Flow.Wrap.Wrap)
    root:setWidth(150)
    root:setHeight(100)

    local root_child0 = Flow.Node.new(config)
    root_child0:setWidth(50)
    root:insertChild(root_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setWidth(50)
    root:insertChild(root_child1, 2)

    local root_child2 = Flow.Node.new(config)
    root_child2:setWidth(50)
    root:insertChild(root_child2, 3)

    local root_child3 = Flow.Node.new(config)
    root_child3:setWidth(50)
    root:insertChild(root_child3, 4)

    local root_child4 = Flow.Node.new(config)
    root_child4:setWidth(50)
    root:insertChild(root_child4, 5)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(150 == root:getComputedWidth(), "150 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(50 == root_child0:getComputedWidth(), "50 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(0 == root_child0:getComputedHeight(), "0 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child1:getComputedLeft(), "0 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(0 == root_child1:getComputedTop(), "0 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(50 == root_child1:getComputedWidth(), "50 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(0 == root_child1:getComputedHeight(), "0 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(0 == root_child2:getComputedLeft(), "0 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(0 == root_child2:getComputedTop(), "0 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(50 == root_child2:getComputedWidth(), "50 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(0 == root_child2:getComputedHeight(), "0 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    assert(0 == root_child3:getComputedLeft(), "0 == root_child3:getComputedLeft() (" .. root_child3:getComputedLeft() .. ")");
    assert(0 == root_child3:getComputedTop(), "0 == root_child3:getComputedTop() (" .. root_child3:getComputedTop() .. ")");
    assert(50 == root_child3:getComputedWidth(), "50 == root_child3:getComputedWidth() (" .. root_child3:getComputedWidth() .. ")");
    assert(0 == root_child3:getComputedHeight(), "0 == root_child3:getComputedHeight() (" .. root_child3:getComputedHeight() .. ")");

    assert(0 == root_child4:getComputedLeft(), "0 == root_child4:getComputedLeft() (" .. root_child4:getComputedLeft() .. ")");
    assert(0 == root_child4:getComputedTop(), "0 == root_child4:getComputedTop() (" .. root_child4:getComputedTop() .. ")");
    assert(50 == root_child4:getComputedWidth(), "50 == root_child4:getComputedWidth() (" .. root_child4:getComputedWidth() .. ")");
    assert(0 == root_child4:getComputedHeight(), "0 == root_child4:getComputedHeight() (" .. root_child4:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(150 == root:getComputedWidth(), "150 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(100 == root_child0:getComputedLeft(), "100 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(50 == root_child0:getComputedWidth(), "50 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(0 == root_child0:getComputedHeight(), "0 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(100 == root_child1:getComputedLeft(), "100 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(0 == root_child1:getComputedTop(), "0 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(50 == root_child1:getComputedWidth(), "50 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(0 == root_child1:getComputedHeight(), "0 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(100 == root_child2:getComputedLeft(), "100 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(0 == root_child2:getComputedTop(), "0 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(50 == root_child2:getComputedWidth(), "50 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(0 == root_child2:getComputedHeight(), "0 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    assert(100 == root_child3:getComputedLeft(), "100 == root_child3:getComputedLeft() (" .. root_child3:getComputedLeft() .. ")");
    assert(0 == root_child3:getComputedTop(), "0 == root_child3:getComputedTop() (" .. root_child3:getComputedTop() .. ")");
    assert(50 == root_child3:getComputedWidth(), "50 == root_child3:getComputedWidth() (" .. root_child3:getComputedWidth() .. ")");
    assert(0 == root_child3:getComputedHeight(), "0 == root_child3:getComputedHeight() (" .. root_child3:getComputedHeight() .. ")");

    assert(100 == root_child4:getComputedLeft(), "100 == root_child4:getComputedLeft() (" .. root_child4:getComputedLeft() .. ")");
    assert(0 == root_child4:getComputedTop(), "0 == root_child4:getComputedTop() (" .. root_child4:getComputedTop() .. ")");
    assert(50 == root_child4:getComputedWidth(), "50 == root_child4:getComputedWidth() (" .. root_child4:getComputedWidth() .. ")");
    assert(0 == root_child4:getComputedHeight(), "0 == root_child4:getComputedHeight() (" .. root_child4:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("align_content_spacebetween")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setFlexDirection(Flow.FlexDirection.Row)
    root:setAlignContent(Flow.Align.SpaceBetween)
    root:setFlexWrap(Flow.Wrap.Wrap)
    root:setWidth(130)
    root:setHeight(100)

    local root_child0 = Flow.Node.new(config)
    root_child0:setWidth(50)
    root_child0:setHeight(10)
    root:insertChild(root_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setWidth(50)
    root_child1:setHeight(10)
    root:insertChild(root_child1, 2)

    local root_child2 = Flow.Node.new(config)
    root_child2:setWidth(50)
    root_child2:setHeight(10)
    root:insertChild(root_child2, 3)

    local root_child3 = Flow.Node.new(config)
    root_child3:setWidth(50)
    root_child3:setHeight(10)
    root:insertChild(root_child3, 4)

    local root_child4 = Flow.Node.new(config)
    root_child4:setWidth(50)
    root_child4:setHeight(10)
    root:insertChild(root_child4, 5)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(130 == root:getComputedWidth(), "130 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(50 == root_child0:getComputedWidth(), "50 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(10 == root_child0:getComputedHeight(), "10 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(50 == root_child1:getComputedLeft(), "50 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(0 == root_child1:getComputedTop(), "0 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(50 == root_child1:getComputedWidth(), "50 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(10 == root_child1:getComputedHeight(), "10 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(0 == root_child2:getComputedLeft(), "0 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(45 == root_child2:getComputedTop(), "45 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(50 == root_child2:getComputedWidth(), "50 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(10 == root_child2:getComputedHeight(), "10 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    assert(50 == root_child3:getComputedLeft(), "50 == root_child3:getComputedLeft() (" .. root_child3:getComputedLeft() .. ")");
    assert(45 == root_child3:getComputedTop(), "45 == root_child3:getComputedTop() (" .. root_child3:getComputedTop() .. ")");
    assert(50 == root_child3:getComputedWidth(), "50 == root_child3:getComputedWidth() (" .. root_child3:getComputedWidth() .. ")");
    assert(10 == root_child3:getComputedHeight(), "10 == root_child3:getComputedHeight() (" .. root_child3:getComputedHeight() .. ")");

    assert(0 == root_child4:getComputedLeft(), "0 == root_child4:getComputedLeft() (" .. root_child4:getComputedLeft() .. ")");
    assert(90 == root_child4:getComputedTop(), "90 == root_child4:getComputedTop() (" .. root_child4:getComputedTop() .. ")");
    assert(50 == root_child4:getComputedWidth(), "50 == root_child4:getComputedWidth() (" .. root_child4:getComputedWidth() .. ")");
    assert(10 == root_child4:getComputedHeight(), "10 == root_child4:getComputedHeight() (" .. root_child4:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(130 == root:getComputedWidth(), "130 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(80 == root_child0:getComputedLeft(), "80 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(50 == root_child0:getComputedWidth(), "50 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(10 == root_child0:getComputedHeight(), "10 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(30 == root_child1:getComputedLeft(), "30 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(0 == root_child1:getComputedTop(), "0 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(50 == root_child1:getComputedWidth(), "50 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(10 == root_child1:getComputedHeight(), "10 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(80 == root_child2:getComputedLeft(), "80 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(45 == root_child2:getComputedTop(), "45 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(50 == root_child2:getComputedWidth(), "50 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(10 == root_child2:getComputedHeight(), "10 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    assert(30 == root_child3:getComputedLeft(), "30 == root_child3:getComputedLeft() (" .. root_child3:getComputedLeft() .. ")");
    assert(45 == root_child3:getComputedTop(), "45 == root_child3:getComputedTop() (" .. root_child3:getComputedTop() .. ")");
    assert(50 == root_child3:getComputedWidth(), "50 == root_child3:getComputedWidth() (" .. root_child3:getComputedWidth() .. ")");
    assert(10 == root_child3:getComputedHeight(), "10 == root_child3:getComputedHeight() (" .. root_child3:getComputedHeight() .. ")");

    assert(80 == root_child4:getComputedLeft(), "80 == root_child4:getComputedLeft() (" .. root_child4:getComputedLeft() .. ")");
    assert(90 == root_child4:getComputedTop(), "90 == root_child4:getComputedTop() (" .. root_child4:getComputedTop() .. ")");
    assert(50 == root_child4:getComputedWidth(), "50 == root_child4:getComputedWidth() (" .. root_child4:getComputedWidth() .. ")");
    assert(10 == root_child4:getComputedHeight(), "10 == root_child4:getComputedHeight() (" .. root_child4:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("align_content_spacearound")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setFlexDirection(Flow.FlexDirection.Row)
    root:setAlignContent(Flow.Align.SpaceAround)
    root:setFlexWrap(Flow.Wrap.Wrap)
    root:setWidth(140)
    root:setHeight(120)

    local root_child0 = Flow.Node.new(config)
    root_child0:setWidth(50)
    root_child0:setHeight(10)
    root:insertChild(root_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setWidth(50)
    root_child1:setHeight(10)
    root:insertChild(root_child1, 2)

    local root_child2 = Flow.Node.new(config)
    root_child2:setWidth(50)
    root_child2:setHeight(10)
    root:insertChild(root_child2, 3)

    local root_child3 = Flow.Node.new(config)
    root_child3:setWidth(50)
    root_child3:setHeight(10)
    root:insertChild(root_child3, 4)

    local root_child4 = Flow.Node.new(config)
    root_child4:setWidth(50)
    root_child4:setHeight(10)
    root:insertChild(root_child4, 5)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(140 == root:getComputedWidth(), "140 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(120 == root:getComputedHeight(), "120 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(15 == root_child0:getComputedTop(), "15 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(50 == root_child0:getComputedWidth(), "50 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(10 == root_child0:getComputedHeight(), "10 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(50 == root_child1:getComputedLeft(), "50 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(15 == root_child1:getComputedTop(), "15 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(50 == root_child1:getComputedWidth(), "50 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(10 == root_child1:getComputedHeight(), "10 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(0 == root_child2:getComputedLeft(), "0 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(55 == root_child2:getComputedTop(), "55 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(50 == root_child2:getComputedWidth(), "50 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(10 == root_child2:getComputedHeight(), "10 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    assert(50 == root_child3:getComputedLeft(), "50 == root_child3:getComputedLeft() (" .. root_child3:getComputedLeft() .. ")");
    assert(55 == root_child3:getComputedTop(), "55 == root_child3:getComputedTop() (" .. root_child3:getComputedTop() .. ")");
    assert(50 == root_child3:getComputedWidth(), "50 == root_child3:getComputedWidth() (" .. root_child3:getComputedWidth() .. ")");
    assert(10 == root_child3:getComputedHeight(), "10 == root_child3:getComputedHeight() (" .. root_child3:getComputedHeight() .. ")");

    assert(0 == root_child4:getComputedLeft(), "0 == root_child4:getComputedLeft() (" .. root_child4:getComputedLeft() .. ")");
    assert(95 == root_child4:getComputedTop(), "95 == root_child4:getComputedTop() (" .. root_child4:getComputedTop() .. ")");
    assert(50 == root_child4:getComputedWidth(), "50 == root_child4:getComputedWidth() (" .. root_child4:getComputedWidth() .. ")");
    assert(10 == root_child4:getComputedHeight(), "10 == root_child4:getComputedHeight() (" .. root_child4:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(140 == root:getComputedWidth(), "140 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(120 == root:getComputedHeight(), "120 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(90 == root_child0:getComputedLeft(), "90 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(15 == root_child0:getComputedTop(), "15 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(50 == root_child0:getComputedWidth(), "50 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(10 == root_child0:getComputedHeight(), "10 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(40 == root_child1:getComputedLeft(), "40 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(15 == root_child1:getComputedTop(), "15 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(50 == root_child1:getComputedWidth(), "50 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(10 == root_child1:getComputedHeight(), "10 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(90 == root_child2:getComputedLeft(), "90 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(55 == root_child2:getComputedTop(), "55 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(50 == root_child2:getComputedWidth(), "50 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(10 == root_child2:getComputedHeight(), "10 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    assert(40 == root_child3:getComputedLeft(), "40 == root_child3:getComputedLeft() (" .. root_child3:getComputedLeft() .. ")");
    assert(55 == root_child3:getComputedTop(), "55 == root_child3:getComputedTop() (" .. root_child3:getComputedTop() .. ")");
    assert(50 == root_child3:getComputedWidth(), "50 == root_child3:getComputedWidth() (" .. root_child3:getComputedWidth() .. ")");
    assert(10 == root_child3:getComputedHeight(), "10 == root_child3:getComputedHeight() (" .. root_child3:getComputedHeight() .. ")");

    assert(90 == root_child4:getComputedLeft(), "90 == root_child4:getComputedLeft() (" .. root_child4:getComputedLeft() .. ")");
    assert(95 == root_child4:getComputedTop(), "95 == root_child4:getComputedTop() (" .. root_child4:getComputedTop() .. ")");
    assert(50 == root_child4:getComputedWidth(), "50 == root_child4:getComputedWidth() (" .. root_child4:getComputedWidth() .. ")");
    assert(10 == root_child4:getComputedHeight(), "10 == root_child4:getComputedHeight() (" .. root_child4:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("align_content_stretch_row")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setFlexDirection(Flow.FlexDirection.Row)
    root:setAlignContent(Flow.Align.Stretch)
    root:setFlexWrap(Flow.Wrap.Wrap)
    root:setWidth(150)
    root:setHeight(100)

    local root_child0 = Flow.Node.new(config)
    root_child0:setWidth(50)
    root:insertChild(root_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setWidth(50)
    root:insertChild(root_child1, 2)

    local root_child2 = Flow.Node.new(config)
    root_child2:setWidth(50)
    root:insertChild(root_child2, 3)

    local root_child3 = Flow.Node.new(config)
    root_child3:setWidth(50)
    root:insertChild(root_child3, 4)

    local root_child4 = Flow.Node.new(config)
    root_child4:setWidth(50)
    root:insertChild(root_child4, 5)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(150 == root:getComputedWidth(), "150 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(50 == root_child0:getComputedWidth(), "50 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(50 == root_child0:getComputedHeight(), "50 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(50 == root_child1:getComputedLeft(), "50 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(0 == root_child1:getComputedTop(), "0 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(50 == root_child1:getComputedWidth(), "50 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(50 == root_child1:getComputedHeight(), "50 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(100 == root_child2:getComputedLeft(), "100 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(0 == root_child2:getComputedTop(), "0 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(50 == root_child2:getComputedWidth(), "50 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(50 == root_child2:getComputedHeight(), "50 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    assert(0 == root_child3:getComputedLeft(), "0 == root_child3:getComputedLeft() (" .. root_child3:getComputedLeft() .. ")");
    assert(50 == root_child3:getComputedTop(), "50 == root_child3:getComputedTop() (" .. root_child3:getComputedTop() .. ")");
    assert(50 == root_child3:getComputedWidth(), "50 == root_child3:getComputedWidth() (" .. root_child3:getComputedWidth() .. ")");
    assert(50 == root_child3:getComputedHeight(), "50 == root_child3:getComputedHeight() (" .. root_child3:getComputedHeight() .. ")");

    assert(50 == root_child4:getComputedLeft(), "50 == root_child4:getComputedLeft() (" .. root_child4:getComputedLeft() .. ")");
    assert(50 == root_child4:getComputedTop(), "50 == root_child4:getComputedTop() (" .. root_child4:getComputedTop() .. ")");
    assert(50 == root_child4:getComputedWidth(), "50 == root_child4:getComputedWidth() (" .. root_child4:getComputedWidth() .. ")");
    assert(50 == root_child4:getComputedHeight(), "50 == root_child4:getComputedHeight() (" .. root_child4:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(150 == root:getComputedWidth(), "150 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(100 == root_child0:getComputedLeft(), "100 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(50 == root_child0:getComputedWidth(), "50 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(50 == root_child0:getComputedHeight(), "50 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(50 == root_child1:getComputedLeft(), "50 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(0 == root_child1:getComputedTop(), "0 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(50 == root_child1:getComputedWidth(), "50 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(50 == root_child1:getComputedHeight(), "50 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(0 == root_child2:getComputedLeft(), "0 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(0 == root_child2:getComputedTop(), "0 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(50 == root_child2:getComputedWidth(), "50 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(50 == root_child2:getComputedHeight(), "50 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    assert(100 == root_child3:getComputedLeft(), "100 == root_child3:getComputedLeft() (" .. root_child3:getComputedLeft() .. ")");
    assert(50 == root_child3:getComputedTop(), "50 == root_child3:getComputedTop() (" .. root_child3:getComputedTop() .. ")");
    assert(50 == root_child3:getComputedWidth(), "50 == root_child3:getComputedWidth() (" .. root_child3:getComputedWidth() .. ")");
    assert(50 == root_child3:getComputedHeight(), "50 == root_child3:getComputedHeight() (" .. root_child3:getComputedHeight() .. ")");

    assert(50 == root_child4:getComputedLeft(), "50 == root_child4:getComputedLeft() (" .. root_child4:getComputedLeft() .. ")");
    assert(50 == root_child4:getComputedTop(), "50 == root_child4:getComputedTop() (" .. root_child4:getComputedTop() .. ")");
    assert(50 == root_child4:getComputedWidth(), "50 == root_child4:getComputedWidth() (" .. root_child4:getComputedWidth() .. ")");
    assert(50 == root_child4:getComputedHeight(), "50 == root_child4:getComputedHeight() (" .. root_child4:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("align_content_stretch_row_with_children")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setFlexDirection(Flow.FlexDirection.Row)
    root:setAlignContent(Flow.Align.Stretch)
    root:setFlexWrap(Flow.Wrap.Wrap)
    root:setWidth(150)
    root:setHeight(100)

    local root_child0 = Flow.Node.new(config)
    root_child0:setWidth(50)
    root:insertChild(root_child0, 1)

    local root_child0_child0 = Flow.Node.new(config)
    root_child0_child0:setFlexGrow(1)
    root_child0_child0:setFlexShrink(1)
    root_child0_child0:setFlexBasis("0%")
    root_child0:insertChild(root_child0_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setWidth(50)
    root:insertChild(root_child1, 2)

    local root_child2 = Flow.Node.new(config)
    root_child2:setWidth(50)
    root:insertChild(root_child2, 3)

    local root_child3 = Flow.Node.new(config)
    root_child3:setWidth(50)
    root:insertChild(root_child3, 4)

    local root_child4 = Flow.Node.new(config)
    root_child4:setWidth(50)
    root:insertChild(root_child4, 5)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(150 == root:getComputedWidth(), "150 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(50 == root_child0:getComputedWidth(), "50 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(50 == root_child0:getComputedHeight(), "50 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child0_child0:getComputedLeft(), "0 == root_child0_child0:getComputedLeft() (" .. root_child0_child0:getComputedLeft() .. ")");
    assert(0 == root_child0_child0:getComputedTop(), "0 == root_child0_child0:getComputedTop() (" .. root_child0_child0:getComputedTop() .. ")");
    assert(50 == root_child0_child0:getComputedWidth(), "50 == root_child0_child0:getComputedWidth() (" .. root_child0_child0:getComputedWidth() .. ")");
    assert(50 == root_child0_child0:getComputedHeight(), "50 == root_child0_child0:getComputedHeight() (" .. root_child0_child0:getComputedHeight() .. ")");

    assert(50 == root_child1:getComputedLeft(), "50 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(0 == root_child1:getComputedTop(), "0 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(50 == root_child1:getComputedWidth(), "50 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(50 == root_child1:getComputedHeight(), "50 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(100 == root_child2:getComputedLeft(), "100 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(0 == root_child2:getComputedTop(), "0 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(50 == root_child2:getComputedWidth(), "50 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(50 == root_child2:getComputedHeight(), "50 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    assert(0 == root_child3:getComputedLeft(), "0 == root_child3:getComputedLeft() (" .. root_child3:getComputedLeft() .. ")");
    assert(50 == root_child3:getComputedTop(), "50 == root_child3:getComputedTop() (" .. root_child3:getComputedTop() .. ")");
    assert(50 == root_child3:getComputedWidth(), "50 == root_child3:getComputedWidth() (" .. root_child3:getComputedWidth() .. ")");
    assert(50 == root_child3:getComputedHeight(), "50 == root_child3:getComputedHeight() (" .. root_child3:getComputedHeight() .. ")");

    assert(50 == root_child4:getComputedLeft(), "50 == root_child4:getComputedLeft() (" .. root_child4:getComputedLeft() .. ")");
    assert(50 == root_child4:getComputedTop(), "50 == root_child4:getComputedTop() (" .. root_child4:getComputedTop() .. ")");
    assert(50 == root_child4:getComputedWidth(), "50 == root_child4:getComputedWidth() (" .. root_child4:getComputedWidth() .. ")");
    assert(50 == root_child4:getComputedHeight(), "50 == root_child4:getComputedHeight() (" .. root_child4:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(150 == root:getComputedWidth(), "150 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(100 == root_child0:getComputedLeft(), "100 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(50 == root_child0:getComputedWidth(), "50 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(50 == root_child0:getComputedHeight(), "50 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child0_child0:getComputedLeft(), "0 == root_child0_child0:getComputedLeft() (" .. root_child0_child0:getComputedLeft() .. ")");
    assert(0 == root_child0_child0:getComputedTop(), "0 == root_child0_child0:getComputedTop() (" .. root_child0_child0:getComputedTop() .. ")");
    assert(50 == root_child0_child0:getComputedWidth(), "50 == root_child0_child0:getComputedWidth() (" .. root_child0_child0:getComputedWidth() .. ")");
    assert(50 == root_child0_child0:getComputedHeight(), "50 == root_child0_child0:getComputedHeight() (" .. root_child0_child0:getComputedHeight() .. ")");

    assert(50 == root_child1:getComputedLeft(), "50 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(0 == root_child1:getComputedTop(), "0 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(50 == root_child1:getComputedWidth(), "50 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(50 == root_child1:getComputedHeight(), "50 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(0 == root_child2:getComputedLeft(), "0 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(0 == root_child2:getComputedTop(), "0 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(50 == root_child2:getComputedWidth(), "50 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(50 == root_child2:getComputedHeight(), "50 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    assert(100 == root_child3:getComputedLeft(), "100 == root_child3:getComputedLeft() (" .. root_child3:getComputedLeft() .. ")");
    assert(50 == root_child3:getComputedTop(), "50 == root_child3:getComputedTop() (" .. root_child3:getComputedTop() .. ")");
    assert(50 == root_child3:getComputedWidth(), "50 == root_child3:getComputedWidth() (" .. root_child3:getComputedWidth() .. ")");
    assert(50 == root_child3:getComputedHeight(), "50 == root_child3:getComputedHeight() (" .. root_child3:getComputedHeight() .. ")");

    assert(50 == root_child4:getComputedLeft(), "50 == root_child4:getComputedLeft() (" .. root_child4:getComputedLeft() .. ")");
    assert(50 == root_child4:getComputedTop(), "50 == root_child4:getComputedTop() (" .. root_child4:getComputedTop() .. ")");
    assert(50 == root_child4:getComputedWidth(), "50 == root_child4:getComputedWidth() (" .. root_child4:getComputedWidth() .. ")");
    assert(50 == root_child4:getComputedHeight(), "50 == root_child4:getComputedHeight() (" .. root_child4:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("align_content_stretch_row_with_flex")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setFlexDirection(Flow.FlexDirection.Row)
    root:setAlignContent(Flow.Align.Stretch)
    root:setFlexWrap(Flow.Wrap.Wrap)
    root:setWidth(150)
    root:setHeight(100)

    local root_child0 = Flow.Node.new(config)
    root_child0:setWidth(50)
    root:insertChild(root_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setFlexGrow(1)
    root_child1:setFlexShrink(1)
    root_child1:setFlexBasis("0%")
    root_child1:setWidth(50)
    root:insertChild(root_child1, 2)

    local root_child2 = Flow.Node.new(config)
    root_child2:setWidth(50)
    root:insertChild(root_child2, 3)

    local root_child3 = Flow.Node.new(config)
    root_child3:setFlexGrow(1)
    root_child3:setFlexShrink(1)
    root_child3:setFlexBasis("0%")
    root_child3:setWidth(50)
    root:insertChild(root_child3, 4)

    local root_child4 = Flow.Node.new(config)
    root_child4:setWidth(50)
    root:insertChild(root_child4, 5)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(150 == root:getComputedWidth(), "150 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(50 == root_child0:getComputedWidth(), "50 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(100 == root_child0:getComputedHeight(), "100 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(50 == root_child1:getComputedLeft(), "50 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(0 == root_child1:getComputedTop(), "0 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(0 == root_child1:getComputedWidth(), "0 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(100 == root_child1:getComputedHeight(), "100 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(50 == root_child2:getComputedLeft(), "50 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(0 == root_child2:getComputedTop(), "0 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(50 == root_child2:getComputedWidth(), "50 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(100 == root_child2:getComputedHeight(), "100 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    assert(100 == root_child3:getComputedLeft(), "100 == root_child3:getComputedLeft() (" .. root_child3:getComputedLeft() .. ")");
    assert(0 == root_child3:getComputedTop(), "0 == root_child3:getComputedTop() (" .. root_child3:getComputedTop() .. ")");
    assert(0 == root_child3:getComputedWidth(), "0 == root_child3:getComputedWidth() (" .. root_child3:getComputedWidth() .. ")");
    assert(100 == root_child3:getComputedHeight(), "100 == root_child3:getComputedHeight() (" .. root_child3:getComputedHeight() .. ")");

    assert(100 == root_child4:getComputedLeft(), "100 == root_child4:getComputedLeft() (" .. root_child4:getComputedLeft() .. ")");
    assert(0 == root_child4:getComputedTop(), "0 == root_child4:getComputedTop() (" .. root_child4:getComputedTop() .. ")");
    assert(50 == root_child4:getComputedWidth(), "50 == root_child4:getComputedWidth() (" .. root_child4:getComputedWidth() .. ")");
    assert(100 == root_child4:getComputedHeight(), "100 == root_child4:getComputedHeight() (" .. root_child4:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(150 == root:getComputedWidth(), "150 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(100 == root_child0:getComputedLeft(), "100 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(50 == root_child0:getComputedWidth(), "50 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(100 == root_child0:getComputedHeight(), "100 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(100 == root_child1:getComputedLeft(), "100 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(0 == root_child1:getComputedTop(), "0 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(0 == root_child1:getComputedWidth(), "0 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(100 == root_child1:getComputedHeight(), "100 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(50 == root_child2:getComputedLeft(), "50 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(0 == root_child2:getComputedTop(), "0 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(50 == root_child2:getComputedWidth(), "50 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(100 == root_child2:getComputedHeight(), "100 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    assert(50 == root_child3:getComputedLeft(), "50 == root_child3:getComputedLeft() (" .. root_child3:getComputedLeft() .. ")");
    assert(0 == root_child3:getComputedTop(), "0 == root_child3:getComputedTop() (" .. root_child3:getComputedTop() .. ")");
    assert(0 == root_child3:getComputedWidth(), "0 == root_child3:getComputedWidth() (" .. root_child3:getComputedWidth() .. ")");
    assert(100 == root_child3:getComputedHeight(), "100 == root_child3:getComputedHeight() (" .. root_child3:getComputedHeight() .. ")");

    assert(0 == root_child4:getComputedLeft(), "0 == root_child4:getComputedLeft() (" .. root_child4:getComputedLeft() .. ")");
    assert(0 == root_child4:getComputedTop(), "0 == root_child4:getComputedTop() (" .. root_child4:getComputedTop() .. ")");
    assert(50 == root_child4:getComputedWidth(), "50 == root_child4:getComputedWidth() (" .. root_child4:getComputedWidth() .. ")");
    assert(100 == root_child4:getComputedHeight(), "100 == root_child4:getComputedHeight() (" .. root_child4:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("align_content_stretch_row_with_flex_no_shrink")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setFlexDirection(Flow.FlexDirection.Row)
    root:setAlignContent(Flow.Align.Stretch)
    root:setFlexWrap(Flow.Wrap.Wrap)
    root:setWidth(150)
    root:setHeight(100)

    local root_child0 = Flow.Node.new(config)
    root_child0:setWidth(50)
    root:insertChild(root_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setFlexGrow(1)
    root_child1:setFlexShrink(1)
    root_child1:setFlexBasis("0%")
    root_child1:setWidth(50)
    root:insertChild(root_child1, 2)

    local root_child2 = Flow.Node.new(config)
    root_child2:setWidth(50)
    root:insertChild(root_child2, 3)

    local root_child3 = Flow.Node.new(config)
    root_child3:setFlexGrow(1)
    root_child3:setFlexBasis("0%")
    root_child3:setWidth(50)
    root:insertChild(root_child3, 4)

    local root_child4 = Flow.Node.new(config)
    root_child4:setWidth(50)
    root:insertChild(root_child4, 5)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(150 == root:getComputedWidth(), "150 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(50 == root_child0:getComputedWidth(), "50 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(100 == root_child0:getComputedHeight(), "100 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(50 == root_child1:getComputedLeft(), "50 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(0 == root_child1:getComputedTop(), "0 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(0 == root_child1:getComputedWidth(), "0 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(100 == root_child1:getComputedHeight(), "100 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(50 == root_child2:getComputedLeft(), "50 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(0 == root_child2:getComputedTop(), "0 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(50 == root_child2:getComputedWidth(), "50 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(100 == root_child2:getComputedHeight(), "100 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    assert(100 == root_child3:getComputedLeft(), "100 == root_child3:getComputedLeft() (" .. root_child3:getComputedLeft() .. ")");
    assert(0 == root_child3:getComputedTop(), "0 == root_child3:getComputedTop() (" .. root_child3:getComputedTop() .. ")");
    assert(0 == root_child3:getComputedWidth(), "0 == root_child3:getComputedWidth() (" .. root_child3:getComputedWidth() .. ")");
    assert(100 == root_child3:getComputedHeight(), "100 == root_child3:getComputedHeight() (" .. root_child3:getComputedHeight() .. ")");

    assert(100 == root_child4:getComputedLeft(), "100 == root_child4:getComputedLeft() (" .. root_child4:getComputedLeft() .. ")");
    assert(0 == root_child4:getComputedTop(), "0 == root_child4:getComputedTop() (" .. root_child4:getComputedTop() .. ")");
    assert(50 == root_child4:getComputedWidth(), "50 == root_child4:getComputedWidth() (" .. root_child4:getComputedWidth() .. ")");
    assert(100 == root_child4:getComputedHeight(), "100 == root_child4:getComputedHeight() (" .. root_child4:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(150 == root:getComputedWidth(), "150 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(100 == root_child0:getComputedLeft(), "100 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(50 == root_child0:getComputedWidth(), "50 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(100 == root_child0:getComputedHeight(), "100 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(100 == root_child1:getComputedLeft(), "100 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(0 == root_child1:getComputedTop(), "0 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(0 == root_child1:getComputedWidth(), "0 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(100 == root_child1:getComputedHeight(), "100 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(50 == root_child2:getComputedLeft(), "50 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(0 == root_child2:getComputedTop(), "0 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(50 == root_child2:getComputedWidth(), "50 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(100 == root_child2:getComputedHeight(), "100 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    assert(50 == root_child3:getComputedLeft(), "50 == root_child3:getComputedLeft() (" .. root_child3:getComputedLeft() .. ")");
    assert(0 == root_child3:getComputedTop(), "0 == root_child3:getComputedTop() (" .. root_child3:getComputedTop() .. ")");
    assert(0 == root_child3:getComputedWidth(), "0 == root_child3:getComputedWidth() (" .. root_child3:getComputedWidth() .. ")");
    assert(100 == root_child3:getComputedHeight(), "100 == root_child3:getComputedHeight() (" .. root_child3:getComputedHeight() .. ")");

    assert(0 == root_child4:getComputedLeft(), "0 == root_child4:getComputedLeft() (" .. root_child4:getComputedLeft() .. ")");
    assert(0 == root_child4:getComputedTop(), "0 == root_child4:getComputedTop() (" .. root_child4:getComputedTop() .. ")");
    assert(50 == root_child4:getComputedWidth(), "50 == root_child4:getComputedWidth() (" .. root_child4:getComputedWidth() .. ")");
    assert(100 == root_child4:getComputedHeight(), "100 == root_child4:getComputedHeight() (" .. root_child4:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("align_content_stretch_row_with_margin")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setFlexDirection(Flow.FlexDirection.Row)
    root:setAlignContent(Flow.Align.Stretch)
    root:setFlexWrap(Flow.Wrap.Wrap)
    root:setWidth(150)
    root:setHeight(100)

    local root_child0 = Flow.Node.new(config)
    root_child0:setWidth(50)
    root:insertChild(root_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setMargin(Flow.Edge.Left, 10)
    root_child1:setMargin(Flow.Edge.Top, 10)
    root_child1:setMargin(Flow.Edge.Right, 10)
    root_child1:setMargin(Flow.Edge.Bottom, 10)
    root_child1:setWidth(50)
    root:insertChild(root_child1, 2)

    local root_child2 = Flow.Node.new(config)
    root_child2:setWidth(50)
    root:insertChild(root_child2, 3)

    local root_child3 = Flow.Node.new(config)
    root_child3:setMargin(Flow.Edge.Left, 10)
    root_child3:setMargin(Flow.Edge.Top, 10)
    root_child3:setMargin(Flow.Edge.Right, 10)
    root_child3:setMargin(Flow.Edge.Bottom, 10)
    root_child3:setWidth(50)
    root:insertChild(root_child3, 4)

    local root_child4 = Flow.Node.new(config)
    root_child4:setWidth(50)
    root:insertChild(root_child4, 5)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(150 == root:getComputedWidth(), "150 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(50 == root_child0:getComputedWidth(), "50 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(40 == root_child0:getComputedHeight(), "40 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(60 == root_child1:getComputedLeft(), "60 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(10 == root_child1:getComputedTop(), "10 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(50 == root_child1:getComputedWidth(), "50 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(20 == root_child1:getComputedHeight(), "20 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(0 == root_child2:getComputedLeft(), "0 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(40 == root_child2:getComputedTop(), "40 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(50 == root_child2:getComputedWidth(), "50 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(40 == root_child2:getComputedHeight(), "40 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    assert(60 == root_child3:getComputedLeft(), "60 == root_child3:getComputedLeft() (" .. root_child3:getComputedLeft() .. ")");
    assert(50 == root_child3:getComputedTop(), "50 == root_child3:getComputedTop() (" .. root_child3:getComputedTop() .. ")");
    assert(50 == root_child3:getComputedWidth(), "50 == root_child3:getComputedWidth() (" .. root_child3:getComputedWidth() .. ")");
    assert(20 == root_child3:getComputedHeight(), "20 == root_child3:getComputedHeight() (" .. root_child3:getComputedHeight() .. ")");

    assert(0 == root_child4:getComputedLeft(), "0 == root_child4:getComputedLeft() (" .. root_child4:getComputedLeft() .. ")");
    assert(80 == root_child4:getComputedTop(), "80 == root_child4:getComputedTop() (" .. root_child4:getComputedTop() .. ")");
    assert(50 == root_child4:getComputedWidth(), "50 == root_child4:getComputedWidth() (" .. root_child4:getComputedWidth() .. ")");
    assert(20 == root_child4:getComputedHeight(), "20 == root_child4:getComputedHeight() (" .. root_child4:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(150 == root:getComputedWidth(), "150 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(100 == root_child0:getComputedLeft(), "100 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(50 == root_child0:getComputedWidth(), "50 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(40 == root_child0:getComputedHeight(), "40 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(40 == root_child1:getComputedLeft(), "40 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(10 == root_child1:getComputedTop(), "10 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(50 == root_child1:getComputedWidth(), "50 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(20 == root_child1:getComputedHeight(), "20 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(100 == root_child2:getComputedLeft(), "100 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(40 == root_child2:getComputedTop(), "40 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(50 == root_child2:getComputedWidth(), "50 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(40 == root_child2:getComputedHeight(), "40 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    assert(40 == root_child3:getComputedLeft(), "40 == root_child3:getComputedLeft() (" .. root_child3:getComputedLeft() .. ")");
    assert(50 == root_child3:getComputedTop(), "50 == root_child3:getComputedTop() (" .. root_child3:getComputedTop() .. ")");
    assert(50 == root_child3:getComputedWidth(), "50 == root_child3:getComputedWidth() (" .. root_child3:getComputedWidth() .. ")");
    assert(20 == root_child3:getComputedHeight(), "20 == root_child3:getComputedHeight() (" .. root_child3:getComputedHeight() .. ")");

    assert(100 == root_child4:getComputedLeft(), "100 == root_child4:getComputedLeft() (" .. root_child4:getComputedLeft() .. ")");
    assert(80 == root_child4:getComputedTop(), "80 == root_child4:getComputedTop() (" .. root_child4:getComputedTop() .. ")");
    assert(50 == root_child4:getComputedWidth(), "50 == root_child4:getComputedWidth() (" .. root_child4:getComputedWidth() .. ")");
    assert(20 == root_child4:getComputedHeight(), "20 == root_child4:getComputedHeight() (" .. root_child4:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("align_content_stretch_row_with_padding")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setFlexDirection(Flow.FlexDirection.Row)
    root:setAlignContent(Flow.Align.Stretch)
    root:setFlexWrap(Flow.Wrap.Wrap)
    root:setWidth(150)
    root:setHeight(100)

    local root_child0 = Flow.Node.new(config)
    root_child0:setWidth(50)
    root:insertChild(root_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setPadding(Flow.Edge.Left, 10)
    root_child1:setPadding(Flow.Edge.Top, 10)
    root_child1:setPadding(Flow.Edge.Right, 10)
    root_child1:setPadding(Flow.Edge.Bottom, 10)
    root_child1:setWidth(50)
    root:insertChild(root_child1, 2)

    local root_child2 = Flow.Node.new(config)
    root_child2:setWidth(50)
    root:insertChild(root_child2, 3)

    local root_child3 = Flow.Node.new(config)
    root_child3:setPadding(Flow.Edge.Left, 10)
    root_child3:setPadding(Flow.Edge.Top, 10)
    root_child3:setPadding(Flow.Edge.Right, 10)
    root_child3:setPadding(Flow.Edge.Bottom, 10)
    root_child3:setWidth(50)
    root:insertChild(root_child3, 4)

    local root_child4 = Flow.Node.new(config)
    root_child4:setWidth(50)
    root:insertChild(root_child4, 5)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(150 == root:getComputedWidth(), "150 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(50 == root_child0:getComputedWidth(), "50 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(50 == root_child0:getComputedHeight(), "50 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(50 == root_child1:getComputedLeft(), "50 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(0 == root_child1:getComputedTop(), "0 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(50 == root_child1:getComputedWidth(), "50 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(50 == root_child1:getComputedHeight(), "50 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(100 == root_child2:getComputedLeft(), "100 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(0 == root_child2:getComputedTop(), "0 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(50 == root_child2:getComputedWidth(), "50 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(50 == root_child2:getComputedHeight(), "50 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    assert(0 == root_child3:getComputedLeft(), "0 == root_child3:getComputedLeft() (" .. root_child3:getComputedLeft() .. ")");
    assert(50 == root_child3:getComputedTop(), "50 == root_child3:getComputedTop() (" .. root_child3:getComputedTop() .. ")");
    assert(50 == root_child3:getComputedWidth(), "50 == root_child3:getComputedWidth() (" .. root_child3:getComputedWidth() .. ")");
    assert(50 == root_child3:getComputedHeight(), "50 == root_child3:getComputedHeight() (" .. root_child3:getComputedHeight() .. ")");

    assert(50 == root_child4:getComputedLeft(), "50 == root_child4:getComputedLeft() (" .. root_child4:getComputedLeft() .. ")");
    assert(50 == root_child4:getComputedTop(), "50 == root_child4:getComputedTop() (" .. root_child4:getComputedTop() .. ")");
    assert(50 == root_child4:getComputedWidth(), "50 == root_child4:getComputedWidth() (" .. root_child4:getComputedWidth() .. ")");
    assert(50 == root_child4:getComputedHeight(), "50 == root_child4:getComputedHeight() (" .. root_child4:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(150 == root:getComputedWidth(), "150 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(100 == root_child0:getComputedLeft(), "100 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(50 == root_child0:getComputedWidth(), "50 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(50 == root_child0:getComputedHeight(), "50 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(50 == root_child1:getComputedLeft(), "50 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(0 == root_child1:getComputedTop(), "0 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(50 == root_child1:getComputedWidth(), "50 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(50 == root_child1:getComputedHeight(), "50 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(0 == root_child2:getComputedLeft(), "0 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(0 == root_child2:getComputedTop(), "0 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(50 == root_child2:getComputedWidth(), "50 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(50 == root_child2:getComputedHeight(), "50 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    assert(100 == root_child3:getComputedLeft(), "100 == root_child3:getComputedLeft() (" .. root_child3:getComputedLeft() .. ")");
    assert(50 == root_child3:getComputedTop(), "50 == root_child3:getComputedTop() (" .. root_child3:getComputedTop() .. ")");
    assert(50 == root_child3:getComputedWidth(), "50 == root_child3:getComputedWidth() (" .. root_child3:getComputedWidth() .. ")");
    assert(50 == root_child3:getComputedHeight(), "50 == root_child3:getComputedHeight() (" .. root_child3:getComputedHeight() .. ")");

    assert(50 == root_child4:getComputedLeft(), "50 == root_child4:getComputedLeft() (" .. root_child4:getComputedLeft() .. ")");
    assert(50 == root_child4:getComputedTop(), "50 == root_child4:getComputedTop() (" .. root_child4:getComputedTop() .. ")");
    assert(50 == root_child4:getComputedWidth(), "50 == root_child4:getComputedWidth() (" .. root_child4:getComputedWidth() .. ")");
    assert(50 == root_child4:getComputedHeight(), "50 == root_child4:getComputedHeight() (" .. root_child4:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("align_content_stretch_row_with_single_row")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setFlexDirection(Flow.FlexDirection.Row)
    root:setAlignContent(Flow.Align.Stretch)
    root:setFlexWrap(Flow.Wrap.Wrap)
    root:setWidth(150)
    root:setHeight(100)

    local root_child0 = Flow.Node.new(config)
    root_child0:setWidth(50)
    root:insertChild(root_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setWidth(50)
    root:insertChild(root_child1, 2)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(150 == root:getComputedWidth(), "150 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(50 == root_child0:getComputedWidth(), "50 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(100 == root_child0:getComputedHeight(), "100 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(50 == root_child1:getComputedLeft(), "50 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(0 == root_child1:getComputedTop(), "0 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(50 == root_child1:getComputedWidth(), "50 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(100 == root_child1:getComputedHeight(), "100 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(150 == root:getComputedWidth(), "150 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(100 == root_child0:getComputedLeft(), "100 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(50 == root_child0:getComputedWidth(), "50 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(100 == root_child0:getComputedHeight(), "100 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(50 == root_child1:getComputedLeft(), "50 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(0 == root_child1:getComputedTop(), "0 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(50 == root_child1:getComputedWidth(), "50 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(100 == root_child1:getComputedHeight(), "100 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("align_content_stretch_row_with_fixed_height")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setFlexDirection(Flow.FlexDirection.Row)
    root:setAlignContent(Flow.Align.Stretch)
    root:setFlexWrap(Flow.Wrap.Wrap)
    root:setWidth(150)
    root:setHeight(100)

    local root_child0 = Flow.Node.new(config)
    root_child0:setWidth(50)
    root:insertChild(root_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setWidth(50)
    root_child1:setHeight(60)
    root:insertChild(root_child1, 2)

    local root_child2 = Flow.Node.new(config)
    root_child2:setWidth(50)
    root:insertChild(root_child2, 3)

    local root_child3 = Flow.Node.new(config)
    root_child3:setWidth(50)
    root:insertChild(root_child3, 4)

    local root_child4 = Flow.Node.new(config)
    root_child4:setWidth(50)
    root:insertChild(root_child4, 5)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(150 == root:getComputedWidth(), "150 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(50 == root_child0:getComputedWidth(), "50 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(80 == root_child0:getComputedHeight(), "80 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(50 == root_child1:getComputedLeft(), "50 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(0 == root_child1:getComputedTop(), "0 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(50 == root_child1:getComputedWidth(), "50 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(60 == root_child1:getComputedHeight(), "60 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(100 == root_child2:getComputedLeft(), "100 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(0 == root_child2:getComputedTop(), "0 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(50 == root_child2:getComputedWidth(), "50 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(80 == root_child2:getComputedHeight(), "80 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    assert(0 == root_child3:getComputedLeft(), "0 == root_child3:getComputedLeft() (" .. root_child3:getComputedLeft() .. ")");
    assert(80 == root_child3:getComputedTop(), "80 == root_child3:getComputedTop() (" .. root_child3:getComputedTop() .. ")");
    assert(50 == root_child3:getComputedWidth(), "50 == root_child3:getComputedWidth() (" .. root_child3:getComputedWidth() .. ")");
    assert(20 == root_child3:getComputedHeight(), "20 == root_child3:getComputedHeight() (" .. root_child3:getComputedHeight() .. ")");

    assert(50 == root_child4:getComputedLeft(), "50 == root_child4:getComputedLeft() (" .. root_child4:getComputedLeft() .. ")");
    assert(80 == root_child4:getComputedTop(), "80 == root_child4:getComputedTop() (" .. root_child4:getComputedTop() .. ")");
    assert(50 == root_child4:getComputedWidth(), "50 == root_child4:getComputedWidth() (" .. root_child4:getComputedWidth() .. ")");
    assert(20 == root_child4:getComputedHeight(), "20 == root_child4:getComputedHeight() (" .. root_child4:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(150 == root:getComputedWidth(), "150 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(100 == root_child0:getComputedLeft(), "100 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(50 == root_child0:getComputedWidth(), "50 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(80 == root_child0:getComputedHeight(), "80 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(50 == root_child1:getComputedLeft(), "50 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(0 == root_child1:getComputedTop(), "0 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(50 == root_child1:getComputedWidth(), "50 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(60 == root_child1:getComputedHeight(), "60 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(0 == root_child2:getComputedLeft(), "0 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(0 == root_child2:getComputedTop(), "0 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(50 == root_child2:getComputedWidth(), "50 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(80 == root_child2:getComputedHeight(), "80 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    assert(100 == root_child3:getComputedLeft(), "100 == root_child3:getComputedLeft() (" .. root_child3:getComputedLeft() .. ")");
    assert(80 == root_child3:getComputedTop(), "80 == root_child3:getComputedTop() (" .. root_child3:getComputedTop() .. ")");
    assert(50 == root_child3:getComputedWidth(), "50 == root_child3:getComputedWidth() (" .. root_child3:getComputedWidth() .. ")");
    assert(20 == root_child3:getComputedHeight(), "20 == root_child3:getComputedHeight() (" .. root_child3:getComputedHeight() .. ")");

    assert(50 == root_child4:getComputedLeft(), "50 == root_child4:getComputedLeft() (" .. root_child4:getComputedLeft() .. ")");
    assert(80 == root_child4:getComputedTop(), "80 == root_child4:getComputedTop() (" .. root_child4:getComputedTop() .. ")");
    assert(50 == root_child4:getComputedWidth(), "50 == root_child4:getComputedWidth() (" .. root_child4:getComputedWidth() .. ")");
    assert(20 == root_child4:getComputedHeight(), "20 == root_child4:getComputedHeight() (" .. root_child4:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("align_content_stretch_row_with_max_height")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setFlexDirection(Flow.FlexDirection.Row)
    root:setAlignContent(Flow.Align.Stretch)
    root:setFlexWrap(Flow.Wrap.Wrap)
    root:setWidth(150)
    root:setHeight(100)

    local root_child0 = Flow.Node.new(config)
    root_child0:setWidth(50)
    root:insertChild(root_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setWidth(50)
    root_child1:setMaxHeight(20)
    root:insertChild(root_child1, 2)

    local root_child2 = Flow.Node.new(config)
    root_child2:setWidth(50)
    root:insertChild(root_child2, 3)

    local root_child3 = Flow.Node.new(config)
    root_child3:setWidth(50)
    root:insertChild(root_child3, 4)

    local root_child4 = Flow.Node.new(config)
    root_child4:setWidth(50)
    root:insertChild(root_child4, 5)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(150 == root:getComputedWidth(), "150 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(50 == root_child0:getComputedWidth(), "50 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(50 == root_child0:getComputedHeight(), "50 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(50 == root_child1:getComputedLeft(), "50 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(0 == root_child1:getComputedTop(), "0 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(50 == root_child1:getComputedWidth(), "50 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(20 == root_child1:getComputedHeight(), "20 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(100 == root_child2:getComputedLeft(), "100 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(0 == root_child2:getComputedTop(), "0 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(50 == root_child2:getComputedWidth(), "50 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(50 == root_child2:getComputedHeight(), "50 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    assert(0 == root_child3:getComputedLeft(), "0 == root_child3:getComputedLeft() (" .. root_child3:getComputedLeft() .. ")");
    assert(50 == root_child3:getComputedTop(), "50 == root_child3:getComputedTop() (" .. root_child3:getComputedTop() .. ")");
    assert(50 == root_child3:getComputedWidth(), "50 == root_child3:getComputedWidth() (" .. root_child3:getComputedWidth() .. ")");
    assert(50 == root_child3:getComputedHeight(), "50 == root_child3:getComputedHeight() (" .. root_child3:getComputedHeight() .. ")");

    assert(50 == root_child4:getComputedLeft(), "50 == root_child4:getComputedLeft() (" .. root_child4:getComputedLeft() .. ")");
    assert(50 == root_child4:getComputedTop(), "50 == root_child4:getComputedTop() (" .. root_child4:getComputedTop() .. ")");
    assert(50 == root_child4:getComputedWidth(), "50 == root_child4:getComputedWidth() (" .. root_child4:getComputedWidth() .. ")");
    assert(50 == root_child4:getComputedHeight(), "50 == root_child4:getComputedHeight() (" .. root_child4:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(150 == root:getComputedWidth(), "150 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(100 == root_child0:getComputedLeft(), "100 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(50 == root_child0:getComputedWidth(), "50 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(50 == root_child0:getComputedHeight(), "50 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(50 == root_child1:getComputedLeft(), "50 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(0 == root_child1:getComputedTop(), "0 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(50 == root_child1:getComputedWidth(), "50 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(20 == root_child1:getComputedHeight(), "20 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(0 == root_child2:getComputedLeft(), "0 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(0 == root_child2:getComputedTop(), "0 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(50 == root_child2:getComputedWidth(), "50 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(50 == root_child2:getComputedHeight(), "50 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    assert(100 == root_child3:getComputedLeft(), "100 == root_child3:getComputedLeft() (" .. root_child3:getComputedLeft() .. ")");
    assert(50 == root_child3:getComputedTop(), "50 == root_child3:getComputedTop() (" .. root_child3:getComputedTop() .. ")");
    assert(50 == root_child3:getComputedWidth(), "50 == root_child3:getComputedWidth() (" .. root_child3:getComputedWidth() .. ")");
    assert(50 == root_child3:getComputedHeight(), "50 == root_child3:getComputedHeight() (" .. root_child3:getComputedHeight() .. ")");

    assert(50 == root_child4:getComputedLeft(), "50 == root_child4:getComputedLeft() (" .. root_child4:getComputedLeft() .. ")");
    assert(50 == root_child4:getComputedTop(), "50 == root_child4:getComputedTop() (" .. root_child4:getComputedTop() .. ")");
    assert(50 == root_child4:getComputedWidth(), "50 == root_child4:getComputedWidth() (" .. root_child4:getComputedWidth() .. ")");
    assert(50 == root_child4:getComputedHeight(), "50 == root_child4:getComputedHeight() (" .. root_child4:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("align_content_stretch_row_with_min_height")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setFlexDirection(Flow.FlexDirection.Row)
    root:setAlignContent(Flow.Align.Stretch)
    root:setFlexWrap(Flow.Wrap.Wrap)
    root:setWidth(150)
    root:setHeight(100)

    local root_child0 = Flow.Node.new(config)
    root_child0:setWidth(50)
    root:insertChild(root_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setWidth(50)
    root_child1:setMinHeight(80)
    root:insertChild(root_child1, 2)

    local root_child2 = Flow.Node.new(config)
    root_child2:setWidth(50)
    root:insertChild(root_child2, 3)

    local root_child3 = Flow.Node.new(config)
    root_child3:setWidth(50)
    root:insertChild(root_child3, 4)

    local root_child4 = Flow.Node.new(config)
    root_child4:setWidth(50)
    root:insertChild(root_child4, 5)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(150 == root:getComputedWidth(), "150 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(50 == root_child0:getComputedWidth(), "50 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(90 == root_child0:getComputedHeight(), "90 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(50 == root_child1:getComputedLeft(), "50 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(0 == root_child1:getComputedTop(), "0 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(50 == root_child1:getComputedWidth(), "50 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(90 == root_child1:getComputedHeight(), "90 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(100 == root_child2:getComputedLeft(), "100 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(0 == root_child2:getComputedTop(), "0 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(50 == root_child2:getComputedWidth(), "50 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(90 == root_child2:getComputedHeight(), "90 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    assert(0 == root_child3:getComputedLeft(), "0 == root_child3:getComputedLeft() (" .. root_child3:getComputedLeft() .. ")");
    assert(90 == root_child3:getComputedTop(), "90 == root_child3:getComputedTop() (" .. root_child3:getComputedTop() .. ")");
    assert(50 == root_child3:getComputedWidth(), "50 == root_child3:getComputedWidth() (" .. root_child3:getComputedWidth() .. ")");
    assert(10 == root_child3:getComputedHeight(), "10 == root_child3:getComputedHeight() (" .. root_child3:getComputedHeight() .. ")");

    assert(50 == root_child4:getComputedLeft(), "50 == root_child4:getComputedLeft() (" .. root_child4:getComputedLeft() .. ")");
    assert(90 == root_child4:getComputedTop(), "90 == root_child4:getComputedTop() (" .. root_child4:getComputedTop() .. ")");
    assert(50 == root_child4:getComputedWidth(), "50 == root_child4:getComputedWidth() (" .. root_child4:getComputedWidth() .. ")");
    assert(10 == root_child4:getComputedHeight(), "10 == root_child4:getComputedHeight() (" .. root_child4:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(150 == root:getComputedWidth(), "150 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(100 == root_child0:getComputedLeft(), "100 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(50 == root_child0:getComputedWidth(), "50 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(90 == root_child0:getComputedHeight(), "90 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(50 == root_child1:getComputedLeft(), "50 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(0 == root_child1:getComputedTop(), "0 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(50 == root_child1:getComputedWidth(), "50 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(90 == root_child1:getComputedHeight(), "90 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(0 == root_child2:getComputedLeft(), "0 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(0 == root_child2:getComputedTop(), "0 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(50 == root_child2:getComputedWidth(), "50 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(90 == root_child2:getComputedHeight(), "90 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    assert(100 == root_child3:getComputedLeft(), "100 == root_child3:getComputedLeft() (" .. root_child3:getComputedLeft() .. ")");
    assert(90 == root_child3:getComputedTop(), "90 == root_child3:getComputedTop() (" .. root_child3:getComputedTop() .. ")");
    assert(50 == root_child3:getComputedWidth(), "50 == root_child3:getComputedWidth() (" .. root_child3:getComputedWidth() .. ")");
    assert(10 == root_child3:getComputedHeight(), "10 == root_child3:getComputedHeight() (" .. root_child3:getComputedHeight() .. ")");

    assert(50 == root_child4:getComputedLeft(), "50 == root_child4:getComputedLeft() (" .. root_child4:getComputedLeft() .. ")");
    assert(90 == root_child4:getComputedTop(), "90 == root_child4:getComputedTop() (" .. root_child4:getComputedTop() .. ")");
    assert(50 == root_child4:getComputedWidth(), "50 == root_child4:getComputedWidth() (" .. root_child4:getComputedWidth() .. ")");
    assert(10 == root_child4:getComputedHeight(), "10 == root_child4:getComputedHeight() (" .. root_child4:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("align_content_stretch_column")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setAlignContent(Flow.Align.Stretch)
    root:setFlexWrap(Flow.Wrap.Wrap)
    root:setWidth(100)
    root:setHeight(150)

    local root_child0 = Flow.Node.new(config)
    root_child0:setHeight(50)
    root:insertChild(root_child0, 1)

    local root_child0_child0 = Flow.Node.new(config)
    root_child0_child0:setFlexGrow(1)
    root_child0_child0:setFlexShrink(1)
    root_child0_child0:setFlexBasis("0%")
    root_child0:insertChild(root_child0_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setFlexGrow(1)
    root_child1:setFlexShrink(1)
    root_child1:setFlexBasis("0%")
    root_child1:setHeight(50)
    root:insertChild(root_child1, 2)

    local root_child2 = Flow.Node.new(config)
    root_child2:setHeight(50)
    root:insertChild(root_child2, 3)

    local root_child3 = Flow.Node.new(config)
    root_child3:setHeight(50)
    root:insertChild(root_child3, 4)

    local root_child4 = Flow.Node.new(config)
    root_child4:setHeight(50)
    root:insertChild(root_child4, 5)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(150 == root:getComputedHeight(), "150 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(50 == root_child0:getComputedWidth(), "50 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(50 == root_child0:getComputedHeight(), "50 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child0_child0:getComputedLeft(), "0 == root_child0_child0:getComputedLeft() (" .. root_child0_child0:getComputedLeft() .. ")");
    assert(0 == root_child0_child0:getComputedTop(), "0 == root_child0_child0:getComputedTop() (" .. root_child0_child0:getComputedTop() .. ")");
    assert(50 == root_child0_child0:getComputedWidth(), "50 == root_child0_child0:getComputedWidth() (" .. root_child0_child0:getComputedWidth() .. ")");
    assert(50 == root_child0_child0:getComputedHeight(), "50 == root_child0_child0:getComputedHeight() (" .. root_child0_child0:getComputedHeight() .. ")");

    assert(0 == root_child1:getComputedLeft(), "0 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(50 == root_child1:getComputedTop(), "50 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(50 == root_child1:getComputedWidth(), "50 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(0 == root_child1:getComputedHeight(), "0 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(0 == root_child2:getComputedLeft(), "0 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(50 == root_child2:getComputedTop(), "50 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(50 == root_child2:getComputedWidth(), "50 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(50 == root_child2:getComputedHeight(), "50 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    assert(0 == root_child3:getComputedLeft(), "0 == root_child3:getComputedLeft() (" .. root_child3:getComputedLeft() .. ")");
    assert(100 == root_child3:getComputedTop(), "100 == root_child3:getComputedTop() (" .. root_child3:getComputedTop() .. ")");
    assert(50 == root_child3:getComputedWidth(), "50 == root_child3:getComputedWidth() (" .. root_child3:getComputedWidth() .. ")");
    assert(50 == root_child3:getComputedHeight(), "50 == root_child3:getComputedHeight() (" .. root_child3:getComputedHeight() .. ")");

    assert(50 == root_child4:getComputedLeft(), "50 == root_child4:getComputedLeft() (" .. root_child4:getComputedLeft() .. ")");
    assert(0 == root_child4:getComputedTop(), "0 == root_child4:getComputedTop() (" .. root_child4:getComputedTop() .. ")");
    assert(50 == root_child4:getComputedWidth(), "50 == root_child4:getComputedWidth() (" .. root_child4:getComputedWidth() .. ")");
    assert(50 == root_child4:getComputedHeight(), "50 == root_child4:getComputedHeight() (" .. root_child4:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(150 == root:getComputedHeight(), "150 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(50 == root_child0:getComputedLeft(), "50 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(50 == root_child0:getComputedWidth(), "50 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(50 == root_child0:getComputedHeight(), "50 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child0_child0:getComputedLeft(), "0 == root_child0_child0:getComputedLeft() (" .. root_child0_child0:getComputedLeft() .. ")");
    assert(0 == root_child0_child0:getComputedTop(), "0 == root_child0_child0:getComputedTop() (" .. root_child0_child0:getComputedTop() .. ")");
    assert(50 == root_child0_child0:getComputedWidth(), "50 == root_child0_child0:getComputedWidth() (" .. root_child0_child0:getComputedWidth() .. ")");
    assert(50 == root_child0_child0:getComputedHeight(), "50 == root_child0_child0:getComputedHeight() (" .. root_child0_child0:getComputedHeight() .. ")");

    assert(50 == root_child1:getComputedLeft(), "50 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(50 == root_child1:getComputedTop(), "50 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(50 == root_child1:getComputedWidth(), "50 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(0 == root_child1:getComputedHeight(), "0 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(50 == root_child2:getComputedLeft(), "50 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(50 == root_child2:getComputedTop(), "50 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(50 == root_child2:getComputedWidth(), "50 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(50 == root_child2:getComputedHeight(), "50 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    assert(50 == root_child3:getComputedLeft(), "50 == root_child3:getComputedLeft() (" .. root_child3:getComputedLeft() .. ")");
    assert(100 == root_child3:getComputedTop(), "100 == root_child3:getComputedTop() (" .. root_child3:getComputedTop() .. ")");
    assert(50 == root_child3:getComputedWidth(), "50 == root_child3:getComputedWidth() (" .. root_child3:getComputedWidth() .. ")");
    assert(50 == root_child3:getComputedHeight(), "50 == root_child3:getComputedHeight() (" .. root_child3:getComputedHeight() .. ")");

    assert(0 == root_child4:getComputedLeft(), "0 == root_child4:getComputedLeft() (" .. root_child4:getComputedLeft() .. ")");
    assert(0 == root_child4:getComputedTop(), "0 == root_child4:getComputedTop() (" .. root_child4:getComputedTop() .. ")");
    assert(50 == root_child4:getComputedWidth(), "50 == root_child4:getComputedWidth() (" .. root_child4:getComputedWidth() .. ")");
    assert(50 == root_child4:getComputedHeight(), "50 == root_child4:getComputedHeight() (" .. root_child4:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("align_content_stretch_is_not_overriding_align_items")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setAlignContent(Flow.Align.Stretch)

    local root_child0 = Flow.Node.new(config)
    root_child0:setFlexDirection(Flow.FlexDirection.Row)
    root_child0:setAlignContent(Flow.Align.Stretch)
    root_child0:setAlignItems(Flow.Align.Center)
    root_child0:setWidth(100)
    root_child0:setHeight(100)
    root:insertChild(root_child0, 1)

    local root_child0_child0 = Flow.Node.new(config)
    root_child0_child0:setAlignContent(Flow.Align.Stretch)
    root_child0_child0:setWidth(10)
    root_child0_child0:setHeight(10)
    root_child0:insertChild(root_child0_child0, 1)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(100 == root_child0:getComputedWidth(), "100 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(100 == root_child0:getComputedHeight(), "100 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child0_child0:getComputedLeft(), "0 == root_child0_child0:getComputedLeft() (" .. root_child0_child0:getComputedLeft() .. ")");
    assert(45 == root_child0_child0:getComputedTop(), "45 == root_child0_child0:getComputedTop() (" .. root_child0_child0:getComputedTop() .. ")");
    assert(10 == root_child0_child0:getComputedWidth(), "10 == root_child0_child0:getComputedWidth() (" .. root_child0_child0:getComputedWidth() .. ")");
    assert(10 == root_child0_child0:getComputedHeight(), "10 == root_child0_child0:getComputedHeight() (" .. root_child0_child0:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(100 == root_child0:getComputedWidth(), "100 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(100 == root_child0:getComputedHeight(), "100 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(90 == root_child0_child0:getComputedLeft(), "90 == root_child0_child0:getComputedLeft() (" .. root_child0_child0:getComputedLeft() .. ")");
    assert(45 == root_child0_child0:getComputedTop(), "45 == root_child0_child0:getComputedTop() (" .. root_child0_child0:getComputedTop() .. ")");
    assert(10 == root_child0_child0:getComputedWidth(), "10 == root_child0_child0:getComputedWidth() (" .. root_child0_child0:getComputedWidth() .. ")");
    assert(10 == root_child0_child0:getComputedHeight(), "10 == root_child0_child0:getComputedHeight() (" .. root_child0_child0:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end

return nil
