-- @Generated by gentest/browser/gentest.js from gentest/fixtures/YGDisplayTest.html

--!strict

local ReplicatedStorage = game:GetService("ReplicatedStorage")

local Packages = ReplicatedStorage.Packages
local Flow = require(Packages.Flow)

do
    print("display_none")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setFlexDirection(Flow.FlexDirection.Row)
    root:setWidth(100)
    root:setHeight(100)

    local root_child0 = Flow.Node.new(config)
    root_child0:setFlexGrow(1)
    root:insertChild(root_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setFlexGrow(1)
    root_child1:setDisplay(Flow.Display.None)
    root:insertChild(root_child1, 2)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(100 == root_child0:getComputedWidth(), "100 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(100 == root_child0:getComputedHeight(), "100 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child1:getComputedLeft(), "0 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(0 == root_child1:getComputedTop(), "0 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(0 == root_child1:getComputedWidth(), "0 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(0 == root_child1:getComputedHeight(), "0 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(100 == root_child0:getComputedWidth(), "100 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(100 == root_child0:getComputedHeight(), "100 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child1:getComputedLeft(), "0 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(0 == root_child1:getComputedTop(), "0 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(0 == root_child1:getComputedWidth(), "0 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(0 == root_child1:getComputedHeight(), "0 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("display_none_fixed_size")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setFlexDirection(Flow.FlexDirection.Row)
    root:setWidth(100)
    root:setHeight(100)

    local root_child0 = Flow.Node.new(config)
    root_child0:setFlexGrow(1)
    root:insertChild(root_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setWidth(20)
    root_child1:setHeight(20)
    root_child1:setDisplay(Flow.Display.None)
    root:insertChild(root_child1, 2)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(100 == root_child0:getComputedWidth(), "100 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(100 == root_child0:getComputedHeight(), "100 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child1:getComputedLeft(), "0 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(0 == root_child1:getComputedTop(), "0 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(0 == root_child1:getComputedWidth(), "0 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(0 == root_child1:getComputedHeight(), "0 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(100 == root_child0:getComputedWidth(), "100 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(100 == root_child0:getComputedHeight(), "100 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child1:getComputedLeft(), "0 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(0 == root_child1:getComputedTop(), "0 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(0 == root_child1:getComputedWidth(), "0 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(0 == root_child1:getComputedHeight(), "0 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("display_none_with_margin")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setFlexDirection(Flow.FlexDirection.Row)
    root:setWidth(100)
    root:setHeight(100)

    local root_child0 = Flow.Node.new(config)
    root_child0:setMargin(Flow.Edge.Left, 10)
    root_child0:setMargin(Flow.Edge.Top, 10)
    root_child0:setMargin(Flow.Edge.Right, 10)
    root_child0:setMargin(Flow.Edge.Bottom, 10)
    root_child0:setWidth(20)
    root_child0:setHeight(20)
    root_child0:setDisplay(Flow.Display.None)
    root:insertChild(root_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setFlexGrow(1)
    root:insertChild(root_child1, 2)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(0 == root_child0:getComputedWidth(), "0 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(0 == root_child0:getComputedHeight(), "0 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child1:getComputedLeft(), "0 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(0 == root_child1:getComputedTop(), "0 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(100 == root_child1:getComputedWidth(), "100 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(100 == root_child1:getComputedHeight(), "100 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(0 == root_child0:getComputedWidth(), "0 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(0 == root_child0:getComputedHeight(), "0 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child1:getComputedLeft(), "0 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(0 == root_child1:getComputedTop(), "0 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(100 == root_child1:getComputedWidth(), "100 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(100 == root_child1:getComputedHeight(), "100 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("display_none_with_child")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setFlexDirection(Flow.FlexDirection.Row)
    root:setWidth(100)
    root:setHeight(100)

    local root_child0 = Flow.Node.new(config)
    root_child0:setFlexGrow(1)
    root_child0:setFlexShrink(1)
    root_child0:setFlexBasis("0%")
    root:insertChild(root_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setFlexGrow(1)
    root_child1:setFlexShrink(1)
    root_child1:setFlexBasis("0%")
    root_child1:setDisplay(Flow.Display.None)
    root:insertChild(root_child1, 2)

    local root_child1_child0 = Flow.Node.new(config)
    root_child1_child0:setFlexGrow(1)
    root_child1_child0:setFlexShrink(1)
    root_child1_child0:setFlexBasis("0%")
    root_child1_child0:setWidth(20)
    root_child1:insertChild(root_child1_child0, 1)

    local root_child2 = Flow.Node.new(config)
    root_child2:setFlexGrow(1)
    root_child2:setFlexShrink(1)
    root_child2:setFlexBasis("0%")
    root:insertChild(root_child2, 3)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(50 == root_child0:getComputedWidth(), "50 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(100 == root_child0:getComputedHeight(), "100 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child1:getComputedLeft(), "0 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(0 == root_child1:getComputedTop(), "0 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(0 == root_child1:getComputedWidth(), "0 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(0 == root_child1:getComputedHeight(), "0 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(0 == root_child1_child0:getComputedLeft(), "0 == root_child1_child0:getComputedLeft() (" .. root_child1_child0:getComputedLeft() .. ")");
    assert(0 == root_child1_child0:getComputedTop(), "0 == root_child1_child0:getComputedTop() (" .. root_child1_child0:getComputedTop() .. ")");
    assert(0 == root_child1_child0:getComputedWidth(), "0 == root_child1_child0:getComputedWidth() (" .. root_child1_child0:getComputedWidth() .. ")");
    assert(0 == root_child1_child0:getComputedHeight(), "0 == root_child1_child0:getComputedHeight() (" .. root_child1_child0:getComputedHeight() .. ")");

    assert(50 == root_child2:getComputedLeft(), "50 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(0 == root_child2:getComputedTop(), "0 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(50 == root_child2:getComputedWidth(), "50 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(100 == root_child2:getComputedHeight(), "100 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(50 == root_child0:getComputedLeft(), "50 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(50 == root_child0:getComputedWidth(), "50 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(100 == root_child0:getComputedHeight(), "100 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child1:getComputedLeft(), "0 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(0 == root_child1:getComputedTop(), "0 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(0 == root_child1:getComputedWidth(), "0 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(0 == root_child1:getComputedHeight(), "0 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(0 == root_child1_child0:getComputedLeft(), "0 == root_child1_child0:getComputedLeft() (" .. root_child1_child0:getComputedLeft() .. ")");
    assert(0 == root_child1_child0:getComputedTop(), "0 == root_child1_child0:getComputedTop() (" .. root_child1_child0:getComputedTop() .. ")");
    assert(0 == root_child1_child0:getComputedWidth(), "0 == root_child1_child0:getComputedWidth() (" .. root_child1_child0:getComputedWidth() .. ")");
    assert(0 == root_child1_child0:getComputedHeight(), "0 == root_child1_child0:getComputedHeight() (" .. root_child1_child0:getComputedHeight() .. ")");

    assert(0 == root_child2:getComputedLeft(), "0 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(0 == root_child2:getComputedTop(), "0 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(50 == root_child2:getComputedWidth(), "50 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(100 == root_child2:getComputedHeight(), "100 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("display_none_with_position")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setFlexDirection(Flow.FlexDirection.Row)
    root:setWidth(100)
    root:setHeight(100)

    local root_child0 = Flow.Node.new(config)
    root_child0:setFlexGrow(1)
    root:insertChild(root_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setFlexGrow(1)
    root_child1:setPosition(Flow.Edge.Top, 10)
    root_child1:setDisplay(Flow.Display.None)
    root:insertChild(root_child1, 2)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(100 == root_child0:getComputedWidth(), "100 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(100 == root_child0:getComputedHeight(), "100 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child1:getComputedLeft(), "0 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(0 == root_child1:getComputedTop(), "0 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(0 == root_child1:getComputedWidth(), "0 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(0 == root_child1:getComputedHeight(), "0 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(100 == root_child0:getComputedWidth(), "100 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(100 == root_child0:getComputedHeight(), "100 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child1:getComputedLeft(), "0 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(0 == root_child1:getComputedTop(), "0 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(0 == root_child1:getComputedWidth(), "0 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(0 == root_child1:getComputedHeight(), "0 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("display_none_with_position_absolute")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setWidth(100)
    root:setHeight(100)

    local root_child0 = Flow.Node.new(config)
    root_child0:setPositionType(Flow.PositionType.Absolute)
    root_child0:setWidth(100)
    root_child0:setHeight(100)
    root_child0:setDisplay(Flow.Display.None)
    root:insertChild(root_child0, 1)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(0 == root_child0:getComputedWidth(), "0 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(0 == root_child0:getComputedHeight(), "0 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(0 == root_child0:getComputedWidth(), "0 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(0 == root_child0:getComputedHeight(), "0 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end

return nil
