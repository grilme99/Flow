-- @Generated by gentest/browser/gentest.js from gentest/fixtures/YGFlexDirectionTest.html

--!strict

local ReplicatedStorage = game:GetService("ReplicatedStorage")

local Packages = ReplicatedStorage.Packages
local Flow = require(Packages.Flow)

do
    print("flex_direction_column_no_height")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setWidth(100)

    local root_child0 = Flow.Node.new(config)
    root_child0:setHeight(10)
    root:insertChild(root_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setHeight(10)
    root:insertChild(root_child1, 2)

    local root_child2 = Flow.Node.new(config)
    root_child2:setHeight(10)
    root:insertChild(root_child2, 3)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(30 == root:getComputedHeight(), "30 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(100 == root_child0:getComputedWidth(), "100 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(10 == root_child0:getComputedHeight(), "10 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child1:getComputedLeft(), "0 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(10 == root_child1:getComputedTop(), "10 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(100 == root_child1:getComputedWidth(), "100 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(10 == root_child1:getComputedHeight(), "10 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(0 == root_child2:getComputedLeft(), "0 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(20 == root_child2:getComputedTop(), "20 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(100 == root_child2:getComputedWidth(), "100 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(10 == root_child2:getComputedHeight(), "10 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(30 == root:getComputedHeight(), "30 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(100 == root_child0:getComputedWidth(), "100 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(10 == root_child0:getComputedHeight(), "10 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child1:getComputedLeft(), "0 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(10 == root_child1:getComputedTop(), "10 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(100 == root_child1:getComputedWidth(), "100 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(10 == root_child1:getComputedHeight(), "10 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(0 == root_child2:getComputedLeft(), "0 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(20 == root_child2:getComputedTop(), "20 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(100 == root_child2:getComputedWidth(), "100 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(10 == root_child2:getComputedHeight(), "10 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("flex_direction_row_no_width")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setFlexDirection(Flow.FlexDirection.Row)
    root:setHeight(100)

    local root_child0 = Flow.Node.new(config)
    root_child0:setWidth(10)
    root:insertChild(root_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setWidth(10)
    root:insertChild(root_child1, 2)

    local root_child2 = Flow.Node.new(config)
    root_child2:setWidth(10)
    root:insertChild(root_child2, 3)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(30 == root:getComputedWidth(), "30 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(10 == root_child0:getComputedWidth(), "10 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(100 == root_child0:getComputedHeight(), "100 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(10 == root_child1:getComputedLeft(), "10 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(0 == root_child1:getComputedTop(), "0 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(10 == root_child1:getComputedWidth(), "10 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(100 == root_child1:getComputedHeight(), "100 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(20 == root_child2:getComputedLeft(), "20 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(0 == root_child2:getComputedTop(), "0 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(10 == root_child2:getComputedWidth(), "10 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(100 == root_child2:getComputedHeight(), "100 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(30 == root:getComputedWidth(), "30 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(20 == root_child0:getComputedLeft(), "20 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(10 == root_child0:getComputedWidth(), "10 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(100 == root_child0:getComputedHeight(), "100 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(10 == root_child1:getComputedLeft(), "10 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(0 == root_child1:getComputedTop(), "0 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(10 == root_child1:getComputedWidth(), "10 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(100 == root_child1:getComputedHeight(), "100 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(0 == root_child2:getComputedLeft(), "0 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(0 == root_child2:getComputedTop(), "0 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(10 == root_child2:getComputedWidth(), "10 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(100 == root_child2:getComputedHeight(), "100 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("flex_direction_column")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setWidth(100)
    root:setHeight(100)

    local root_child0 = Flow.Node.new(config)
    root_child0:setHeight(10)
    root:insertChild(root_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setHeight(10)
    root:insertChild(root_child1, 2)

    local root_child2 = Flow.Node.new(config)
    root_child2:setHeight(10)
    root:insertChild(root_child2, 3)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(100 == root_child0:getComputedWidth(), "100 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(10 == root_child0:getComputedHeight(), "10 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child1:getComputedLeft(), "0 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(10 == root_child1:getComputedTop(), "10 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(100 == root_child1:getComputedWidth(), "100 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(10 == root_child1:getComputedHeight(), "10 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(0 == root_child2:getComputedLeft(), "0 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(20 == root_child2:getComputedTop(), "20 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(100 == root_child2:getComputedWidth(), "100 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(10 == root_child2:getComputedHeight(), "10 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(100 == root_child0:getComputedWidth(), "100 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(10 == root_child0:getComputedHeight(), "10 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child1:getComputedLeft(), "0 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(10 == root_child1:getComputedTop(), "10 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(100 == root_child1:getComputedWidth(), "100 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(10 == root_child1:getComputedHeight(), "10 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(0 == root_child2:getComputedLeft(), "0 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(20 == root_child2:getComputedTop(), "20 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(100 == root_child2:getComputedWidth(), "100 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(10 == root_child2:getComputedHeight(), "10 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("flex_direction_row")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setFlexDirection(Flow.FlexDirection.Row)
    root:setWidth(100)
    root:setHeight(100)

    local root_child0 = Flow.Node.new(config)
    root_child0:setWidth(10)
    root:insertChild(root_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setWidth(10)
    root:insertChild(root_child1, 2)

    local root_child2 = Flow.Node.new(config)
    root_child2:setWidth(10)
    root:insertChild(root_child2, 3)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(10 == root_child0:getComputedWidth(), "10 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(100 == root_child0:getComputedHeight(), "100 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(10 == root_child1:getComputedLeft(), "10 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(0 == root_child1:getComputedTop(), "0 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(10 == root_child1:getComputedWidth(), "10 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(100 == root_child1:getComputedHeight(), "100 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(20 == root_child2:getComputedLeft(), "20 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(0 == root_child2:getComputedTop(), "0 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(10 == root_child2:getComputedWidth(), "10 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(100 == root_child2:getComputedHeight(), "100 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(90 == root_child0:getComputedLeft(), "90 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(10 == root_child0:getComputedWidth(), "10 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(100 == root_child0:getComputedHeight(), "100 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(80 == root_child1:getComputedLeft(), "80 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(0 == root_child1:getComputedTop(), "0 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(10 == root_child1:getComputedWidth(), "10 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(100 == root_child1:getComputedHeight(), "100 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(70 == root_child2:getComputedLeft(), "70 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(0 == root_child2:getComputedTop(), "0 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(10 == root_child2:getComputedWidth(), "10 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(100 == root_child2:getComputedHeight(), "100 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("flex_direction_column_reverse")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setFlexDirection(Flow.FlexDirection.ColumnReverse)
    root:setWidth(100)
    root:setHeight(100)

    local root_child0 = Flow.Node.new(config)
    root_child0:setHeight(10)
    root:insertChild(root_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setHeight(10)
    root:insertChild(root_child1, 2)

    local root_child2 = Flow.Node.new(config)
    root_child2:setHeight(10)
    root:insertChild(root_child2, 3)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(90 == root_child0:getComputedTop(), "90 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(100 == root_child0:getComputedWidth(), "100 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(10 == root_child0:getComputedHeight(), "10 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child1:getComputedLeft(), "0 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(80 == root_child1:getComputedTop(), "80 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(100 == root_child1:getComputedWidth(), "100 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(10 == root_child1:getComputedHeight(), "10 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(0 == root_child2:getComputedLeft(), "0 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(70 == root_child2:getComputedTop(), "70 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(100 == root_child2:getComputedWidth(), "100 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(10 == root_child2:getComputedHeight(), "10 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(90 == root_child0:getComputedTop(), "90 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(100 == root_child0:getComputedWidth(), "100 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(10 == root_child0:getComputedHeight(), "10 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child1:getComputedLeft(), "0 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(80 == root_child1:getComputedTop(), "80 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(100 == root_child1:getComputedWidth(), "100 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(10 == root_child1:getComputedHeight(), "10 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(0 == root_child2:getComputedLeft(), "0 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(70 == root_child2:getComputedTop(), "70 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(100 == root_child2:getComputedWidth(), "100 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(10 == root_child2:getComputedHeight(), "10 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("flex_direction_row_reverse")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setFlexDirection(Flow.FlexDirection.RowReverse)
    root:setWidth(100)
    root:setHeight(100)

    local root_child0 = Flow.Node.new(config)
    root_child0:setWidth(10)
    root:insertChild(root_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setWidth(10)
    root:insertChild(root_child1, 2)

    local root_child2 = Flow.Node.new(config)
    root_child2:setWidth(10)
    root:insertChild(root_child2, 3)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(90 == root_child0:getComputedLeft(), "90 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(10 == root_child0:getComputedWidth(), "10 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(100 == root_child0:getComputedHeight(), "100 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(80 == root_child1:getComputedLeft(), "80 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(0 == root_child1:getComputedTop(), "0 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(10 == root_child1:getComputedWidth(), "10 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(100 == root_child1:getComputedHeight(), "100 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(70 == root_child2:getComputedLeft(), "70 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(0 == root_child2:getComputedTop(), "0 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(10 == root_child2:getComputedWidth(), "10 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(100 == root_child2:getComputedHeight(), "100 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(10 == root_child0:getComputedWidth(), "10 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(100 == root_child0:getComputedHeight(), "100 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(10 == root_child1:getComputedLeft(), "10 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(0 == root_child1:getComputedTop(), "0 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(10 == root_child1:getComputedWidth(), "10 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(100 == root_child1:getComputedHeight(), "100 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(20 == root_child2:getComputedLeft(), "20 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(0 == root_child2:getComputedTop(), "0 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(10 == root_child2:getComputedWidth(), "10 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(100 == root_child2:getComputedHeight(), "100 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end

return nil
