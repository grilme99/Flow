-- @Generated by gentest/browser/gentest.js from gentest/fixtures/YGFlexTest.html

--!strict

local ReplicatedStorage = game:GetService("ReplicatedStorage")

local Packages = ReplicatedStorage.Packages
local Flow = require(Packages.Flow)

do
    print("flex_basis_flex_grow_column")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setWidth(100)
    root:setHeight(100)

    local root_child0 = Flow.Node.new(config)
    root_child0:setFlexGrow(1)
    root_child0:setFlexBasis(50)
    root:insertChild(root_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setFlexGrow(1)
    root:insertChild(root_child1, 2)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(100 == root_child0:getComputedWidth(), "100 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(75 == root_child0:getComputedHeight(), "75 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child1:getComputedLeft(), "0 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(75 == root_child1:getComputedTop(), "75 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(100 == root_child1:getComputedWidth(), "100 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(25 == root_child1:getComputedHeight(), "25 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(100 == root_child0:getComputedWidth(), "100 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(75 == root_child0:getComputedHeight(), "75 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child1:getComputedLeft(), "0 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(75 == root_child1:getComputedTop(), "75 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(100 == root_child1:getComputedWidth(), "100 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(25 == root_child1:getComputedHeight(), "25 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("flex_shrink_flex_grow_row")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setFlexDirection(Flow.FlexDirection.Row)
    root:setWidth(500)
    root:setHeight(500)

    local root_child0 = Flow.Node.new(config)
    root_child0:setFlexShrink(1)
    root_child0:setWidth(500)
    root_child0:setHeight(100)
    root:insertChild(root_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setFlexShrink(1)
    root_child1:setWidth(500)
    root_child1:setHeight(100)
    root:insertChild(root_child1, 2)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(500 == root:getComputedWidth(), "500 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(500 == root:getComputedHeight(), "500 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(250 == root_child0:getComputedWidth(), "250 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(100 == root_child0:getComputedHeight(), "100 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(250 == root_child1:getComputedLeft(), "250 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(0 == root_child1:getComputedTop(), "0 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(250 == root_child1:getComputedWidth(), "250 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(100 == root_child1:getComputedHeight(), "100 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(500 == root:getComputedWidth(), "500 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(500 == root:getComputedHeight(), "500 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(250 == root_child0:getComputedLeft(), "250 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(250 == root_child0:getComputedWidth(), "250 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(100 == root_child0:getComputedHeight(), "100 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child1:getComputedLeft(), "0 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(0 == root_child1:getComputedTop(), "0 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(250 == root_child1:getComputedWidth(), "250 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(100 == root_child1:getComputedHeight(), "100 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("flex_shrink_flex_grow_child_flex_shrink_other_child")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setFlexDirection(Flow.FlexDirection.Row)
    root:setWidth(500)
    root:setHeight(500)

    local root_child0 = Flow.Node.new(config)
    root_child0:setFlexShrink(1)
    root_child0:setWidth(500)
    root_child0:setHeight(100)
    root:insertChild(root_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setFlexGrow(1)
    root_child1:setFlexShrink(1)
    root_child1:setWidth(500)
    root_child1:setHeight(100)
    root:insertChild(root_child1, 2)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(500 == root:getComputedWidth(), "500 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(500 == root:getComputedHeight(), "500 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(250 == root_child0:getComputedWidth(), "250 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(100 == root_child0:getComputedHeight(), "100 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(250 == root_child1:getComputedLeft(), "250 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(0 == root_child1:getComputedTop(), "0 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(250 == root_child1:getComputedWidth(), "250 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(100 == root_child1:getComputedHeight(), "100 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(500 == root:getComputedWidth(), "500 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(500 == root:getComputedHeight(), "500 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(250 == root_child0:getComputedLeft(), "250 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(250 == root_child0:getComputedWidth(), "250 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(100 == root_child0:getComputedHeight(), "100 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child1:getComputedLeft(), "0 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(0 == root_child1:getComputedTop(), "0 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(250 == root_child1:getComputedWidth(), "250 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(100 == root_child1:getComputedHeight(), "100 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("flex_basis_flex_grow_row")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setFlexDirection(Flow.FlexDirection.Row)
    root:setWidth(100)
    root:setHeight(100)

    local root_child0 = Flow.Node.new(config)
    root_child0:setFlexGrow(1)
    root_child0:setFlexBasis(50)
    root:insertChild(root_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setFlexGrow(1)
    root:insertChild(root_child1, 2)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(75 == root_child0:getComputedWidth(), "75 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(100 == root_child0:getComputedHeight(), "100 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(75 == root_child1:getComputedLeft(), "75 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(0 == root_child1:getComputedTop(), "0 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(25 == root_child1:getComputedWidth(), "25 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(100 == root_child1:getComputedHeight(), "100 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(25 == root_child0:getComputedLeft(), "25 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(75 == root_child0:getComputedWidth(), "75 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(100 == root_child0:getComputedHeight(), "100 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child1:getComputedLeft(), "0 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(0 == root_child1:getComputedTop(), "0 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(25 == root_child1:getComputedWidth(), "25 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(100 == root_child1:getComputedHeight(), "100 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("flex_basis_flex_shrink_column")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setWidth(100)
    root:setHeight(100)

    local root_child0 = Flow.Node.new(config)
    root_child0:setFlexShrink(1)
    root_child0:setFlexBasis(100)
    root:insertChild(root_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setFlexBasis(50)
    root:insertChild(root_child1, 2)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(100 == root_child0:getComputedWidth(), "100 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(50 == root_child0:getComputedHeight(), "50 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child1:getComputedLeft(), "0 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(50 == root_child1:getComputedTop(), "50 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(100 == root_child1:getComputedWidth(), "100 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(50 == root_child1:getComputedHeight(), "50 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(100 == root_child0:getComputedWidth(), "100 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(50 == root_child0:getComputedHeight(), "50 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child1:getComputedLeft(), "0 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(50 == root_child1:getComputedTop(), "50 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(100 == root_child1:getComputedWidth(), "100 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(50 == root_child1:getComputedHeight(), "50 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("flex_basis_flex_shrink_row")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setFlexDirection(Flow.FlexDirection.Row)
    root:setWidth(100)
    root:setHeight(100)

    local root_child0 = Flow.Node.new(config)
    root_child0:setFlexShrink(1)
    root_child0:setFlexBasis(100)
    root:insertChild(root_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setFlexBasis(50)
    root:insertChild(root_child1, 2)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(50 == root_child0:getComputedWidth(), "50 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(100 == root_child0:getComputedHeight(), "100 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(50 == root_child1:getComputedLeft(), "50 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(0 == root_child1:getComputedTop(), "0 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(50 == root_child1:getComputedWidth(), "50 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(100 == root_child1:getComputedHeight(), "100 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(50 == root_child0:getComputedLeft(), "50 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(50 == root_child0:getComputedWidth(), "50 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(100 == root_child0:getComputedHeight(), "100 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child1:getComputedLeft(), "0 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(0 == root_child1:getComputedTop(), "0 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(50 == root_child1:getComputedWidth(), "50 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(100 == root_child1:getComputedHeight(), "100 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("flex_shrink_to_zero")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setHeight(75)

    local root_child0 = Flow.Node.new(config)
    root_child0:setWidth(50)
    root_child0:setHeight(50)
    root:insertChild(root_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setFlexShrink(1)
    root_child1:setWidth(50)
    root_child1:setHeight(50)
    root:insertChild(root_child1, 2)

    local root_child2 = Flow.Node.new(config)
    root_child2:setWidth(50)
    root_child2:setHeight(50)
    root:insertChild(root_child2, 3)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(50 == root:getComputedWidth(), "50 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(75 == root:getComputedHeight(), "75 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(50 == root_child0:getComputedWidth(), "50 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(50 == root_child0:getComputedHeight(), "50 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child1:getComputedLeft(), "0 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(50 == root_child1:getComputedTop(), "50 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(50 == root_child1:getComputedWidth(), "50 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(0 == root_child1:getComputedHeight(), "0 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(0 == root_child2:getComputedLeft(), "0 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(50 == root_child2:getComputedTop(), "50 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(50 == root_child2:getComputedWidth(), "50 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(50 == root_child2:getComputedHeight(), "50 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(50 == root:getComputedWidth(), "50 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(75 == root:getComputedHeight(), "75 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(50 == root_child0:getComputedWidth(), "50 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(50 == root_child0:getComputedHeight(), "50 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child1:getComputedLeft(), "0 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(50 == root_child1:getComputedTop(), "50 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(50 == root_child1:getComputedWidth(), "50 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(0 == root_child1:getComputedHeight(), "0 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(0 == root_child2:getComputedLeft(), "0 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(50 == root_child2:getComputedTop(), "50 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(50 == root_child2:getComputedWidth(), "50 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(50 == root_child2:getComputedHeight(), "50 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("flex_basis_overrides_main_size")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setWidth(100)
    root:setHeight(100)

    local root_child0 = Flow.Node.new(config)
    root_child0:setFlexGrow(1)
    root_child0:setFlexBasis(50)
    root_child0:setHeight(20)
    root:insertChild(root_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setFlexGrow(1)
    root_child1:setHeight(10)
    root:insertChild(root_child1, 2)

    local root_child2 = Flow.Node.new(config)
    root_child2:setFlexGrow(1)
    root_child2:setHeight(10)
    root:insertChild(root_child2, 3)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(100 == root_child0:getComputedWidth(), "100 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(60 == root_child0:getComputedHeight(), "60 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child1:getComputedLeft(), "0 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(60 == root_child1:getComputedTop(), "60 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(100 == root_child1:getComputedWidth(), "100 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(20 == root_child1:getComputedHeight(), "20 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(0 == root_child2:getComputedLeft(), "0 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(80 == root_child2:getComputedTop(), "80 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(100 == root_child2:getComputedWidth(), "100 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(20 == root_child2:getComputedHeight(), "20 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(100 == root_child0:getComputedWidth(), "100 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(60 == root_child0:getComputedHeight(), "60 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child1:getComputedLeft(), "0 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(60 == root_child1:getComputedTop(), "60 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(100 == root_child1:getComputedWidth(), "100 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(20 == root_child1:getComputedHeight(), "20 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(0 == root_child2:getComputedLeft(), "0 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(80 == root_child2:getComputedTop(), "80 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(100 == root_child2:getComputedWidth(), "100 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(20 == root_child2:getComputedHeight(), "20 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("flex_grow_shrink_at_most")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setWidth(100)
    root:setHeight(100)

    local root_child0 = Flow.Node.new(config)
    root:insertChild(root_child0, 1)

    local root_child0_child0 = Flow.Node.new(config)
    root_child0_child0:setFlexGrow(1)
    root_child0_child0:setFlexShrink(1)
    root_child0:insertChild(root_child0_child0, 1)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(100 == root_child0:getComputedWidth(), "100 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(0 == root_child0:getComputedHeight(), "0 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child0_child0:getComputedLeft(), "0 == root_child0_child0:getComputedLeft() (" .. root_child0_child0:getComputedLeft() .. ")");
    assert(0 == root_child0_child0:getComputedTop(), "0 == root_child0_child0:getComputedTop() (" .. root_child0_child0:getComputedTop() .. ")");
    assert(100 == root_child0_child0:getComputedWidth(), "100 == root_child0_child0:getComputedWidth() (" .. root_child0_child0:getComputedWidth() .. ")");
    assert(0 == root_child0_child0:getComputedHeight(), "0 == root_child0_child0:getComputedHeight() (" .. root_child0_child0:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(100 == root_child0:getComputedWidth(), "100 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(0 == root_child0:getComputedHeight(), "0 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child0_child0:getComputedLeft(), "0 == root_child0_child0:getComputedLeft() (" .. root_child0_child0:getComputedLeft() .. ")");
    assert(0 == root_child0_child0:getComputedTop(), "0 == root_child0_child0:getComputedTop() (" .. root_child0_child0:getComputedTop() .. ")");
    assert(100 == root_child0_child0:getComputedWidth(), "100 == root_child0_child0:getComputedWidth() (" .. root_child0_child0:getComputedWidth() .. ")");
    assert(0 == root_child0_child0:getComputedHeight(), "0 == root_child0_child0:getComputedHeight() (" .. root_child0_child0:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("flex_grow_less_than_factor_one")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setWidth(200)
    root:setHeight(500)

    local root_child0 = Flow.Node.new(config)
    root_child0:setFlexGrow(0.2)
    root_child0:setFlexBasis(40)
    root:insertChild(root_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setFlexGrow(0.2)
    root:insertChild(root_child1, 2)

    local root_child2 = Flow.Node.new(config)
    root_child2:setFlexGrow(0.4)
    root:insertChild(root_child2, 3)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(200 == root:getComputedWidth(), "200 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(500 == root:getComputedHeight(), "500 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(200 == root_child0:getComputedWidth(), "200 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(132 == root_child0:getComputedHeight(), "132 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child1:getComputedLeft(), "0 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(132 == root_child1:getComputedTop(), "132 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(200 == root_child1:getComputedWidth(), "200 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(92 == root_child1:getComputedHeight(), "92 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(0 == root_child2:getComputedLeft(), "0 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(224 == root_child2:getComputedTop(), "224 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(200 == root_child2:getComputedWidth(), "200 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(184 == root_child2:getComputedHeight(), "184 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(200 == root:getComputedWidth(), "200 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(500 == root:getComputedHeight(), "500 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(200 == root_child0:getComputedWidth(), "200 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(132 == root_child0:getComputedHeight(), "132 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child1:getComputedLeft(), "0 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(132 == root_child1:getComputedTop(), "132 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(200 == root_child1:getComputedWidth(), "200 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(92 == root_child1:getComputedHeight(), "92 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(0 == root_child2:getComputedLeft(), "0 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(224 == root_child2:getComputedTop(), "224 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(200 == root_child2:getComputedWidth(), "200 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(184 == root_child2:getComputedHeight(), "184 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end

return nil
