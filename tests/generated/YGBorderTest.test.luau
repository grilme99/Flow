-- @Generated by gentest/browser/gentest.js from gentest/fixtures/YGBorderTest.html

--!strict

local ReplicatedStorage = game:GetService("ReplicatedStorage")

local Packages = ReplicatedStorage.Packages
local Flow = require(Packages.Flow)

do
    print("border_no_size")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setBorder(Flow.Edge.Left, 10)
    root:setBorder(Flow.Edge.Top, 10)
    root:setBorder(Flow.Edge.Right, 10)
    root:setBorder(Flow.Edge.Bottom, 10)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(20 == root:getComputedWidth(), "20 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(20 == root:getComputedHeight(), "20 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(20 == root:getComputedWidth(), "20 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(20 == root:getComputedHeight(), "20 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("border_container_match_child")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setBorder(Flow.Edge.Left, 10)
    root:setBorder(Flow.Edge.Top, 10)
    root:setBorder(Flow.Edge.Right, 10)
    root:setBorder(Flow.Edge.Bottom, 10)

    local root_child0 = Flow.Node.new(config)
    root_child0:setWidth(10)
    root_child0:setHeight(10)
    root:insertChild(root_child0, 1)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(30 == root:getComputedWidth(), "30 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(30 == root:getComputedHeight(), "30 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(10 == root_child0:getComputedLeft(), "10 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(10 == root_child0:getComputedTop(), "10 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(10 == root_child0:getComputedWidth(), "10 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(10 == root_child0:getComputedHeight(), "10 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(30 == root:getComputedWidth(), "30 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(30 == root:getComputedHeight(), "30 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(10 == root_child0:getComputedLeft(), "10 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(10 == root_child0:getComputedTop(), "10 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(10 == root_child0:getComputedWidth(), "10 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(10 == root_child0:getComputedHeight(), "10 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("border_flex_child")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setBorder(Flow.Edge.Left, 10)
    root:setBorder(Flow.Edge.Top, 10)
    root:setBorder(Flow.Edge.Right, 10)
    root:setBorder(Flow.Edge.Bottom, 10)
    root:setWidth(100)
    root:setHeight(100)

    local root_child0 = Flow.Node.new(config)
    root_child0:setFlexGrow(1)
    root_child0:setWidth(10)
    root:insertChild(root_child0, 1)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(10 == root_child0:getComputedLeft(), "10 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(10 == root_child0:getComputedTop(), "10 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(10 == root_child0:getComputedWidth(), "10 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(80 == root_child0:getComputedHeight(), "80 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(80 == root_child0:getComputedLeft(), "80 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(10 == root_child0:getComputedTop(), "10 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(10 == root_child0:getComputedWidth(), "10 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(80 == root_child0:getComputedHeight(), "80 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("border_stretch_child")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setBorder(Flow.Edge.Left, 10)
    root:setBorder(Flow.Edge.Top, 10)
    root:setBorder(Flow.Edge.Right, 10)
    root:setBorder(Flow.Edge.Bottom, 10)
    root:setWidth(100)
    root:setHeight(100)

    local root_child0 = Flow.Node.new(config)
    root_child0:setHeight(10)
    root:insertChild(root_child0, 1)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(10 == root_child0:getComputedLeft(), "10 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(10 == root_child0:getComputedTop(), "10 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(80 == root_child0:getComputedWidth(), "80 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(10 == root_child0:getComputedHeight(), "10 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(10 == root_child0:getComputedLeft(), "10 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(10 == root_child0:getComputedTop(), "10 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(80 == root_child0:getComputedWidth(), "80 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(10 == root_child0:getComputedHeight(), "10 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("border_center_child")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setJustifyContent(Flow.Justify.Center)
    root:setAlignItems(Flow.Align.Center)
    root:setBorder(Flow.Edge.Start, 10)
    root:setBorder(Flow.Edge.End, 20)
    root:setBorder(Flow.Edge.Bottom, 20)
    root:setWidth(100)
    root:setHeight(100)

    local root_child0 = Flow.Node.new(config)
    root_child0:setWidth(10)
    root_child0:setHeight(10)
    root:insertChild(root_child0, 1)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(40 == root_child0:getComputedLeft(), "40 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(35 == root_child0:getComputedTop(), "35 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(10 == root_child0:getComputedWidth(), "10 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(10 == root_child0:getComputedHeight(), "10 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(50 == root_child0:getComputedLeft(), "50 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(35 == root_child0:getComputedTop(), "35 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(10 == root_child0:getComputedWidth(), "10 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(10 == root_child0:getComputedHeight(), "10 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end

return nil
