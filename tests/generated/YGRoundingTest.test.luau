-- @Generated by gentest/browser/gentest.js from gentest/fixtures/YGRoundingTest.html

--!strict

local ReplicatedStorage = game:GetService("ReplicatedStorage")

local Packages = ReplicatedStorage.Packages
local Flow = require(Packages.Flow)

do
    print("rounding_flex_basis_flex_grow_row_width_of_100")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setFlexDirection(Flow.FlexDirection.Row)
    root:setWidth(100)
    root:setHeight(100)

    local root_child0 = Flow.Node.new(config)
    root_child0:setFlexGrow(1)
    root:insertChild(root_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setFlexGrow(1)
    root:insertChild(root_child1, 2)

    local root_child2 = Flow.Node.new(config)
    root_child2:setFlexGrow(1)
    root:insertChild(root_child2, 3)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(33 == root_child0:getComputedWidth(), "33 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(100 == root_child0:getComputedHeight(), "100 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(33 == root_child1:getComputedLeft(), "33 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(0 == root_child1:getComputedTop(), "0 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(34 == root_child1:getComputedWidth(), "34 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(100 == root_child1:getComputedHeight(), "100 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(67 == root_child2:getComputedLeft(), "67 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(0 == root_child2:getComputedTop(), "0 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(33 == root_child2:getComputedWidth(), "33 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(100 == root_child2:getComputedHeight(), "100 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(67 == root_child0:getComputedLeft(), "67 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(33 == root_child0:getComputedWidth(), "33 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(100 == root_child0:getComputedHeight(), "100 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(33 == root_child1:getComputedLeft(), "33 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(0 == root_child1:getComputedTop(), "0 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(34 == root_child1:getComputedWidth(), "34 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(100 == root_child1:getComputedHeight(), "100 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(0 == root_child2:getComputedLeft(), "0 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(0 == root_child2:getComputedTop(), "0 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(33 == root_child2:getComputedWidth(), "33 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(100 == root_child2:getComputedHeight(), "100 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("rounding_flex_basis_flex_grow_row_prime_number_width")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setFlexDirection(Flow.FlexDirection.Row)
    root:setWidth(113)
    root:setHeight(100)

    local root_child0 = Flow.Node.new(config)
    root_child0:setFlexGrow(1)
    root:insertChild(root_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setFlexGrow(1)
    root:insertChild(root_child1, 2)

    local root_child2 = Flow.Node.new(config)
    root_child2:setFlexGrow(1)
    root:insertChild(root_child2, 3)

    local root_child3 = Flow.Node.new(config)
    root_child3:setFlexGrow(1)
    root:insertChild(root_child3, 4)

    local root_child4 = Flow.Node.new(config)
    root_child4:setFlexGrow(1)
    root:insertChild(root_child4, 5)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(113 == root:getComputedWidth(), "113 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(23 == root_child0:getComputedWidth(), "23 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(100 == root_child0:getComputedHeight(), "100 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(23 == root_child1:getComputedLeft(), "23 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(0 == root_child1:getComputedTop(), "0 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(22 == root_child1:getComputedWidth(), "22 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(100 == root_child1:getComputedHeight(), "100 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(45 == root_child2:getComputedLeft(), "45 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(0 == root_child2:getComputedTop(), "0 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(23 == root_child2:getComputedWidth(), "23 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(100 == root_child2:getComputedHeight(), "100 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    assert(68 == root_child3:getComputedLeft(), "68 == root_child3:getComputedLeft() (" .. root_child3:getComputedLeft() .. ")");
    assert(0 == root_child3:getComputedTop(), "0 == root_child3:getComputedTop() (" .. root_child3:getComputedTop() .. ")");
    assert(22 == root_child3:getComputedWidth(), "22 == root_child3:getComputedWidth() (" .. root_child3:getComputedWidth() .. ")");
    assert(100 == root_child3:getComputedHeight(), "100 == root_child3:getComputedHeight() (" .. root_child3:getComputedHeight() .. ")");

    assert(90 == root_child4:getComputedLeft(), "90 == root_child4:getComputedLeft() (" .. root_child4:getComputedLeft() .. ")");
    assert(0 == root_child4:getComputedTop(), "0 == root_child4:getComputedTop() (" .. root_child4:getComputedTop() .. ")");
    assert(23 == root_child4:getComputedWidth(), "23 == root_child4:getComputedWidth() (" .. root_child4:getComputedWidth() .. ")");
    assert(100 == root_child4:getComputedHeight(), "100 == root_child4:getComputedHeight() (" .. root_child4:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(113 == root:getComputedWidth(), "113 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(90 == root_child0:getComputedLeft(), "90 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(23 == root_child0:getComputedWidth(), "23 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(100 == root_child0:getComputedHeight(), "100 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(68 == root_child1:getComputedLeft(), "68 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(0 == root_child1:getComputedTop(), "0 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(22 == root_child1:getComputedWidth(), "22 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(100 == root_child1:getComputedHeight(), "100 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(45 == root_child2:getComputedLeft(), "45 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(0 == root_child2:getComputedTop(), "0 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(23 == root_child2:getComputedWidth(), "23 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(100 == root_child2:getComputedHeight(), "100 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    assert(23 == root_child3:getComputedLeft(), "23 == root_child3:getComputedLeft() (" .. root_child3:getComputedLeft() .. ")");
    assert(0 == root_child3:getComputedTop(), "0 == root_child3:getComputedTop() (" .. root_child3:getComputedTop() .. ")");
    assert(22 == root_child3:getComputedWidth(), "22 == root_child3:getComputedWidth() (" .. root_child3:getComputedWidth() .. ")");
    assert(100 == root_child3:getComputedHeight(), "100 == root_child3:getComputedHeight() (" .. root_child3:getComputedHeight() .. ")");

    assert(0 == root_child4:getComputedLeft(), "0 == root_child4:getComputedLeft() (" .. root_child4:getComputedLeft() .. ")");
    assert(0 == root_child4:getComputedTop(), "0 == root_child4:getComputedTop() (" .. root_child4:getComputedTop() .. ")");
    assert(23 == root_child4:getComputedWidth(), "23 == root_child4:getComputedWidth() (" .. root_child4:getComputedWidth() .. ")");
    assert(100 == root_child4:getComputedHeight(), "100 == root_child4:getComputedHeight() (" .. root_child4:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("rounding_flex_basis_flex_shrink_row")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setFlexDirection(Flow.FlexDirection.Row)
    root:setWidth(101)
    root:setHeight(100)

    local root_child0 = Flow.Node.new(config)
    root_child0:setFlexShrink(1)
    root_child0:setFlexBasis(100)
    root:insertChild(root_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setFlexBasis(25)
    root:insertChild(root_child1, 2)

    local root_child2 = Flow.Node.new(config)
    root_child2:setFlexBasis(25)
    root:insertChild(root_child2, 3)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(101 == root:getComputedWidth(), "101 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(51 == root_child0:getComputedWidth(), "51 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(100 == root_child0:getComputedHeight(), "100 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(51 == root_child1:getComputedLeft(), "51 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(0 == root_child1:getComputedTop(), "0 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(25 == root_child1:getComputedWidth(), "25 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(100 == root_child1:getComputedHeight(), "100 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(76 == root_child2:getComputedLeft(), "76 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(0 == root_child2:getComputedTop(), "0 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(25 == root_child2:getComputedWidth(), "25 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(100 == root_child2:getComputedHeight(), "100 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(101 == root:getComputedWidth(), "101 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(50 == root_child0:getComputedLeft(), "50 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(51 == root_child0:getComputedWidth(), "51 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(100 == root_child0:getComputedHeight(), "100 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(25 == root_child1:getComputedLeft(), "25 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(0 == root_child1:getComputedTop(), "0 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(25 == root_child1:getComputedWidth(), "25 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(100 == root_child1:getComputedHeight(), "100 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(0 == root_child2:getComputedLeft(), "0 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(0 == root_child2:getComputedTop(), "0 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(25 == root_child2:getComputedWidth(), "25 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(100 == root_child2:getComputedHeight(), "100 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("rounding_flex_basis_overrides_main_size")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setWidth(100)
    root:setHeight(113)

    local root_child0 = Flow.Node.new(config)
    root_child0:setFlexGrow(1)
    root_child0:setFlexBasis(50)
    root_child0:setHeight(20)
    root:insertChild(root_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setFlexGrow(1)
    root_child1:setHeight(10)
    root:insertChild(root_child1, 2)

    local root_child2 = Flow.Node.new(config)
    root_child2:setFlexGrow(1)
    root_child2:setHeight(10)
    root:insertChild(root_child2, 3)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(113 == root:getComputedHeight(), "113 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(100 == root_child0:getComputedWidth(), "100 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(64 == root_child0:getComputedHeight(), "64 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child1:getComputedLeft(), "0 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(64 == root_child1:getComputedTop(), "64 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(100 == root_child1:getComputedWidth(), "100 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(25 == root_child1:getComputedHeight(), "25 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(0 == root_child2:getComputedLeft(), "0 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(89 == root_child2:getComputedTop(), "89 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(100 == root_child2:getComputedWidth(), "100 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(24 == root_child2:getComputedHeight(), "24 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(113 == root:getComputedHeight(), "113 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(100 == root_child0:getComputedWidth(), "100 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(64 == root_child0:getComputedHeight(), "64 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child1:getComputedLeft(), "0 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(64 == root_child1:getComputedTop(), "64 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(100 == root_child1:getComputedWidth(), "100 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(25 == root_child1:getComputedHeight(), "25 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(0 == root_child2:getComputedLeft(), "0 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(89 == root_child2:getComputedTop(), "89 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(100 == root_child2:getComputedWidth(), "100 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(24 == root_child2:getComputedHeight(), "24 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("rounding_total_fractial")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setWidth(87.4)
    root:setHeight(113.4)

    local root_child0 = Flow.Node.new(config)
    root_child0:setFlexGrow(0.7)
    root_child0:setFlexBasis(50.3)
    root_child0:setHeight(20.3)
    root:insertChild(root_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setFlexGrow(1.6)
    root_child1:setHeight(10)
    root:insertChild(root_child1, 2)

    local root_child2 = Flow.Node.new(config)
    root_child2:setFlexGrow(1.1)
    root_child2:setHeight(10.7)
    root:insertChild(root_child2, 3)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(87 == root:getComputedWidth(), "87 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(113 == root:getComputedHeight(), "113 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(87 == root_child0:getComputedWidth(), "87 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(59 == root_child0:getComputedHeight(), "59 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child1:getComputedLeft(), "0 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(59 == root_child1:getComputedTop(), "59 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(87 == root_child1:getComputedWidth(), "87 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(30 == root_child1:getComputedHeight(), "30 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(0 == root_child2:getComputedLeft(), "0 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(89 == root_child2:getComputedTop(), "89 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(87 == root_child2:getComputedWidth(), "87 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(24 == root_child2:getComputedHeight(), "24 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(87 == root:getComputedWidth(), "87 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(113 == root:getComputedHeight(), "113 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(87 == root_child0:getComputedWidth(), "87 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(59 == root_child0:getComputedHeight(), "59 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child1:getComputedLeft(), "0 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(59 == root_child1:getComputedTop(), "59 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(87 == root_child1:getComputedWidth(), "87 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(30 == root_child1:getComputedHeight(), "30 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(0 == root_child2:getComputedLeft(), "0 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(89 == root_child2:getComputedTop(), "89 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(87 == root_child2:getComputedWidth(), "87 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(24 == root_child2:getComputedHeight(), "24 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("rounding_total_fractial_nested")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setWidth(87.4)
    root:setHeight(113.4)

    local root_child0 = Flow.Node.new(config)
    root_child0:setFlexGrow(0.7)
    root_child0:setFlexBasis(50.3)
    root_child0:setHeight(20.3)
    root:insertChild(root_child0, 1)

    local root_child0_child0 = Flow.Node.new(config)
    root_child0_child0:setFlexGrow(1)
    root_child0_child0:setFlexBasis(0.3)
    root_child0_child0:setPosition(Flow.Edge.Bottom, 13.3)
    root_child0_child0:setHeight(9.9)
    root_child0:insertChild(root_child0_child0, 1)

    local root_child0_child1 = Flow.Node.new(config)
    root_child0_child1:setFlexGrow(4)
    root_child0_child1:setFlexBasis(0.3)
    root_child0_child1:setPosition(Flow.Edge.Top, 13.3)
    root_child0_child1:setHeight(1.1)
    root_child0:insertChild(root_child0_child1, 2)

    local root_child1 = Flow.Node.new(config)
    root_child1:setFlexGrow(1.6)
    root_child1:setHeight(10)
    root:insertChild(root_child1, 2)

    local root_child2 = Flow.Node.new(config)
    root_child2:setFlexGrow(1.1)
    root_child2:setHeight(10.7)
    root:insertChild(root_child2, 3)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(87 == root:getComputedWidth(), "87 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(113 == root:getComputedHeight(), "113 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(87 == root_child0:getComputedWidth(), "87 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(59 == root_child0:getComputedHeight(), "59 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child0_child0:getComputedLeft(), "0 == root_child0_child0:getComputedLeft() (" .. root_child0_child0:getComputedLeft() .. ")");
    assert(-13 == root_child0_child0:getComputedTop(), "-13 == root_child0_child0:getComputedTop() (" .. root_child0_child0:getComputedTop() .. ")");
    assert(87 == root_child0_child0:getComputedWidth(), "87 == root_child0_child0:getComputedWidth() (" .. root_child0_child0:getComputedWidth() .. ")");
    assert(12 == root_child0_child0:getComputedHeight(), "12 == root_child0_child0:getComputedHeight() (" .. root_child0_child0:getComputedHeight() .. ")");

    assert(0 == root_child0_child1:getComputedLeft(), "0 == root_child0_child1:getComputedLeft() (" .. root_child0_child1:getComputedLeft() .. ")");
    assert(25 == root_child0_child1:getComputedTop(), "25 == root_child0_child1:getComputedTop() (" .. root_child0_child1:getComputedTop() .. ")");
    assert(87 == root_child0_child1:getComputedWidth(), "87 == root_child0_child1:getComputedWidth() (" .. root_child0_child1:getComputedWidth() .. ")");
    assert(47 == root_child0_child1:getComputedHeight(), "47 == root_child0_child1:getComputedHeight() (" .. root_child0_child1:getComputedHeight() .. ")");

    assert(0 == root_child1:getComputedLeft(), "0 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(59 == root_child1:getComputedTop(), "59 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(87 == root_child1:getComputedWidth(), "87 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(30 == root_child1:getComputedHeight(), "30 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(0 == root_child2:getComputedLeft(), "0 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(89 == root_child2:getComputedTop(), "89 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(87 == root_child2:getComputedWidth(), "87 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(24 == root_child2:getComputedHeight(), "24 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(87 == root:getComputedWidth(), "87 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(113 == root:getComputedHeight(), "113 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(87 == root_child0:getComputedWidth(), "87 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(59 == root_child0:getComputedHeight(), "59 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child0_child0:getComputedLeft(), "0 == root_child0_child0:getComputedLeft() (" .. root_child0_child0:getComputedLeft() .. ")");
    assert(-13 == root_child0_child0:getComputedTop(), "-13 == root_child0_child0:getComputedTop() (" .. root_child0_child0:getComputedTop() .. ")");
    assert(87 == root_child0_child0:getComputedWidth(), "87 == root_child0_child0:getComputedWidth() (" .. root_child0_child0:getComputedWidth() .. ")");
    assert(12 == root_child0_child0:getComputedHeight(), "12 == root_child0_child0:getComputedHeight() (" .. root_child0_child0:getComputedHeight() .. ")");

    assert(0 == root_child0_child1:getComputedLeft(), "0 == root_child0_child1:getComputedLeft() (" .. root_child0_child1:getComputedLeft() .. ")");
    assert(25 == root_child0_child1:getComputedTop(), "25 == root_child0_child1:getComputedTop() (" .. root_child0_child1:getComputedTop() .. ")");
    assert(87 == root_child0_child1:getComputedWidth(), "87 == root_child0_child1:getComputedWidth() (" .. root_child0_child1:getComputedWidth() .. ")");
    assert(47 == root_child0_child1:getComputedHeight(), "47 == root_child0_child1:getComputedHeight() (" .. root_child0_child1:getComputedHeight() .. ")");

    assert(0 == root_child1:getComputedLeft(), "0 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(59 == root_child1:getComputedTop(), "59 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(87 == root_child1:getComputedWidth(), "87 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(30 == root_child1:getComputedHeight(), "30 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(0 == root_child2:getComputedLeft(), "0 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(89 == root_child2:getComputedTop(), "89 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(87 == root_child2:getComputedWidth(), "87 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(24 == root_child2:getComputedHeight(), "24 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("rounding_fractial_input_1")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setWidth(100)
    root:setHeight(113.4)

    local root_child0 = Flow.Node.new(config)
    root_child0:setFlexGrow(1)
    root_child0:setFlexBasis(50)
    root_child0:setHeight(20)
    root:insertChild(root_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setFlexGrow(1)
    root_child1:setHeight(10)
    root:insertChild(root_child1, 2)

    local root_child2 = Flow.Node.new(config)
    root_child2:setFlexGrow(1)
    root_child2:setHeight(10)
    root:insertChild(root_child2, 3)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(113 == root:getComputedHeight(), "113 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(100 == root_child0:getComputedWidth(), "100 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(64 == root_child0:getComputedHeight(), "64 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child1:getComputedLeft(), "0 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(64 == root_child1:getComputedTop(), "64 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(100 == root_child1:getComputedWidth(), "100 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(25 == root_child1:getComputedHeight(), "25 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(0 == root_child2:getComputedLeft(), "0 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(89 == root_child2:getComputedTop(), "89 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(100 == root_child2:getComputedWidth(), "100 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(24 == root_child2:getComputedHeight(), "24 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(113 == root:getComputedHeight(), "113 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(100 == root_child0:getComputedWidth(), "100 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(64 == root_child0:getComputedHeight(), "64 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child1:getComputedLeft(), "0 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(64 == root_child1:getComputedTop(), "64 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(100 == root_child1:getComputedWidth(), "100 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(25 == root_child1:getComputedHeight(), "25 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(0 == root_child2:getComputedLeft(), "0 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(89 == root_child2:getComputedTop(), "89 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(100 == root_child2:getComputedWidth(), "100 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(24 == root_child2:getComputedHeight(), "24 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("rounding_fractial_input_2")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setWidth(100)
    root:setHeight(113.6)

    local root_child0 = Flow.Node.new(config)
    root_child0:setFlexGrow(1)
    root_child0:setFlexBasis(50)
    root_child0:setHeight(20)
    root:insertChild(root_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setFlexGrow(1)
    root_child1:setHeight(10)
    root:insertChild(root_child1, 2)

    local root_child2 = Flow.Node.new(config)
    root_child2:setFlexGrow(1)
    root_child2:setHeight(10)
    root:insertChild(root_child2, 3)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(114 == root:getComputedHeight(), "114 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(100 == root_child0:getComputedWidth(), "100 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(65 == root_child0:getComputedHeight(), "65 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child1:getComputedLeft(), "0 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(65 == root_child1:getComputedTop(), "65 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(100 == root_child1:getComputedWidth(), "100 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(24 == root_child1:getComputedHeight(), "24 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(0 == root_child2:getComputedLeft(), "0 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(89 == root_child2:getComputedTop(), "89 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(100 == root_child2:getComputedWidth(), "100 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(25 == root_child2:getComputedHeight(), "25 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(114 == root:getComputedHeight(), "114 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(100 == root_child0:getComputedWidth(), "100 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(65 == root_child0:getComputedHeight(), "65 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child1:getComputedLeft(), "0 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(65 == root_child1:getComputedTop(), "65 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(100 == root_child1:getComputedWidth(), "100 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(24 == root_child1:getComputedHeight(), "24 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(0 == root_child2:getComputedLeft(), "0 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(89 == root_child2:getComputedTop(), "89 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(100 == root_child2:getComputedWidth(), "100 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(25 == root_child2:getComputedHeight(), "25 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("rounding_fractial_input_3")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setPosition(Flow.Edge.Top, 0.3)
    root:setWidth(100)
    root:setHeight(113.4)

    local root_child0 = Flow.Node.new(config)
    root_child0:setFlexGrow(1)
    root_child0:setFlexBasis(50)
    root_child0:setHeight(20)
    root:insertChild(root_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setFlexGrow(1)
    root_child1:setHeight(10)
    root:insertChild(root_child1, 2)

    local root_child2 = Flow.Node.new(config)
    root_child2:setFlexGrow(1)
    root_child2:setHeight(10)
    root:insertChild(root_child2, 3)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(114 == root:getComputedHeight(), "114 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(100 == root_child0:getComputedWidth(), "100 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(65 == root_child0:getComputedHeight(), "65 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child1:getComputedLeft(), "0 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(64 == root_child1:getComputedTop(), "64 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(100 == root_child1:getComputedWidth(), "100 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(24 == root_child1:getComputedHeight(), "24 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(0 == root_child2:getComputedLeft(), "0 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(89 == root_child2:getComputedTop(), "89 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(100 == root_child2:getComputedWidth(), "100 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(25 == root_child2:getComputedHeight(), "25 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(114 == root:getComputedHeight(), "114 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(100 == root_child0:getComputedWidth(), "100 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(65 == root_child0:getComputedHeight(), "65 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child1:getComputedLeft(), "0 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(64 == root_child1:getComputedTop(), "64 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(100 == root_child1:getComputedWidth(), "100 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(24 == root_child1:getComputedHeight(), "24 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(0 == root_child2:getComputedLeft(), "0 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(89 == root_child2:getComputedTop(), "89 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(100 == root_child2:getComputedWidth(), "100 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(25 == root_child2:getComputedHeight(), "25 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("rounding_fractial_input_4")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setPosition(Flow.Edge.Top, 0.7)
    root:setWidth(100)
    root:setHeight(113.4)

    local root_child0 = Flow.Node.new(config)
    root_child0:setFlexGrow(1)
    root_child0:setFlexBasis(50)
    root_child0:setHeight(20)
    root:insertChild(root_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setFlexGrow(1)
    root_child1:setHeight(10)
    root:insertChild(root_child1, 2)

    local root_child2 = Flow.Node.new(config)
    root_child2:setFlexGrow(1)
    root_child2:setHeight(10)
    root:insertChild(root_child2, 3)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(1 == root:getComputedTop(), "1 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(113 == root:getComputedHeight(), "113 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(100 == root_child0:getComputedWidth(), "100 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(64 == root_child0:getComputedHeight(), "64 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child1:getComputedLeft(), "0 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(64 == root_child1:getComputedTop(), "64 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(100 == root_child1:getComputedWidth(), "100 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(25 == root_child1:getComputedHeight(), "25 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(0 == root_child2:getComputedLeft(), "0 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(89 == root_child2:getComputedTop(), "89 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(100 == root_child2:getComputedWidth(), "100 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(24 == root_child2:getComputedHeight(), "24 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(1 == root:getComputedTop(), "1 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(113 == root:getComputedHeight(), "113 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(100 == root_child0:getComputedWidth(), "100 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(64 == root_child0:getComputedHeight(), "64 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child1:getComputedLeft(), "0 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(64 == root_child1:getComputedTop(), "64 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(100 == root_child1:getComputedWidth(), "100 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(25 == root_child1:getComputedHeight(), "25 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(0 == root_child2:getComputedLeft(), "0 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(89 == root_child2:getComputedTop(), "89 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(100 == root_child2:getComputedWidth(), "100 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(24 == root_child2:getComputedHeight(), "24 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("rounding_inner_node_controversy_horizontal")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setFlexDirection(Flow.FlexDirection.Row)
    root:setWidth(320)

    local root_child0 = Flow.Node.new(config)
    root_child0:setFlexGrow(1)
    root_child0:setHeight(10)
    root:insertChild(root_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setFlexGrow(1)
    root_child1:setHeight(10)
    root:insertChild(root_child1, 2)

    local root_child1_child0 = Flow.Node.new(config)
    root_child1_child0:setFlexGrow(1)
    root_child1_child0:setHeight(10)
    root_child1:insertChild(root_child1_child0, 1)

    local root_child2 = Flow.Node.new(config)
    root_child2:setFlexGrow(1)
    root_child2:setHeight(10)
    root:insertChild(root_child2, 3)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(320 == root:getComputedWidth(), "320 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(10 == root:getComputedHeight(), "10 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(107 == root_child0:getComputedWidth(), "107 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(10 == root_child0:getComputedHeight(), "10 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(107 == root_child1:getComputedLeft(), "107 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(0 == root_child1:getComputedTop(), "0 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(106 == root_child1:getComputedWidth(), "106 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(10 == root_child1:getComputedHeight(), "10 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(0 == root_child1_child0:getComputedLeft(), "0 == root_child1_child0:getComputedLeft() (" .. root_child1_child0:getComputedLeft() .. ")");
    assert(0 == root_child1_child0:getComputedTop(), "0 == root_child1_child0:getComputedTop() (" .. root_child1_child0:getComputedTop() .. ")");
    assert(106 == root_child1_child0:getComputedWidth(), "106 == root_child1_child0:getComputedWidth() (" .. root_child1_child0:getComputedWidth() .. ")");
    assert(10 == root_child1_child0:getComputedHeight(), "10 == root_child1_child0:getComputedHeight() (" .. root_child1_child0:getComputedHeight() .. ")");

    assert(213 == root_child2:getComputedLeft(), "213 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(0 == root_child2:getComputedTop(), "0 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(107 == root_child2:getComputedWidth(), "107 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(10 == root_child2:getComputedHeight(), "10 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(320 == root:getComputedWidth(), "320 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(10 == root:getComputedHeight(), "10 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(213 == root_child0:getComputedLeft(), "213 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(107 == root_child0:getComputedWidth(), "107 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(10 == root_child0:getComputedHeight(), "10 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(107 == root_child1:getComputedLeft(), "107 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(0 == root_child1:getComputedTop(), "0 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(106 == root_child1:getComputedWidth(), "106 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(10 == root_child1:getComputedHeight(), "10 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(0 == root_child1_child0:getComputedLeft(), "0 == root_child1_child0:getComputedLeft() (" .. root_child1_child0:getComputedLeft() .. ")");
    assert(0 == root_child1_child0:getComputedTop(), "0 == root_child1_child0:getComputedTop() (" .. root_child1_child0:getComputedTop() .. ")");
    assert(106 == root_child1_child0:getComputedWidth(), "106 == root_child1_child0:getComputedWidth() (" .. root_child1_child0:getComputedWidth() .. ")");
    assert(10 == root_child1_child0:getComputedHeight(), "10 == root_child1_child0:getComputedHeight() (" .. root_child1_child0:getComputedHeight() .. ")");

    assert(0 == root_child2:getComputedLeft(), "0 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(0 == root_child2:getComputedTop(), "0 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(107 == root_child2:getComputedWidth(), "107 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(10 == root_child2:getComputedHeight(), "10 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("rounding_inner_node_controversy_vertical")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setHeight(320)

    local root_child0 = Flow.Node.new(config)
    root_child0:setFlexGrow(1)
    root_child0:setWidth(10)
    root:insertChild(root_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setFlexGrow(1)
    root_child1:setWidth(10)
    root:insertChild(root_child1, 2)

    local root_child1_child0 = Flow.Node.new(config)
    root_child1_child0:setFlexGrow(1)
    root_child1_child0:setWidth(10)
    root_child1:insertChild(root_child1_child0, 1)

    local root_child2 = Flow.Node.new(config)
    root_child2:setFlexGrow(1)
    root_child2:setWidth(10)
    root:insertChild(root_child2, 3)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(10 == root:getComputedWidth(), "10 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(320 == root:getComputedHeight(), "320 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(10 == root_child0:getComputedWidth(), "10 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(107 == root_child0:getComputedHeight(), "107 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child1:getComputedLeft(), "0 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(107 == root_child1:getComputedTop(), "107 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(10 == root_child1:getComputedWidth(), "10 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(106 == root_child1:getComputedHeight(), "106 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(0 == root_child1_child0:getComputedLeft(), "0 == root_child1_child0:getComputedLeft() (" .. root_child1_child0:getComputedLeft() .. ")");
    assert(0 == root_child1_child0:getComputedTop(), "0 == root_child1_child0:getComputedTop() (" .. root_child1_child0:getComputedTop() .. ")");
    assert(10 == root_child1_child0:getComputedWidth(), "10 == root_child1_child0:getComputedWidth() (" .. root_child1_child0:getComputedWidth() .. ")");
    assert(106 == root_child1_child0:getComputedHeight(), "106 == root_child1_child0:getComputedHeight() (" .. root_child1_child0:getComputedHeight() .. ")");

    assert(0 == root_child2:getComputedLeft(), "0 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(213 == root_child2:getComputedTop(), "213 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(10 == root_child2:getComputedWidth(), "10 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(107 == root_child2:getComputedHeight(), "107 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(10 == root:getComputedWidth(), "10 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(320 == root:getComputedHeight(), "320 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(10 == root_child0:getComputedWidth(), "10 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(107 == root_child0:getComputedHeight(), "107 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child1:getComputedLeft(), "0 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(107 == root_child1:getComputedTop(), "107 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(10 == root_child1:getComputedWidth(), "10 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(106 == root_child1:getComputedHeight(), "106 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(0 == root_child1_child0:getComputedLeft(), "0 == root_child1_child0:getComputedLeft() (" .. root_child1_child0:getComputedLeft() .. ")");
    assert(0 == root_child1_child0:getComputedTop(), "0 == root_child1_child0:getComputedTop() (" .. root_child1_child0:getComputedTop() .. ")");
    assert(10 == root_child1_child0:getComputedWidth(), "10 == root_child1_child0:getComputedWidth() (" .. root_child1_child0:getComputedWidth() .. ")");
    assert(106 == root_child1_child0:getComputedHeight(), "106 == root_child1_child0:getComputedHeight() (" .. root_child1_child0:getComputedHeight() .. ")");

    assert(0 == root_child2:getComputedLeft(), "0 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(213 == root_child2:getComputedTop(), "213 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(10 == root_child2:getComputedWidth(), "10 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(107 == root_child2:getComputedHeight(), "107 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("rounding_inner_node_controversy_combined")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setFlexDirection(Flow.FlexDirection.Row)
    root:setWidth(640)
    root:setHeight(320)

    local root_child0 = Flow.Node.new(config)
    root_child0:setFlexGrow(1)
    root_child0:setHeight("100%")
    root:insertChild(root_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setFlexGrow(1)
    root_child1:setHeight("100%")
    root:insertChild(root_child1, 2)

    local root_child1_child0 = Flow.Node.new(config)
    root_child1_child0:setFlexGrow(1)
    root_child1_child0:setWidth("100%")
    root_child1:insertChild(root_child1_child0, 1)

    local root_child1_child1 = Flow.Node.new(config)
    root_child1_child1:setFlexGrow(1)
    root_child1_child1:setWidth("100%")
    root_child1:insertChild(root_child1_child1, 2)

    local root_child1_child1_child0 = Flow.Node.new(config)
    root_child1_child1_child0:setFlexGrow(1)
    root_child1_child1_child0:setWidth("100%")
    root_child1_child1:insertChild(root_child1_child1_child0, 1)

    local root_child1_child2 = Flow.Node.new(config)
    root_child1_child2:setFlexGrow(1)
    root_child1_child2:setWidth("100%")
    root_child1:insertChild(root_child1_child2, 3)

    local root_child2 = Flow.Node.new(config)
    root_child2:setFlexGrow(1)
    root_child2:setHeight("100%")
    root:insertChild(root_child2, 3)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(640 == root:getComputedWidth(), "640 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(320 == root:getComputedHeight(), "320 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(213 == root_child0:getComputedWidth(), "213 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(320 == root_child0:getComputedHeight(), "320 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(213 == root_child1:getComputedLeft(), "213 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(0 == root_child1:getComputedTop(), "0 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(214 == root_child1:getComputedWidth(), "214 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(320 == root_child1:getComputedHeight(), "320 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(0 == root_child1_child0:getComputedLeft(), "0 == root_child1_child0:getComputedLeft() (" .. root_child1_child0:getComputedLeft() .. ")");
    assert(0 == root_child1_child0:getComputedTop(), "0 == root_child1_child0:getComputedTop() (" .. root_child1_child0:getComputedTop() .. ")");
    assert(214 == root_child1_child0:getComputedWidth(), "214 == root_child1_child0:getComputedWidth() (" .. root_child1_child0:getComputedWidth() .. ")");
    assert(107 == root_child1_child0:getComputedHeight(), "107 == root_child1_child0:getComputedHeight() (" .. root_child1_child0:getComputedHeight() .. ")");

    assert(0 == root_child1_child1:getComputedLeft(), "0 == root_child1_child1:getComputedLeft() (" .. root_child1_child1:getComputedLeft() .. ")");
    assert(107 == root_child1_child1:getComputedTop(), "107 == root_child1_child1:getComputedTop() (" .. root_child1_child1:getComputedTop() .. ")");
    assert(214 == root_child1_child1:getComputedWidth(), "214 == root_child1_child1:getComputedWidth() (" .. root_child1_child1:getComputedWidth() .. ")");
    assert(106 == root_child1_child1:getComputedHeight(), "106 == root_child1_child1:getComputedHeight() (" .. root_child1_child1:getComputedHeight() .. ")");

    assert(0 == root_child1_child1_child0:getComputedLeft(), "0 == root_child1_child1_child0:getComputedLeft() (" .. root_child1_child1_child0:getComputedLeft() .. ")");
    assert(0 == root_child1_child1_child0:getComputedTop(), "0 == root_child1_child1_child0:getComputedTop() (" .. root_child1_child1_child0:getComputedTop() .. ")");
    assert(214 == root_child1_child1_child0:getComputedWidth(), "214 == root_child1_child1_child0:getComputedWidth() (" .. root_child1_child1_child0:getComputedWidth() .. ")");
    assert(106 == root_child1_child1_child0:getComputedHeight(), "106 == root_child1_child1_child0:getComputedHeight() (" .. root_child1_child1_child0:getComputedHeight() .. ")");

    assert(0 == root_child1_child2:getComputedLeft(), "0 == root_child1_child2:getComputedLeft() (" .. root_child1_child2:getComputedLeft() .. ")");
    assert(213 == root_child1_child2:getComputedTop(), "213 == root_child1_child2:getComputedTop() (" .. root_child1_child2:getComputedTop() .. ")");
    assert(214 == root_child1_child2:getComputedWidth(), "214 == root_child1_child2:getComputedWidth() (" .. root_child1_child2:getComputedWidth() .. ")");
    assert(107 == root_child1_child2:getComputedHeight(), "107 == root_child1_child2:getComputedHeight() (" .. root_child1_child2:getComputedHeight() .. ")");

    assert(427 == root_child2:getComputedLeft(), "427 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(0 == root_child2:getComputedTop(), "0 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(213 == root_child2:getComputedWidth(), "213 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(320 == root_child2:getComputedHeight(), "320 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(640 == root:getComputedWidth(), "640 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(320 == root:getComputedHeight(), "320 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(427 == root_child0:getComputedLeft(), "427 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(213 == root_child0:getComputedWidth(), "213 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(320 == root_child0:getComputedHeight(), "320 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(213 == root_child1:getComputedLeft(), "213 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(0 == root_child1:getComputedTop(), "0 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(214 == root_child1:getComputedWidth(), "214 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(320 == root_child1:getComputedHeight(), "320 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(0 == root_child1_child0:getComputedLeft(), "0 == root_child1_child0:getComputedLeft() (" .. root_child1_child0:getComputedLeft() .. ")");
    assert(0 == root_child1_child0:getComputedTop(), "0 == root_child1_child0:getComputedTop() (" .. root_child1_child0:getComputedTop() .. ")");
    assert(214 == root_child1_child0:getComputedWidth(), "214 == root_child1_child0:getComputedWidth() (" .. root_child1_child0:getComputedWidth() .. ")");
    assert(107 == root_child1_child0:getComputedHeight(), "107 == root_child1_child0:getComputedHeight() (" .. root_child1_child0:getComputedHeight() .. ")");

    assert(0 == root_child1_child1:getComputedLeft(), "0 == root_child1_child1:getComputedLeft() (" .. root_child1_child1:getComputedLeft() .. ")");
    assert(107 == root_child1_child1:getComputedTop(), "107 == root_child1_child1:getComputedTop() (" .. root_child1_child1:getComputedTop() .. ")");
    assert(214 == root_child1_child1:getComputedWidth(), "214 == root_child1_child1:getComputedWidth() (" .. root_child1_child1:getComputedWidth() .. ")");
    assert(106 == root_child1_child1:getComputedHeight(), "106 == root_child1_child1:getComputedHeight() (" .. root_child1_child1:getComputedHeight() .. ")");

    assert(0 == root_child1_child1_child0:getComputedLeft(), "0 == root_child1_child1_child0:getComputedLeft() (" .. root_child1_child1_child0:getComputedLeft() .. ")");
    assert(0 == root_child1_child1_child0:getComputedTop(), "0 == root_child1_child1_child0:getComputedTop() (" .. root_child1_child1_child0:getComputedTop() .. ")");
    assert(214 == root_child1_child1_child0:getComputedWidth(), "214 == root_child1_child1_child0:getComputedWidth() (" .. root_child1_child1_child0:getComputedWidth() .. ")");
    assert(106 == root_child1_child1_child0:getComputedHeight(), "106 == root_child1_child1_child0:getComputedHeight() (" .. root_child1_child1_child0:getComputedHeight() .. ")");

    assert(0 == root_child1_child2:getComputedLeft(), "0 == root_child1_child2:getComputedLeft() (" .. root_child1_child2:getComputedLeft() .. ")");
    assert(213 == root_child1_child2:getComputedTop(), "213 == root_child1_child2:getComputedTop() (" .. root_child1_child2:getComputedTop() .. ")");
    assert(214 == root_child1_child2:getComputedWidth(), "214 == root_child1_child2:getComputedWidth() (" .. root_child1_child2:getComputedWidth() .. ")");
    assert(107 == root_child1_child2:getComputedHeight(), "107 == root_child1_child2:getComputedHeight() (" .. root_child1_child2:getComputedHeight() .. ")");

    assert(0 == root_child2:getComputedLeft(), "0 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(0 == root_child2:getComputedTop(), "0 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(213 == root_child2:getComputedWidth(), "213 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(320 == root_child2:getComputedHeight(), "320 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end

return nil
