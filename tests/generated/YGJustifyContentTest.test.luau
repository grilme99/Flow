-- @Generated by gentest/browser/gentest.js from gentest/fixtures/YGJustifyContentTest.html

--!strict

local ReplicatedStorage = game:GetService("ReplicatedStorage")

local Packages = ReplicatedStorage.Packages
local Flow = require(Packages.Flow)

do
    print("justify_content_row_flex_start")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setFlexDirection(Flow.FlexDirection.Row)
    root:setWidth(102)
    root:setHeight(102)

    local root_child0 = Flow.Node.new(config)
    root_child0:setWidth(10)
    root:insertChild(root_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setWidth(10)
    root:insertChild(root_child1, 2)

    local root_child2 = Flow.Node.new(config)
    root_child2:setWidth(10)
    root:insertChild(root_child2, 3)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(102 == root:getComputedWidth(), "102 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(102 == root:getComputedHeight(), "102 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(10 == root_child0:getComputedWidth(), "10 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(102 == root_child0:getComputedHeight(), "102 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(10 == root_child1:getComputedLeft(), "10 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(0 == root_child1:getComputedTop(), "0 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(10 == root_child1:getComputedWidth(), "10 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(102 == root_child1:getComputedHeight(), "102 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(20 == root_child2:getComputedLeft(), "20 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(0 == root_child2:getComputedTop(), "0 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(10 == root_child2:getComputedWidth(), "10 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(102 == root_child2:getComputedHeight(), "102 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(102 == root:getComputedWidth(), "102 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(102 == root:getComputedHeight(), "102 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(92 == root_child0:getComputedLeft(), "92 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(10 == root_child0:getComputedWidth(), "10 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(102 == root_child0:getComputedHeight(), "102 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(82 == root_child1:getComputedLeft(), "82 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(0 == root_child1:getComputedTop(), "0 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(10 == root_child1:getComputedWidth(), "10 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(102 == root_child1:getComputedHeight(), "102 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(72 == root_child2:getComputedLeft(), "72 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(0 == root_child2:getComputedTop(), "0 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(10 == root_child2:getComputedWidth(), "10 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(102 == root_child2:getComputedHeight(), "102 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("justify_content_row_flex_end")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setFlexDirection(Flow.FlexDirection.Row)
    root:setJustifyContent(Flow.Justify.FlexEnd)
    root:setWidth(102)
    root:setHeight(102)

    local root_child0 = Flow.Node.new(config)
    root_child0:setWidth(10)
    root:insertChild(root_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setWidth(10)
    root:insertChild(root_child1, 2)

    local root_child2 = Flow.Node.new(config)
    root_child2:setWidth(10)
    root:insertChild(root_child2, 3)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(102 == root:getComputedWidth(), "102 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(102 == root:getComputedHeight(), "102 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(72 == root_child0:getComputedLeft(), "72 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(10 == root_child0:getComputedWidth(), "10 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(102 == root_child0:getComputedHeight(), "102 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(82 == root_child1:getComputedLeft(), "82 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(0 == root_child1:getComputedTop(), "0 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(10 == root_child1:getComputedWidth(), "10 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(102 == root_child1:getComputedHeight(), "102 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(92 == root_child2:getComputedLeft(), "92 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(0 == root_child2:getComputedTop(), "0 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(10 == root_child2:getComputedWidth(), "10 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(102 == root_child2:getComputedHeight(), "102 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(102 == root:getComputedWidth(), "102 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(102 == root:getComputedHeight(), "102 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(20 == root_child0:getComputedLeft(), "20 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(10 == root_child0:getComputedWidth(), "10 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(102 == root_child0:getComputedHeight(), "102 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(10 == root_child1:getComputedLeft(), "10 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(0 == root_child1:getComputedTop(), "0 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(10 == root_child1:getComputedWidth(), "10 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(102 == root_child1:getComputedHeight(), "102 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(0 == root_child2:getComputedLeft(), "0 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(0 == root_child2:getComputedTop(), "0 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(10 == root_child2:getComputedWidth(), "10 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(102 == root_child2:getComputedHeight(), "102 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("justify_content_row_center")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setFlexDirection(Flow.FlexDirection.Row)
    root:setJustifyContent(Flow.Justify.Center)
    root:setWidth(102)
    root:setHeight(102)

    local root_child0 = Flow.Node.new(config)
    root_child0:setWidth(10)
    root:insertChild(root_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setWidth(10)
    root:insertChild(root_child1, 2)

    local root_child2 = Flow.Node.new(config)
    root_child2:setWidth(10)
    root:insertChild(root_child2, 3)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(102 == root:getComputedWidth(), "102 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(102 == root:getComputedHeight(), "102 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(36 == root_child0:getComputedLeft(), "36 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(10 == root_child0:getComputedWidth(), "10 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(102 == root_child0:getComputedHeight(), "102 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(46 == root_child1:getComputedLeft(), "46 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(0 == root_child1:getComputedTop(), "0 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(10 == root_child1:getComputedWidth(), "10 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(102 == root_child1:getComputedHeight(), "102 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(56 == root_child2:getComputedLeft(), "56 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(0 == root_child2:getComputedTop(), "0 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(10 == root_child2:getComputedWidth(), "10 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(102 == root_child2:getComputedHeight(), "102 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(102 == root:getComputedWidth(), "102 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(102 == root:getComputedHeight(), "102 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(56 == root_child0:getComputedLeft(), "56 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(10 == root_child0:getComputedWidth(), "10 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(102 == root_child0:getComputedHeight(), "102 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(46 == root_child1:getComputedLeft(), "46 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(0 == root_child1:getComputedTop(), "0 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(10 == root_child1:getComputedWidth(), "10 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(102 == root_child1:getComputedHeight(), "102 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(36 == root_child2:getComputedLeft(), "36 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(0 == root_child2:getComputedTop(), "0 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(10 == root_child2:getComputedWidth(), "10 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(102 == root_child2:getComputedHeight(), "102 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("justify_content_row_space_between")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setFlexDirection(Flow.FlexDirection.Row)
    root:setJustifyContent(Flow.Justify.SpaceBetween)
    root:setWidth(102)
    root:setHeight(102)

    local root_child0 = Flow.Node.new(config)
    root_child0:setWidth(10)
    root:insertChild(root_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setWidth(10)
    root:insertChild(root_child1, 2)

    local root_child2 = Flow.Node.new(config)
    root_child2:setWidth(10)
    root:insertChild(root_child2, 3)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(102 == root:getComputedWidth(), "102 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(102 == root:getComputedHeight(), "102 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(10 == root_child0:getComputedWidth(), "10 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(102 == root_child0:getComputedHeight(), "102 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(46 == root_child1:getComputedLeft(), "46 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(0 == root_child1:getComputedTop(), "0 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(10 == root_child1:getComputedWidth(), "10 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(102 == root_child1:getComputedHeight(), "102 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(92 == root_child2:getComputedLeft(), "92 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(0 == root_child2:getComputedTop(), "0 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(10 == root_child2:getComputedWidth(), "10 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(102 == root_child2:getComputedHeight(), "102 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(102 == root:getComputedWidth(), "102 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(102 == root:getComputedHeight(), "102 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(92 == root_child0:getComputedLeft(), "92 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(10 == root_child0:getComputedWidth(), "10 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(102 == root_child0:getComputedHeight(), "102 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(46 == root_child1:getComputedLeft(), "46 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(0 == root_child1:getComputedTop(), "0 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(10 == root_child1:getComputedWidth(), "10 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(102 == root_child1:getComputedHeight(), "102 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(0 == root_child2:getComputedLeft(), "0 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(0 == root_child2:getComputedTop(), "0 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(10 == root_child2:getComputedWidth(), "10 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(102 == root_child2:getComputedHeight(), "102 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("justify_content_row_space_around")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setFlexDirection(Flow.FlexDirection.Row)
    root:setJustifyContent(Flow.Justify.SpaceAround)
    root:setWidth(102)
    root:setHeight(102)

    local root_child0 = Flow.Node.new(config)
    root_child0:setWidth(10)
    root:insertChild(root_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setWidth(10)
    root:insertChild(root_child1, 2)

    local root_child2 = Flow.Node.new(config)
    root_child2:setWidth(10)
    root:insertChild(root_child2, 3)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(102 == root:getComputedWidth(), "102 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(102 == root:getComputedHeight(), "102 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(12 == root_child0:getComputedLeft(), "12 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(10 == root_child0:getComputedWidth(), "10 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(102 == root_child0:getComputedHeight(), "102 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(46 == root_child1:getComputedLeft(), "46 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(0 == root_child1:getComputedTop(), "0 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(10 == root_child1:getComputedWidth(), "10 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(102 == root_child1:getComputedHeight(), "102 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(80 == root_child2:getComputedLeft(), "80 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(0 == root_child2:getComputedTop(), "0 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(10 == root_child2:getComputedWidth(), "10 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(102 == root_child2:getComputedHeight(), "102 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(102 == root:getComputedWidth(), "102 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(102 == root:getComputedHeight(), "102 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(80 == root_child0:getComputedLeft(), "80 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(10 == root_child0:getComputedWidth(), "10 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(102 == root_child0:getComputedHeight(), "102 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(46 == root_child1:getComputedLeft(), "46 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(0 == root_child1:getComputedTop(), "0 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(10 == root_child1:getComputedWidth(), "10 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(102 == root_child1:getComputedHeight(), "102 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(12 == root_child2:getComputedLeft(), "12 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(0 == root_child2:getComputedTop(), "0 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(10 == root_child2:getComputedWidth(), "10 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(102 == root_child2:getComputedHeight(), "102 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("justify_content_column_flex_start")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setWidth(102)
    root:setHeight(102)

    local root_child0 = Flow.Node.new(config)
    root_child0:setHeight(10)
    root:insertChild(root_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setHeight(10)
    root:insertChild(root_child1, 2)

    local root_child2 = Flow.Node.new(config)
    root_child2:setHeight(10)
    root:insertChild(root_child2, 3)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(102 == root:getComputedWidth(), "102 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(102 == root:getComputedHeight(), "102 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(102 == root_child0:getComputedWidth(), "102 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(10 == root_child0:getComputedHeight(), "10 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child1:getComputedLeft(), "0 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(10 == root_child1:getComputedTop(), "10 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(102 == root_child1:getComputedWidth(), "102 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(10 == root_child1:getComputedHeight(), "10 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(0 == root_child2:getComputedLeft(), "0 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(20 == root_child2:getComputedTop(), "20 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(102 == root_child2:getComputedWidth(), "102 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(10 == root_child2:getComputedHeight(), "10 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(102 == root:getComputedWidth(), "102 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(102 == root:getComputedHeight(), "102 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(102 == root_child0:getComputedWidth(), "102 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(10 == root_child0:getComputedHeight(), "10 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child1:getComputedLeft(), "0 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(10 == root_child1:getComputedTop(), "10 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(102 == root_child1:getComputedWidth(), "102 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(10 == root_child1:getComputedHeight(), "10 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(0 == root_child2:getComputedLeft(), "0 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(20 == root_child2:getComputedTop(), "20 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(102 == root_child2:getComputedWidth(), "102 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(10 == root_child2:getComputedHeight(), "10 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("justify_content_column_flex_end")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setJustifyContent(Flow.Justify.FlexEnd)
    root:setWidth(102)
    root:setHeight(102)

    local root_child0 = Flow.Node.new(config)
    root_child0:setHeight(10)
    root:insertChild(root_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setHeight(10)
    root:insertChild(root_child1, 2)

    local root_child2 = Flow.Node.new(config)
    root_child2:setHeight(10)
    root:insertChild(root_child2, 3)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(102 == root:getComputedWidth(), "102 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(102 == root:getComputedHeight(), "102 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(72 == root_child0:getComputedTop(), "72 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(102 == root_child0:getComputedWidth(), "102 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(10 == root_child0:getComputedHeight(), "10 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child1:getComputedLeft(), "0 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(82 == root_child1:getComputedTop(), "82 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(102 == root_child1:getComputedWidth(), "102 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(10 == root_child1:getComputedHeight(), "10 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(0 == root_child2:getComputedLeft(), "0 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(92 == root_child2:getComputedTop(), "92 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(102 == root_child2:getComputedWidth(), "102 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(10 == root_child2:getComputedHeight(), "10 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(102 == root:getComputedWidth(), "102 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(102 == root:getComputedHeight(), "102 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(72 == root_child0:getComputedTop(), "72 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(102 == root_child0:getComputedWidth(), "102 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(10 == root_child0:getComputedHeight(), "10 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child1:getComputedLeft(), "0 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(82 == root_child1:getComputedTop(), "82 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(102 == root_child1:getComputedWidth(), "102 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(10 == root_child1:getComputedHeight(), "10 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(0 == root_child2:getComputedLeft(), "0 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(92 == root_child2:getComputedTop(), "92 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(102 == root_child2:getComputedWidth(), "102 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(10 == root_child2:getComputedHeight(), "10 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("justify_content_column_center")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setJustifyContent(Flow.Justify.Center)
    root:setWidth(102)
    root:setHeight(102)

    local root_child0 = Flow.Node.new(config)
    root_child0:setHeight(10)
    root:insertChild(root_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setHeight(10)
    root:insertChild(root_child1, 2)

    local root_child2 = Flow.Node.new(config)
    root_child2:setHeight(10)
    root:insertChild(root_child2, 3)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(102 == root:getComputedWidth(), "102 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(102 == root:getComputedHeight(), "102 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(36 == root_child0:getComputedTop(), "36 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(102 == root_child0:getComputedWidth(), "102 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(10 == root_child0:getComputedHeight(), "10 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child1:getComputedLeft(), "0 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(46 == root_child1:getComputedTop(), "46 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(102 == root_child1:getComputedWidth(), "102 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(10 == root_child1:getComputedHeight(), "10 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(0 == root_child2:getComputedLeft(), "0 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(56 == root_child2:getComputedTop(), "56 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(102 == root_child2:getComputedWidth(), "102 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(10 == root_child2:getComputedHeight(), "10 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(102 == root:getComputedWidth(), "102 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(102 == root:getComputedHeight(), "102 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(36 == root_child0:getComputedTop(), "36 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(102 == root_child0:getComputedWidth(), "102 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(10 == root_child0:getComputedHeight(), "10 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child1:getComputedLeft(), "0 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(46 == root_child1:getComputedTop(), "46 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(102 == root_child1:getComputedWidth(), "102 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(10 == root_child1:getComputedHeight(), "10 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(0 == root_child2:getComputedLeft(), "0 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(56 == root_child2:getComputedTop(), "56 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(102 == root_child2:getComputedWidth(), "102 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(10 == root_child2:getComputedHeight(), "10 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("justify_content_column_space_between")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setJustifyContent(Flow.Justify.SpaceBetween)
    root:setWidth(102)
    root:setHeight(102)

    local root_child0 = Flow.Node.new(config)
    root_child0:setHeight(10)
    root:insertChild(root_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setHeight(10)
    root:insertChild(root_child1, 2)

    local root_child2 = Flow.Node.new(config)
    root_child2:setHeight(10)
    root:insertChild(root_child2, 3)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(102 == root:getComputedWidth(), "102 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(102 == root:getComputedHeight(), "102 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(102 == root_child0:getComputedWidth(), "102 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(10 == root_child0:getComputedHeight(), "10 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child1:getComputedLeft(), "0 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(46 == root_child1:getComputedTop(), "46 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(102 == root_child1:getComputedWidth(), "102 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(10 == root_child1:getComputedHeight(), "10 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(0 == root_child2:getComputedLeft(), "0 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(92 == root_child2:getComputedTop(), "92 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(102 == root_child2:getComputedWidth(), "102 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(10 == root_child2:getComputedHeight(), "10 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(102 == root:getComputedWidth(), "102 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(102 == root:getComputedHeight(), "102 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(102 == root_child0:getComputedWidth(), "102 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(10 == root_child0:getComputedHeight(), "10 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child1:getComputedLeft(), "0 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(46 == root_child1:getComputedTop(), "46 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(102 == root_child1:getComputedWidth(), "102 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(10 == root_child1:getComputedHeight(), "10 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(0 == root_child2:getComputedLeft(), "0 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(92 == root_child2:getComputedTop(), "92 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(102 == root_child2:getComputedWidth(), "102 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(10 == root_child2:getComputedHeight(), "10 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("justify_content_column_space_around")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setJustifyContent(Flow.Justify.SpaceAround)
    root:setWidth(102)
    root:setHeight(102)

    local root_child0 = Flow.Node.new(config)
    root_child0:setHeight(10)
    root:insertChild(root_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setHeight(10)
    root:insertChild(root_child1, 2)

    local root_child2 = Flow.Node.new(config)
    root_child2:setHeight(10)
    root:insertChild(root_child2, 3)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(102 == root:getComputedWidth(), "102 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(102 == root:getComputedHeight(), "102 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(12 == root_child0:getComputedTop(), "12 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(102 == root_child0:getComputedWidth(), "102 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(10 == root_child0:getComputedHeight(), "10 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child1:getComputedLeft(), "0 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(46 == root_child1:getComputedTop(), "46 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(102 == root_child1:getComputedWidth(), "102 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(10 == root_child1:getComputedHeight(), "10 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(0 == root_child2:getComputedLeft(), "0 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(80 == root_child2:getComputedTop(), "80 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(102 == root_child2:getComputedWidth(), "102 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(10 == root_child2:getComputedHeight(), "10 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(102 == root:getComputedWidth(), "102 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(102 == root:getComputedHeight(), "102 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(12 == root_child0:getComputedTop(), "12 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(102 == root_child0:getComputedWidth(), "102 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(10 == root_child0:getComputedHeight(), "10 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child1:getComputedLeft(), "0 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(46 == root_child1:getComputedTop(), "46 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(102 == root_child1:getComputedWidth(), "102 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(10 == root_child1:getComputedHeight(), "10 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(0 == root_child2:getComputedLeft(), "0 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(80 == root_child2:getComputedTop(), "80 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(102 == root_child2:getComputedWidth(), "102 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(10 == root_child2:getComputedHeight(), "10 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("justify_content_row_min_width_and_margin")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setFlexDirection(Flow.FlexDirection.Row)
    root:setJustifyContent(Flow.Justify.Center)
    root:setMargin(Flow.Edge.Left, 100)
    root:setMinWidth(50)

    local root_child0 = Flow.Node.new(config)
    root_child0:setWidth(20)
    root_child0:setHeight(20)
    root:insertChild(root_child0, 1)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(100 == root:getComputedLeft(), "100 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(50 == root:getComputedWidth(), "50 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(20 == root:getComputedHeight(), "20 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(15 == root_child0:getComputedLeft(), "15 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(20 == root_child0:getComputedWidth(), "20 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(20 == root_child0:getComputedHeight(), "20 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(100 == root:getComputedLeft(), "100 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(50 == root:getComputedWidth(), "50 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(20 == root:getComputedHeight(), "20 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(15 == root_child0:getComputedLeft(), "15 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(20 == root_child0:getComputedWidth(), "20 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(20 == root_child0:getComputedHeight(), "20 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("justify_content_row_max_width_and_margin")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setFlexDirection(Flow.FlexDirection.Row)
    root:setJustifyContent(Flow.Justify.Center)
    root:setMargin(Flow.Edge.Left, 100)
    root:setWidth(100)
    root:setMaxWidth(80)

    local root_child0 = Flow.Node.new(config)
    root_child0:setWidth(20)
    root_child0:setHeight(20)
    root:insertChild(root_child0, 1)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(100 == root:getComputedLeft(), "100 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(80 == root:getComputedWidth(), "80 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(20 == root:getComputedHeight(), "20 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(30 == root_child0:getComputedLeft(), "30 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(20 == root_child0:getComputedWidth(), "20 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(20 == root_child0:getComputedHeight(), "20 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(100 == root:getComputedLeft(), "100 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(80 == root:getComputedWidth(), "80 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(20 == root:getComputedHeight(), "20 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(30 == root_child0:getComputedLeft(), "30 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(20 == root_child0:getComputedWidth(), "20 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(20 == root_child0:getComputedHeight(), "20 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("justify_content_column_min_height_and_margin")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setJustifyContent(Flow.Justify.Center)
    root:setMargin(Flow.Edge.Top, 100)
    root:setMinHeight(50)

    local root_child0 = Flow.Node.new(config)
    root_child0:setWidth(20)
    root_child0:setHeight(20)
    root:insertChild(root_child0, 1)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(100 == root:getComputedTop(), "100 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(20 == root:getComputedWidth(), "20 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(50 == root:getComputedHeight(), "50 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(15 == root_child0:getComputedTop(), "15 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(20 == root_child0:getComputedWidth(), "20 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(20 == root_child0:getComputedHeight(), "20 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(100 == root:getComputedTop(), "100 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(20 == root:getComputedWidth(), "20 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(50 == root:getComputedHeight(), "50 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(15 == root_child0:getComputedTop(), "15 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(20 == root_child0:getComputedWidth(), "20 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(20 == root_child0:getComputedHeight(), "20 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("justify_content_colunn_max_height_and_margin")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setJustifyContent(Flow.Justify.Center)
    root:setMargin(Flow.Edge.Top, 100)
    root:setHeight(100)
    root:setMaxHeight(80)

    local root_child0 = Flow.Node.new(config)
    root_child0:setWidth(20)
    root_child0:setHeight(20)
    root:insertChild(root_child0, 1)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(100 == root:getComputedTop(), "100 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(20 == root:getComputedWidth(), "20 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(80 == root:getComputedHeight(), "80 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(30 == root_child0:getComputedTop(), "30 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(20 == root_child0:getComputedWidth(), "20 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(20 == root_child0:getComputedHeight(), "20 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(100 == root:getComputedTop(), "100 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(20 == root:getComputedWidth(), "20 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(80 == root:getComputedHeight(), "80 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(30 == root_child0:getComputedTop(), "30 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(20 == root_child0:getComputedWidth(), "20 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(20 == root_child0:getComputedHeight(), "20 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("justify_content_column_space_evenly")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setJustifyContent(Flow.Justify.SpaceEvenly)
    root:setWidth(102)
    root:setHeight(102)

    local root_child0 = Flow.Node.new(config)
    root_child0:setHeight(10)
    root:insertChild(root_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setHeight(10)
    root:insertChild(root_child1, 2)

    local root_child2 = Flow.Node.new(config)
    root_child2:setHeight(10)
    root:insertChild(root_child2, 3)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(102 == root:getComputedWidth(), "102 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(102 == root:getComputedHeight(), "102 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(18 == root_child0:getComputedTop(), "18 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(102 == root_child0:getComputedWidth(), "102 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(10 == root_child0:getComputedHeight(), "10 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child1:getComputedLeft(), "0 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(46 == root_child1:getComputedTop(), "46 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(102 == root_child1:getComputedWidth(), "102 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(10 == root_child1:getComputedHeight(), "10 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(0 == root_child2:getComputedLeft(), "0 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(74 == root_child2:getComputedTop(), "74 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(102 == root_child2:getComputedWidth(), "102 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(10 == root_child2:getComputedHeight(), "10 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(102 == root:getComputedWidth(), "102 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(102 == root:getComputedHeight(), "102 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(18 == root_child0:getComputedTop(), "18 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(102 == root_child0:getComputedWidth(), "102 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(10 == root_child0:getComputedHeight(), "10 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child1:getComputedLeft(), "0 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(46 == root_child1:getComputedTop(), "46 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(102 == root_child1:getComputedWidth(), "102 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(10 == root_child1:getComputedHeight(), "10 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(0 == root_child2:getComputedLeft(), "0 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(74 == root_child2:getComputedTop(), "74 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(102 == root_child2:getComputedWidth(), "102 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(10 == root_child2:getComputedHeight(), "10 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("justify_content_row_space_evenly")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setFlexDirection(Flow.FlexDirection.Row)
    root:setJustifyContent(Flow.Justify.SpaceEvenly)
    root:setWidth(102)
    root:setHeight(102)

    local root_child0 = Flow.Node.new(config)
    root_child0:setHeight(10)
    root:insertChild(root_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setHeight(10)
    root:insertChild(root_child1, 2)

    local root_child2 = Flow.Node.new(config)
    root_child2:setHeight(10)
    root:insertChild(root_child2, 3)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(102 == root:getComputedWidth(), "102 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(102 == root:getComputedHeight(), "102 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(26 == root_child0:getComputedLeft(), "26 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(0 == root_child0:getComputedWidth(), "0 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(10 == root_child0:getComputedHeight(), "10 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(51 == root_child1:getComputedLeft(), "51 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(0 == root_child1:getComputedTop(), "0 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(0 == root_child1:getComputedWidth(), "0 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(10 == root_child1:getComputedHeight(), "10 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(77 == root_child2:getComputedLeft(), "77 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(0 == root_child2:getComputedTop(), "0 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(0 == root_child2:getComputedWidth(), "0 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(10 == root_child2:getComputedHeight(), "10 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(102 == root:getComputedWidth(), "102 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(102 == root:getComputedHeight(), "102 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(77 == root_child0:getComputedLeft(), "77 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(0 == root_child0:getComputedWidth(), "0 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(10 == root_child0:getComputedHeight(), "10 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(51 == root_child1:getComputedLeft(), "51 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(0 == root_child1:getComputedTop(), "0 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(0 == root_child1:getComputedWidth(), "0 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(10 == root_child1:getComputedHeight(), "10 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(26 == root_child2:getComputedLeft(), "26 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(0 == root_child2:getComputedTop(), "0 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(0 == root_child2:getComputedWidth(), "0 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(10 == root_child2:getComputedHeight(), "10 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("justify_content_min_width_with_padding_child_width_greater_than_parent")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setAlignContent(Flow.Align.Stretch)
    root:setWidth(1000)
    root:setHeight(1584)

    local root_child0 = Flow.Node.new(config)
    root_child0:setFlexDirection(Flow.FlexDirection.Row)
    root_child0:setAlignContent(Flow.Align.Stretch)
    root:insertChild(root_child0, 1)

    local root_child0_child0 = Flow.Node.new(config)
    root_child0_child0:setFlexDirection(Flow.FlexDirection.Row)
    root_child0_child0:setJustifyContent(Flow.Justify.Center)
    root_child0_child0:setAlignContent(Flow.Align.Stretch)
    root_child0_child0:setPadding(Flow.Edge.Left, 100)
    root_child0_child0:setPadding(Flow.Edge.Right, 100)
    root_child0_child0:setMinWidth(400)
    root_child0:insertChild(root_child0_child0, 1)

    local root_child0_child0_child0 = Flow.Node.new(config)
    root_child0_child0_child0:setFlexDirection(Flow.FlexDirection.Row)
    root_child0_child0_child0:setAlignContent(Flow.Align.Stretch)
    root_child0_child0_child0:setWidth(300)
    root_child0_child0_child0:setHeight(100)
    root_child0_child0:insertChild(root_child0_child0_child0, 1)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(1000 == root:getComputedWidth(), "1000 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(1584 == root:getComputedHeight(), "1584 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(1000 == root_child0:getComputedWidth(), "1000 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(100 == root_child0:getComputedHeight(), "100 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child0_child0:getComputedLeft(), "0 == root_child0_child0:getComputedLeft() (" .. root_child0_child0:getComputedLeft() .. ")");
    assert(0 == root_child0_child0:getComputedTop(), "0 == root_child0_child0:getComputedTop() (" .. root_child0_child0:getComputedTop() .. ")");
    assert(500 == root_child0_child0:getComputedWidth(), "500 == root_child0_child0:getComputedWidth() (" .. root_child0_child0:getComputedWidth() .. ")");
    assert(100 == root_child0_child0:getComputedHeight(), "100 == root_child0_child0:getComputedHeight() (" .. root_child0_child0:getComputedHeight() .. ")");

    assert(100 == root_child0_child0_child0:getComputedLeft(), "100 == root_child0_child0_child0:getComputedLeft() (" .. root_child0_child0_child0:getComputedLeft() .. ")");
    assert(0 == root_child0_child0_child0:getComputedTop(), "0 == root_child0_child0_child0:getComputedTop() (" .. root_child0_child0_child0:getComputedTop() .. ")");
    assert(300 == root_child0_child0_child0:getComputedWidth(), "300 == root_child0_child0_child0:getComputedWidth() (" .. root_child0_child0_child0:getComputedWidth() .. ")");
    assert(100 == root_child0_child0_child0:getComputedHeight(), "100 == root_child0_child0_child0:getComputedHeight() (" .. root_child0_child0_child0:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(1000 == root:getComputedWidth(), "1000 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(1584 == root:getComputedHeight(), "1584 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(1000 == root_child0:getComputedWidth(), "1000 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(100 == root_child0:getComputedHeight(), "100 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(500 == root_child0_child0:getComputedLeft(), "500 == root_child0_child0:getComputedLeft() (" .. root_child0_child0:getComputedLeft() .. ")");
    assert(0 == root_child0_child0:getComputedTop(), "0 == root_child0_child0:getComputedTop() (" .. root_child0_child0:getComputedTop() .. ")");
    assert(500 == root_child0_child0:getComputedWidth(), "500 == root_child0_child0:getComputedWidth() (" .. root_child0_child0:getComputedWidth() .. ")");
    assert(100 == root_child0_child0:getComputedHeight(), "100 == root_child0_child0:getComputedHeight() (" .. root_child0_child0:getComputedHeight() .. ")");

    assert(100 == root_child0_child0_child0:getComputedLeft(), "100 == root_child0_child0_child0:getComputedLeft() (" .. root_child0_child0_child0:getComputedLeft() .. ")");
    assert(0 == root_child0_child0_child0:getComputedTop(), "0 == root_child0_child0_child0:getComputedTop() (" .. root_child0_child0_child0:getComputedTop() .. ")");
    assert(300 == root_child0_child0_child0:getComputedWidth(), "300 == root_child0_child0_child0:getComputedWidth() (" .. root_child0_child0_child0:getComputedWidth() .. ")");
    assert(100 == root_child0_child0_child0:getComputedHeight(), "100 == root_child0_child0_child0:getComputedHeight() (" .. root_child0_child0_child0:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("justify_content_min_width_with_padding_child_width_lower_than_parent")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setAlignContent(Flow.Align.Stretch)
    root:setWidth(1080)
    root:setHeight(1584)

    local root_child0 = Flow.Node.new(config)
    root_child0:setFlexDirection(Flow.FlexDirection.Row)
    root_child0:setAlignContent(Flow.Align.Stretch)
    root:insertChild(root_child0, 1)

    local root_child0_child0 = Flow.Node.new(config)
    root_child0_child0:setFlexDirection(Flow.FlexDirection.Row)
    root_child0_child0:setJustifyContent(Flow.Justify.Center)
    root_child0_child0:setAlignContent(Flow.Align.Stretch)
    root_child0_child0:setPadding(Flow.Edge.Left, 100)
    root_child0_child0:setPadding(Flow.Edge.Right, 100)
    root_child0_child0:setMinWidth(400)
    root_child0:insertChild(root_child0_child0, 1)

    local root_child0_child0_child0 = Flow.Node.new(config)
    root_child0_child0_child0:setFlexDirection(Flow.FlexDirection.Row)
    root_child0_child0_child0:setAlignContent(Flow.Align.Stretch)
    root_child0_child0_child0:setWidth(199)
    root_child0_child0_child0:setHeight(100)
    root_child0_child0:insertChild(root_child0_child0_child0, 1)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(1080 == root:getComputedWidth(), "1080 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(1584 == root:getComputedHeight(), "1584 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(1080 == root_child0:getComputedWidth(), "1080 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(100 == root_child0:getComputedHeight(), "100 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child0_child0:getComputedLeft(), "0 == root_child0_child0:getComputedLeft() (" .. root_child0_child0:getComputedLeft() .. ")");
    assert(0 == root_child0_child0:getComputedTop(), "0 == root_child0_child0:getComputedTop() (" .. root_child0_child0:getComputedTop() .. ")");
    assert(400 == root_child0_child0:getComputedWidth(), "400 == root_child0_child0:getComputedWidth() (" .. root_child0_child0:getComputedWidth() .. ")");
    assert(100 == root_child0_child0:getComputedHeight(), "100 == root_child0_child0:getComputedHeight() (" .. root_child0_child0:getComputedHeight() .. ")");

    assert(101 == root_child0_child0_child0:getComputedLeft(), "101 == root_child0_child0_child0:getComputedLeft() (" .. root_child0_child0_child0:getComputedLeft() .. ")");
    assert(0 == root_child0_child0_child0:getComputedTop(), "0 == root_child0_child0_child0:getComputedTop() (" .. root_child0_child0_child0:getComputedTop() .. ")");
    assert(199 == root_child0_child0_child0:getComputedWidth(), "199 == root_child0_child0_child0:getComputedWidth() (" .. root_child0_child0_child0:getComputedWidth() .. ")");
    assert(100 == root_child0_child0_child0:getComputedHeight(), "100 == root_child0_child0_child0:getComputedHeight() (" .. root_child0_child0_child0:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(1080 == root:getComputedWidth(), "1080 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(1584 == root:getComputedHeight(), "1584 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(1080 == root_child0:getComputedWidth(), "1080 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(100 == root_child0:getComputedHeight(), "100 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(680 == root_child0_child0:getComputedLeft(), "680 == root_child0_child0:getComputedLeft() (" .. root_child0_child0:getComputedLeft() .. ")");
    assert(0 == root_child0_child0:getComputedTop(), "0 == root_child0_child0:getComputedTop() (" .. root_child0_child0:getComputedTop() .. ")");
    assert(400 == root_child0_child0:getComputedWidth(), "400 == root_child0_child0:getComputedWidth() (" .. root_child0_child0:getComputedWidth() .. ")");
    assert(100 == root_child0_child0:getComputedHeight(), "100 == root_child0_child0:getComputedHeight() (" .. root_child0_child0:getComputedHeight() .. ")");

    assert(101 == root_child0_child0_child0:getComputedLeft(), "101 == root_child0_child0_child0:getComputedLeft() (" .. root_child0_child0_child0:getComputedLeft() .. ")");
    assert(0 == root_child0_child0_child0:getComputedTop(), "0 == root_child0_child0_child0:getComputedTop() (" .. root_child0_child0_child0:getComputedTop() .. ")");
    assert(199 == root_child0_child0_child0:getComputedWidth(), "199 == root_child0_child0_child0:getComputedWidth() (" .. root_child0_child0_child0:getComputedWidth() .. ")");
    assert(100 == root_child0_child0_child0:getComputedHeight(), "100 == root_child0_child0_child0:getComputedHeight() (" .. root_child0_child0_child0:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end

return nil
