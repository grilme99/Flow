-- @Generated by gentest/browser/gentest.js from gentest/fixtures/YGAbsolutePositionTest.html

--!strict

local ReplicatedStorage = game:GetService("ReplicatedStorage")

local Packages = ReplicatedStorage.Packages
local Flow = require(Packages.Flow)

do
    print("absolute_layout_width_height_start_top")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setWidth(100)
    root:setHeight(100)

    local root_child0 = Flow.Node.new(config)
    root_child0:setPositionType(Flow.PositionType.Absolute)
    root_child0:setPosition(Flow.Edge.Start, 10)
    root_child0:setPosition(Flow.Edge.Top, 10)
    root_child0:setWidth(10)
    root_child0:setHeight(10)
    root:insertChild(root_child0, 1)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(10 == root_child0:getComputedLeft(), "10 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(10 == root_child0:getComputedTop(), "10 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(10 == root_child0:getComputedWidth(), "10 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(10 == root_child0:getComputedHeight(), "10 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(80 == root_child0:getComputedLeft(), "80 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(10 == root_child0:getComputedTop(), "10 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(10 == root_child0:getComputedWidth(), "10 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(10 == root_child0:getComputedHeight(), "10 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("absolute_layout_width_height_end_bottom")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setWidth(100)
    root:setHeight(100)

    local root_child0 = Flow.Node.new(config)
    root_child0:setPositionType(Flow.PositionType.Absolute)
    root_child0:setPosition(Flow.Edge.End, 10)
    root_child0:setPosition(Flow.Edge.Bottom, 10)
    root_child0:setWidth(10)
    root_child0:setHeight(10)
    root:insertChild(root_child0, 1)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(80 == root_child0:getComputedLeft(), "80 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(80 == root_child0:getComputedTop(), "80 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(10 == root_child0:getComputedWidth(), "10 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(10 == root_child0:getComputedHeight(), "10 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(10 == root_child0:getComputedLeft(), "10 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(80 == root_child0:getComputedTop(), "80 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(10 == root_child0:getComputedWidth(), "10 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(10 == root_child0:getComputedHeight(), "10 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("absolute_layout_start_top_end_bottom")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setWidth(100)
    root:setHeight(100)

    local root_child0 = Flow.Node.new(config)
    root_child0:setPositionType(Flow.PositionType.Absolute)
    root_child0:setPosition(Flow.Edge.Start, 10)
    root_child0:setPosition(Flow.Edge.Top, 10)
    root_child0:setPosition(Flow.Edge.End, 10)
    root_child0:setPosition(Flow.Edge.Bottom, 10)
    root:insertChild(root_child0, 1)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(10 == root_child0:getComputedLeft(), "10 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(10 == root_child0:getComputedTop(), "10 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(80 == root_child0:getComputedWidth(), "80 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(80 == root_child0:getComputedHeight(), "80 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(10 == root_child0:getComputedLeft(), "10 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(10 == root_child0:getComputedTop(), "10 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(80 == root_child0:getComputedWidth(), "80 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(80 == root_child0:getComputedHeight(), "80 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("absolute_layout_width_height_start_top_end_bottom")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setWidth(100)
    root:setHeight(100)

    local root_child0 = Flow.Node.new(config)
    root_child0:setPositionType(Flow.PositionType.Absolute)
    root_child0:setPosition(Flow.Edge.Start, 10)
    root_child0:setPosition(Flow.Edge.Top, 10)
    root_child0:setPosition(Flow.Edge.End, 10)
    root_child0:setPosition(Flow.Edge.Bottom, 10)
    root_child0:setWidth(10)
    root_child0:setHeight(10)
    root:insertChild(root_child0, 1)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(10 == root_child0:getComputedLeft(), "10 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(10 == root_child0:getComputedTop(), "10 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(10 == root_child0:getComputedWidth(), "10 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(10 == root_child0:getComputedHeight(), "10 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(80 == root_child0:getComputedLeft(), "80 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(10 == root_child0:getComputedTop(), "10 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(10 == root_child0:getComputedWidth(), "10 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(10 == root_child0:getComputedHeight(), "10 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("do_not_clamp_height_of_absolute_node_to_height_of_its_overflow_hidden_parent")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setFlexDirection(Flow.FlexDirection.Row)
    root:setOverflow(Flow.Overflow.Hidden)
    root:setWidth(50)
    root:setHeight(50)

    local root_child0 = Flow.Node.new(config)
    root_child0:setPositionType(Flow.PositionType.Absolute)
    root_child0:setPosition(Flow.Edge.Start, 0)
    root_child0:setPosition(Flow.Edge.Top, 0)
    root:insertChild(root_child0, 1)

    local root_child0_child0 = Flow.Node.new(config)
    root_child0_child0:setWidth(100)
    root_child0_child0:setHeight(100)
    root_child0:insertChild(root_child0_child0, 1)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(50 == root:getComputedWidth(), "50 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(50 == root:getComputedHeight(), "50 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(100 == root_child0:getComputedWidth(), "100 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(100 == root_child0:getComputedHeight(), "100 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child0_child0:getComputedLeft(), "0 == root_child0_child0:getComputedLeft() (" .. root_child0_child0:getComputedLeft() .. ")");
    assert(0 == root_child0_child0:getComputedTop(), "0 == root_child0_child0:getComputedTop() (" .. root_child0_child0:getComputedTop() .. ")");
    assert(100 == root_child0_child0:getComputedWidth(), "100 == root_child0_child0:getComputedWidth() (" .. root_child0_child0:getComputedWidth() .. ")");
    assert(100 == root_child0_child0:getComputedHeight(), "100 == root_child0_child0:getComputedHeight() (" .. root_child0_child0:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(50 == root:getComputedWidth(), "50 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(50 == root:getComputedHeight(), "50 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(-50 == root_child0:getComputedLeft(), "-50 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(100 == root_child0:getComputedWidth(), "100 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(100 == root_child0:getComputedHeight(), "100 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child0_child0:getComputedLeft(), "0 == root_child0_child0:getComputedLeft() (" .. root_child0_child0:getComputedLeft() .. ")");
    assert(0 == root_child0_child0:getComputedTop(), "0 == root_child0_child0:getComputedTop() (" .. root_child0_child0:getComputedTop() .. ")");
    assert(100 == root_child0_child0:getComputedWidth(), "100 == root_child0_child0:getComputedWidth() (" .. root_child0_child0:getComputedWidth() .. ")");
    assert(100 == root_child0_child0:getComputedHeight(), "100 == root_child0_child0:getComputedHeight() (" .. root_child0_child0:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("absolute_layout_within_border")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setMargin(Flow.Edge.Left, 10)
    root:setMargin(Flow.Edge.Top, 10)
    root:setMargin(Flow.Edge.Right, 10)
    root:setMargin(Flow.Edge.Bottom, 10)
    root:setPadding(Flow.Edge.Left, 10)
    root:setPadding(Flow.Edge.Top, 10)
    root:setPadding(Flow.Edge.Right, 10)
    root:setPadding(Flow.Edge.Bottom, 10)
    root:setBorder(Flow.Edge.Left, 10)
    root:setBorder(Flow.Edge.Top, 10)
    root:setBorder(Flow.Edge.Right, 10)
    root:setBorder(Flow.Edge.Bottom, 10)
    root:setWidth(100)
    root:setHeight(100)

    local root_child0 = Flow.Node.new(config)
    root_child0:setPositionType(Flow.PositionType.Absolute)
    root_child0:setPosition(Flow.Edge.Left, 0)
    root_child0:setPosition(Flow.Edge.Top, 0)
    root_child0:setWidth(50)
    root_child0:setHeight(50)
    root:insertChild(root_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setPositionType(Flow.PositionType.Absolute)
    root_child1:setPosition(Flow.Edge.Right, 0)
    root_child1:setPosition(Flow.Edge.Bottom, 0)
    root_child1:setWidth(50)
    root_child1:setHeight(50)
    root:insertChild(root_child1, 2)

    local root_child2 = Flow.Node.new(config)
    root_child2:setPositionType(Flow.PositionType.Absolute)
    root_child2:setPosition(Flow.Edge.Left, 0)
    root_child2:setPosition(Flow.Edge.Top, 0)
    root_child2:setMargin(Flow.Edge.Left, 10)
    root_child2:setMargin(Flow.Edge.Top, 10)
    root_child2:setMargin(Flow.Edge.Right, 10)
    root_child2:setMargin(Flow.Edge.Bottom, 10)
    root_child2:setWidth(50)
    root_child2:setHeight(50)
    root:insertChild(root_child2, 3)

    local root_child3 = Flow.Node.new(config)
    root_child3:setPositionType(Flow.PositionType.Absolute)
    root_child3:setPosition(Flow.Edge.Right, 0)
    root_child3:setPosition(Flow.Edge.Bottom, 0)
    root_child3:setMargin(Flow.Edge.Left, 10)
    root_child3:setMargin(Flow.Edge.Top, 10)
    root_child3:setMargin(Flow.Edge.Right, 10)
    root_child3:setMargin(Flow.Edge.Bottom, 10)
    root_child3:setWidth(50)
    root_child3:setHeight(50)
    root:insertChild(root_child3, 4)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(10 == root:getComputedLeft(), "10 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(10 == root:getComputedTop(), "10 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(10 == root_child0:getComputedLeft(), "10 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(10 == root_child0:getComputedTop(), "10 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(50 == root_child0:getComputedWidth(), "50 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(50 == root_child0:getComputedHeight(), "50 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(40 == root_child1:getComputedLeft(), "40 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(40 == root_child1:getComputedTop(), "40 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(50 == root_child1:getComputedWidth(), "50 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(50 == root_child1:getComputedHeight(), "50 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(20 == root_child2:getComputedLeft(), "20 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(20 == root_child2:getComputedTop(), "20 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(50 == root_child2:getComputedWidth(), "50 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(50 == root_child2:getComputedHeight(), "50 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    assert(30 == root_child3:getComputedLeft(), "30 == root_child3:getComputedLeft() (" .. root_child3:getComputedLeft() .. ")");
    assert(30 == root_child3:getComputedTop(), "30 == root_child3:getComputedTop() (" .. root_child3:getComputedTop() .. ")");
    assert(50 == root_child3:getComputedWidth(), "50 == root_child3:getComputedWidth() (" .. root_child3:getComputedWidth() .. ")");
    assert(50 == root_child3:getComputedHeight(), "50 == root_child3:getComputedHeight() (" .. root_child3:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(10 == root:getComputedLeft(), "10 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(10 == root:getComputedTop(), "10 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(10 == root_child0:getComputedLeft(), "10 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(10 == root_child0:getComputedTop(), "10 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(50 == root_child0:getComputedWidth(), "50 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(50 == root_child0:getComputedHeight(), "50 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(40 == root_child1:getComputedLeft(), "40 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(40 == root_child1:getComputedTop(), "40 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(50 == root_child1:getComputedWidth(), "50 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(50 == root_child1:getComputedHeight(), "50 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(20 == root_child2:getComputedLeft(), "20 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(20 == root_child2:getComputedTop(), "20 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(50 == root_child2:getComputedWidth(), "50 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(50 == root_child2:getComputedHeight(), "50 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    assert(30 == root_child3:getComputedLeft(), "30 == root_child3:getComputedLeft() (" .. root_child3:getComputedLeft() .. ")");
    assert(30 == root_child3:getComputedTop(), "30 == root_child3:getComputedTop() (" .. root_child3:getComputedTop() .. ")");
    assert(50 == root_child3:getComputedWidth(), "50 == root_child3:getComputedWidth() (" .. root_child3:getComputedWidth() .. ")");
    assert(50 == root_child3:getComputedHeight(), "50 == root_child3:getComputedHeight() (" .. root_child3:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("absolute_layout_align_items_and_justify_content_center")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setJustifyContent(Flow.Justify.Center)
    root:setAlignItems(Flow.Align.Center)
    root:setFlexGrow(1)
    root:setWidth(110)
    root:setHeight(100)

    local root_child0 = Flow.Node.new(config)
    root_child0:setPositionType(Flow.PositionType.Absolute)
    root_child0:setWidth(60)
    root_child0:setHeight(40)
    root:insertChild(root_child0, 1)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(110 == root:getComputedWidth(), "110 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(25 == root_child0:getComputedLeft(), "25 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(30 == root_child0:getComputedTop(), "30 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(60 == root_child0:getComputedWidth(), "60 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(40 == root_child0:getComputedHeight(), "40 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(110 == root:getComputedWidth(), "110 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(25 == root_child0:getComputedLeft(), "25 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(30 == root_child0:getComputedTop(), "30 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(60 == root_child0:getComputedWidth(), "60 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(40 == root_child0:getComputedHeight(), "40 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("absolute_layout_align_items_and_justify_content_flex_end")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setJustifyContent(Flow.Justify.FlexEnd)
    root:setAlignItems(Flow.Align.FlexEnd)
    root:setFlexGrow(1)
    root:setWidth(110)
    root:setHeight(100)

    local root_child0 = Flow.Node.new(config)
    root_child0:setPositionType(Flow.PositionType.Absolute)
    root_child0:setWidth(60)
    root_child0:setHeight(40)
    root:insertChild(root_child0, 1)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(110 == root:getComputedWidth(), "110 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(50 == root_child0:getComputedLeft(), "50 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(60 == root_child0:getComputedTop(), "60 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(60 == root_child0:getComputedWidth(), "60 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(40 == root_child0:getComputedHeight(), "40 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(110 == root:getComputedWidth(), "110 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(60 == root_child0:getComputedTop(), "60 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(60 == root_child0:getComputedWidth(), "60 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(40 == root_child0:getComputedHeight(), "40 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("absolute_layout_justify_content_center")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setJustifyContent(Flow.Justify.Center)
    root:setFlexGrow(1)
    root:setWidth(110)
    root:setHeight(100)

    local root_child0 = Flow.Node.new(config)
    root_child0:setPositionType(Flow.PositionType.Absolute)
    root_child0:setWidth(60)
    root_child0:setHeight(40)
    root:insertChild(root_child0, 1)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(110 == root:getComputedWidth(), "110 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(30 == root_child0:getComputedTop(), "30 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(60 == root_child0:getComputedWidth(), "60 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(40 == root_child0:getComputedHeight(), "40 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(110 == root:getComputedWidth(), "110 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(50 == root_child0:getComputedLeft(), "50 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(30 == root_child0:getComputedTop(), "30 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(60 == root_child0:getComputedWidth(), "60 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(40 == root_child0:getComputedHeight(), "40 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("absolute_layout_align_items_center")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setAlignItems(Flow.Align.Center)
    root:setFlexGrow(1)
    root:setWidth(110)
    root:setHeight(100)

    local root_child0 = Flow.Node.new(config)
    root_child0:setPositionType(Flow.PositionType.Absolute)
    root_child0:setWidth(60)
    root_child0:setHeight(40)
    root:insertChild(root_child0, 1)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(110 == root:getComputedWidth(), "110 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(25 == root_child0:getComputedLeft(), "25 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(60 == root_child0:getComputedWidth(), "60 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(40 == root_child0:getComputedHeight(), "40 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(110 == root:getComputedWidth(), "110 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(25 == root_child0:getComputedLeft(), "25 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(60 == root_child0:getComputedWidth(), "60 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(40 == root_child0:getComputedHeight(), "40 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("absolute_layout_align_items_center_on_child_only")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setFlexGrow(1)
    root:setWidth(110)
    root:setHeight(100)

    local root_child0 = Flow.Node.new(config)
    root_child0:setAlignSelf(Flow.Align.Center)
    root_child0:setPositionType(Flow.PositionType.Absolute)
    root_child0:setWidth(60)
    root_child0:setHeight(40)
    root:insertChild(root_child0, 1)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(110 == root:getComputedWidth(), "110 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(25 == root_child0:getComputedLeft(), "25 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(60 == root_child0:getComputedWidth(), "60 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(40 == root_child0:getComputedHeight(), "40 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(110 == root:getComputedWidth(), "110 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(25 == root_child0:getComputedLeft(), "25 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(60 == root_child0:getComputedWidth(), "60 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(40 == root_child0:getComputedHeight(), "40 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("absolute_layout_align_items_and_justify_content_center_and_top_position")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setJustifyContent(Flow.Justify.Center)
    root:setAlignItems(Flow.Align.Center)
    root:setFlexGrow(1)
    root:setWidth(110)
    root:setHeight(100)

    local root_child0 = Flow.Node.new(config)
    root_child0:setPositionType(Flow.PositionType.Absolute)
    root_child0:setPosition(Flow.Edge.Top, 10)
    root_child0:setWidth(60)
    root_child0:setHeight(40)
    root:insertChild(root_child0, 1)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(110 == root:getComputedWidth(), "110 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(25 == root_child0:getComputedLeft(), "25 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(10 == root_child0:getComputedTop(), "10 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(60 == root_child0:getComputedWidth(), "60 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(40 == root_child0:getComputedHeight(), "40 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(110 == root:getComputedWidth(), "110 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(25 == root_child0:getComputedLeft(), "25 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(10 == root_child0:getComputedTop(), "10 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(60 == root_child0:getComputedWidth(), "60 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(40 == root_child0:getComputedHeight(), "40 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("absolute_layout_align_items_and_justify_content_center_and_bottom_position")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setJustifyContent(Flow.Justify.Center)
    root:setAlignItems(Flow.Align.Center)
    root:setFlexGrow(1)
    root:setWidth(110)
    root:setHeight(100)

    local root_child0 = Flow.Node.new(config)
    root_child0:setPositionType(Flow.PositionType.Absolute)
    root_child0:setPosition(Flow.Edge.Bottom, 10)
    root_child0:setWidth(60)
    root_child0:setHeight(40)
    root:insertChild(root_child0, 1)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(110 == root:getComputedWidth(), "110 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(25 == root_child0:getComputedLeft(), "25 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(50 == root_child0:getComputedTop(), "50 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(60 == root_child0:getComputedWidth(), "60 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(40 == root_child0:getComputedHeight(), "40 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(110 == root:getComputedWidth(), "110 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(25 == root_child0:getComputedLeft(), "25 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(50 == root_child0:getComputedTop(), "50 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(60 == root_child0:getComputedWidth(), "60 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(40 == root_child0:getComputedHeight(), "40 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("absolute_layout_align_items_and_justify_content_center_and_left_position")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setJustifyContent(Flow.Justify.Center)
    root:setAlignItems(Flow.Align.Center)
    root:setFlexGrow(1)
    root:setWidth(110)
    root:setHeight(100)

    local root_child0 = Flow.Node.new(config)
    root_child0:setPositionType(Flow.PositionType.Absolute)
    root_child0:setPosition(Flow.Edge.Left, 5)
    root_child0:setWidth(60)
    root_child0:setHeight(40)
    root:insertChild(root_child0, 1)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(110 == root:getComputedWidth(), "110 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(5 == root_child0:getComputedLeft(), "5 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(30 == root_child0:getComputedTop(), "30 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(60 == root_child0:getComputedWidth(), "60 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(40 == root_child0:getComputedHeight(), "40 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(110 == root:getComputedWidth(), "110 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(5 == root_child0:getComputedLeft(), "5 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(30 == root_child0:getComputedTop(), "30 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(60 == root_child0:getComputedWidth(), "60 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(40 == root_child0:getComputedHeight(), "40 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("absolute_layout_align_items_and_justify_content_center_and_right_position")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setJustifyContent(Flow.Justify.Center)
    root:setAlignItems(Flow.Align.Center)
    root:setFlexGrow(1)
    root:setWidth(110)
    root:setHeight(100)

    local root_child0 = Flow.Node.new(config)
    root_child0:setPositionType(Flow.PositionType.Absolute)
    root_child0:setPosition(Flow.Edge.Right, 5)
    root_child0:setWidth(60)
    root_child0:setHeight(40)
    root:insertChild(root_child0, 1)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(110 == root:getComputedWidth(), "110 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(45 == root_child0:getComputedLeft(), "45 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(30 == root_child0:getComputedTop(), "30 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(60 == root_child0:getComputedWidth(), "60 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(40 == root_child0:getComputedHeight(), "40 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(110 == root:getComputedWidth(), "110 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(45 == root_child0:getComputedLeft(), "45 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(30 == root_child0:getComputedTop(), "30 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(60 == root_child0:getComputedWidth(), "60 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(40 == root_child0:getComputedHeight(), "40 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("position_root_with_rtl_should_position_withoutdirection")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setPosition(Flow.Edge.Left, 72)
    root:setWidth(52)
    root:setHeight(52)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(72 == root:getComputedLeft(), "72 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(52 == root:getComputedWidth(), "52 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(52 == root:getComputedHeight(), "52 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(72 == root:getComputedLeft(), "72 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(52 == root:getComputedWidth(), "52 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(52 == root:getComputedHeight(), "52 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("absolute_layout_percentage_bottom_based_on_parent_height")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setWidth(100)
    root:setHeight(200)

    local root_child0 = Flow.Node.new(config)
    root_child0:setPositionType(Flow.PositionType.Absolute)
    root_child0:setPosition(Flow.Edge.Top, "50%")
    root_child0:setWidth(10)
    root_child0:setHeight(10)
    root:insertChild(root_child0, 1)

    local root_child1 = Flow.Node.new(config)
    root_child1:setPositionType(Flow.PositionType.Absolute)
    root_child1:setPosition(Flow.Edge.Bottom, "50%")
    root_child1:setWidth(10)
    root_child1:setHeight(10)
    root:insertChild(root_child1, 2)

    local root_child2 = Flow.Node.new(config)
    root_child2:setPositionType(Flow.PositionType.Absolute)
    root_child2:setPosition(Flow.Edge.Top, "10%")
    root_child2:setPosition(Flow.Edge.Bottom, "10%")
    root_child2:setWidth(10)
    root:insertChild(root_child2, 3)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(200 == root:getComputedHeight(), "200 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(100 == root_child0:getComputedTop(), "100 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(10 == root_child0:getComputedWidth(), "10 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(10 == root_child0:getComputedHeight(), "10 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(0 == root_child1:getComputedLeft(), "0 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(90 == root_child1:getComputedTop(), "90 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(10 == root_child1:getComputedWidth(), "10 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(10 == root_child1:getComputedHeight(), "10 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(0 == root_child2:getComputedLeft(), "0 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(20 == root_child2:getComputedTop(), "20 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(10 == root_child2:getComputedWidth(), "10 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(160 == root_child2:getComputedHeight(), "160 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(200 == root:getComputedHeight(), "200 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(90 == root_child0:getComputedLeft(), "90 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(100 == root_child0:getComputedTop(), "100 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(10 == root_child0:getComputedWidth(), "10 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(10 == root_child0:getComputedHeight(), "10 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    assert(90 == root_child1:getComputedLeft(), "90 == root_child1:getComputedLeft() (" .. root_child1:getComputedLeft() .. ")");
    assert(90 == root_child1:getComputedTop(), "90 == root_child1:getComputedTop() (" .. root_child1:getComputedTop() .. ")");
    assert(10 == root_child1:getComputedWidth(), "10 == root_child1:getComputedWidth() (" .. root_child1:getComputedWidth() .. ")");
    assert(10 == root_child1:getComputedHeight(), "10 == root_child1:getComputedHeight() (" .. root_child1:getComputedHeight() .. ")");

    assert(90 == root_child2:getComputedLeft(), "90 == root_child2:getComputedLeft() (" .. root_child2:getComputedLeft() .. ")");
    assert(20 == root_child2:getComputedTop(), "20 == root_child2:getComputedTop() (" .. root_child2:getComputedTop() .. ")");
    assert(10 == root_child2:getComputedWidth(), "10 == root_child2:getComputedWidth() (" .. root_child2:getComputedWidth() .. ")");
    assert(160 == root_child2:getComputedHeight(), "160 == root_child2:getComputedHeight() (" .. root_child2:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("absolute_layout_in_wrap_reverse_column_container")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setFlexWrap(Flow.Wrap.WrapReverse)
    root:setWidth(100)
    root:setHeight(100)

    local root_child0 = Flow.Node.new(config)
    root_child0:setPositionType(Flow.PositionType.Absolute)
    root_child0:setWidth(20)
    root_child0:setHeight(20)
    root:insertChild(root_child0, 1)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(80 == root_child0:getComputedLeft(), "80 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(20 == root_child0:getComputedWidth(), "20 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(20 == root_child0:getComputedHeight(), "20 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(20 == root_child0:getComputedWidth(), "20 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(20 == root_child0:getComputedHeight(), "20 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("absolute_layout_in_wrap_reverse_row_container")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setFlexDirection(Flow.FlexDirection.Row)
    root:setFlexWrap(Flow.Wrap.WrapReverse)
    root:setWidth(100)
    root:setHeight(100)

    local root_child0 = Flow.Node.new(config)
    root_child0:setPositionType(Flow.PositionType.Absolute)
    root_child0:setWidth(20)
    root_child0:setHeight(20)
    root:insertChild(root_child0, 1)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(80 == root_child0:getComputedTop(), "80 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(20 == root_child0:getComputedWidth(), "20 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(20 == root_child0:getComputedHeight(), "20 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(80 == root_child0:getComputedLeft(), "80 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(80 == root_child0:getComputedTop(), "80 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(20 == root_child0:getComputedWidth(), "20 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(20 == root_child0:getComputedHeight(), "20 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("absolute_layout_in_wrap_reverse_column_container_flex_end")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setFlexWrap(Flow.Wrap.WrapReverse)
    root:setWidth(100)
    root:setHeight(100)

    local root_child0 = Flow.Node.new(config)
    root_child0:setAlignSelf(Flow.Align.FlexEnd)
    root_child0:setPositionType(Flow.PositionType.Absolute)
    root_child0:setWidth(20)
    root_child0:setHeight(20)
    root:insertChild(root_child0, 1)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(20 == root_child0:getComputedWidth(), "20 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(20 == root_child0:getComputedHeight(), "20 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(80 == root_child0:getComputedLeft(), "80 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(20 == root_child0:getComputedWidth(), "20 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(20 == root_child0:getComputedHeight(), "20 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end
do
    print("absolute_layout_in_wrap_reverse_row_container_flex_end")
    local config = Flow.Config.new()

    local root = Flow.Node.new(config)
    root:setFlexDirection(Flow.FlexDirection.Row)
    root:setFlexWrap(Flow.Wrap.WrapReverse)
    root:setWidth(100)
    root:setHeight(100)

    local root_child0 = Flow.Node.new(config)
    root_child0:setAlignSelf(Flow.Align.FlexEnd)
    root_child0:setPositionType(Flow.PositionType.Absolute)
    root_child0:setWidth(20)
    root_child0:setHeight(20)
    root:insertChild(root_child0, 1)
    root:calculateLayout(nil, nil, Flow.Direction.LTR)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(0 == root_child0:getComputedLeft(), "0 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(20 == root_child0:getComputedWidth(), "20 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(20 == root_child0:getComputedHeight(), "20 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");

    root:calculateLayout(nil, nil, Flow.Direction.RTL)

    assert(0 == root:getComputedLeft(), "0 == root:getComputedLeft() (" .. root:getComputedLeft() .. ")");
    assert(0 == root:getComputedTop(), "0 == root:getComputedTop() (" .. root:getComputedTop() .. ")");
    assert(100 == root:getComputedWidth(), "100 == root:getComputedWidth() (" .. root:getComputedWidth() .. ")");
    assert(100 == root:getComputedHeight(), "100 == root:getComputedHeight() (" .. root:getComputedHeight() .. ")");

    assert(80 == root_child0:getComputedLeft(), "80 == root_child0:getComputedLeft() (" .. root_child0:getComputedLeft() .. ")");
    assert(0 == root_child0:getComputedTop(), "0 == root_child0:getComputedTop() (" .. root_child0:getComputedTop() .. ")");
    assert(20 == root_child0:getComputedWidth(), "20 == root_child0:getComputedWidth() (" .. root_child0:getComputedWidth() .. ")");
    assert(20 == root_child0:getComputedHeight(), "20 == root_child0:getComputedHeight() (" .. root_child0:getComputedHeight() .. ")");
    root:freeRecursive()
    config:free()
end

return nil
